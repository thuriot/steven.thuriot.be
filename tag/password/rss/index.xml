<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; Password]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/tag/password/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[Secure Strings]]></title> <description><![CDATA[A lot of programs use some form of passwords. These are usually kept in memory. The issue here is that a program&#39;s used memory is very easy to read out and your unsecured password will be there in plain sight. ]]></description> <link>//steven.thuriot.be/secure-strings</link> <guid isPermaLink="true">//steven.thuriot.be/secure-strings</guid> <pubDate>2015-08-23T18:59:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/security.jpg" medium="image"/> <content:encoded><![CDATA[<p>A lot of programs use some form of passwords. These are usually kept in memory. The issue here is that a program&#39;s used memory is very easy to read out and your unsecured password will be there in plain sight.</p> <p>For this specific reason, the <a href="https://msdn.microsoft.com/en-us/library/system.security.securestring.aspx"><code>SecureString</code> (<code>System.Security</code>)</a> class is available, which will keep your string encrypted in memory.</p> <p>Since this class does not have an apparent constructor that receives a <code>string</code>, people tend to create an empty <code>SecureString</code>, iterate their string and call <code>AppendChar</code> for each and every iteration. Not only is this a tedious process, the .NET framework will have to unprotect the value each time and protect it again after adding the <code>char</code>. The good news, though, is that this entire process is done in unmanaged memory.</p> <p>This whole process, however, can be done in a much easier way, by using <code>unsafe</code> code (tick the option to enable it in your project settings). This will enable you to create a char pointer (<code>char*</code>) to your string and pass it to the <code>SecureString</code> constructor as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">SecureString</span> <span class="nf">ToSecureString</span><span class="p">(</span><span class="k">this</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">passwordChars</span> <span class="p">=</span> <span class="n">password</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">securePassword</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SecureString</span><span class="p">(</span><span class="n">passwordChars</span><span class="p">,</span> <span class="n">password</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
                <span class="n">securePassword</span><span class="p">.</span><span class="n">MakeReadOnly</span><span class="p">();</span>

                <span class="k">return</span> <span class="n">securePassword</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div> <p>Don&#39;t forget to mark it as read-only when you&#39;re done to prevent it from being modified.</p> <p>Getting your string back, is just as easy and can be done by calling <code>SecureStringToGlobalAllocUnicode</code>:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">ToUnsecureString</span><span class="p">(</span><span class="k">this</span> <span class="n">SecureString</span> <span class="n">securePassword</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IntPtr</span> <span class="n">unmanagedString</span> <span class="p">=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">;</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">unmanagedString</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">SecureStringToGlobalAllocUnicode</span><span class="p">(</span><span class="n">securePassword</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">PtrToStringUni</span><span class="p">(</span><span class="n">unmanagedString</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="n">Marshal</span><span class="p">.</span><span class="n">ZeroFreeGlobalAllocUnicode</span><span class="p">(</span><span class="n">unmanagedString</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div> <p>One could, however, argue that you don&#39;t have control over how long that string will remain in your memory. Instead of working with a string, we could work with a byte array instead. This will be easy to clear from memory afterwards.</p> <p>We could go a step further and automate the process as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
<span class="na">        [DllImport(&quot;msvcrt.dll&quot;, EntryPoint = &quot;memcpy&quot;, CallingConvention = CallingConvention.Cdecl, SetLastError = false)]</span>
        <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">memcpy</span><span class="p">(</span><span class="k">void</span><span class="p">*</span> <span class="n">dest</span><span class="p">,</span> <span class="k">void</span><span class="p">*</span> <span class="n">src</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">T</span> <span class="n">Process</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">SecureString</span> <span class="n">input</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">[],</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">process</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="kt">var</span> <span class="n">ptr</span> <span class="p">=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">;</span>
          <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

          <span class="k">try</span>
          <span class="p">{</span>
              <span class="n">ptr</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">SecureStringToBSTR</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>

              <span class="n">bytes</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">input</span><span class="p">.</span><span class="n">Length</span> <span class="p">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)];</span>
              <span class="k">fixed</span> <span class="p">(</span><span class="k">void</span><span class="p">*</span> <span class="n">b</span> <span class="p">=</span> <span class="n">bytes</span><span class="p">)</span>
                  <span class="n">memcpy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">ptr</span><span class="p">.</span><span class="n">ToPointer</span><span class="p">(),</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

              <span class="k">return</span> <span class="nf">process</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="k">finally</span>
          <span class="p">{</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">bytes</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                  <span class="n">bytes</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>

              <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span> <span class="p">!=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">ZeroFreeBSTR</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
          <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> </channel> </rss>