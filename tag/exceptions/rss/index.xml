<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; Exceptions]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/tag/exceptions/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[Testing for exceptions]]></title> <description><![CDATA[Every piece of software should at least have unit tests. Quite a few of these tests will probably be used to see if the method is correctly throwing an exception when needed. ]]></description> <link>//steven.thuriot.be/testing-for-exceptions</link> <guid isPermaLink="true">//steven.thuriot.be/testing-for-exceptions</guid> <pubDate>2010-12-30T12:51:00+00:00</pubDate> <content:encoded><![CDATA[<p>Every piece of software should at least have unit tests. Quite a few of these tests will probably be used to see if the method is correctly throwing an exception when needed.</p> <p>However, often the unit test&#39;s <em>ExpectedException</em> attribute just doesn&#39;t cut it. Imagine having two possible exceptions thrown from a certain method, both having the same exception type but different messages. To make testing for this easier, I wrote a little helper class!</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class="p">;</span>
<span class="k">namespace</span> <span class="nn">Assertion.Test</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AssertHelper</span>
    <span class="p">{</span>
        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks of the action throws the specified Exception.</span>
        <span class="c1">/// It also checks if the messages are the same.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;typeparam name=&quot;T&quot;&gt;The type of exception to be thrown.&lt;/typeparam&gt;</span>
        <span class="c1">/// &lt;param name=&quot;action&quot;&gt;The action to be performed.&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name=&quot;expectedMessage&quot;&gt;The expected message.&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Throws</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Action</span> <span class="n">action</span><span class="p">,</span> <span class="n">String</span> <span class="n">expectedMessage</span><span class="p">)</span>
             <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">Exception</span>
        <span class="p">{</span>
            <span class="n">Boolean</span> <span class="n">fail</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">action</span><span class="p">.</span><span class="n">Invoke</span><span class="p">();</span>
                <span class="n">fail</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exc</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="n">exc</span><span class="p">.</span><span class="n">GetType</span><span class="p">(),</span>
                         <span class="s">&quot;An exception of the wrong type was thrown ({0} instead of {1}).&quot;</span><span class="p">,</span>
                         <span class="n">exc</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="n">expectedMessage</span><span class="p">,</span> <span class="n">exc</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="s">&quot;The messages are not equal.&quot;</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">fail</span><span class="p">)</span>
                <span class="n">Assert</span><span class="p">.</span><span class="n">Fail</span><span class="p">(</span><span class="s">&quot;Exception of type {0} should have been thrown.&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">Name</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>This method will check if the exception gets thrown, if it throws the correct type of exception and if the message is correct!</p> <p>Using it goes as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">AssertHelper</span><span class="p">.</span><span class="n">Throws</span><span class="p">&lt;</span><span class="n">RepositoryException</span><span class="p">&gt;</span>
<span class="p">(</span>
    <span class="p">()</span> <span class="p">=&gt;</span> <span class="kt">object</span><span class="p">.</span><span class="n">Method</span><span class="p">(),</span>
    <span class="s">&quot;This is the exception&#39;s message!&quot;</span>
<span class="p">);</span>
</code></pre></div> <p>The generic refers to the exception that you are expecting. The first parameter is the method that will be called, the second is the message that the thrown exception will show.</p> ]]></content:encoded> </item> <item> <title><![CDATA[Exceptions and the TPL]]></title> <description><![CDATA[When an exception occurs while using the TPL, it will always get wrapped with an [AggregateException](http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx) before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well. ]]></description> <link>//steven.thuriot.be/exceptions-and-the-tpl</link> <guid isPermaLink="true">//steven.thuriot.be/exceptions-and-the-tpl</guid> <pubDate>2013-11-27T10:50:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/Carnivorous-Rabbit.jpg" medium="image"/> <content:encoded><![CDATA[<p>When an exception occurs while using the TPL, it will always get wrapped with an <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well.</p> <p>This is, <em>of course</em>, something you do not want to happen as the callstack contains valuable information.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">try</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Run</span><span class="p">(...)</span>
    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="n">AggregateException</span> <span class="n">ex</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ExceptionDispatchInfo</span><span class="p">.</span><span class="n">Capture</span><span class="p">(</span><span class="n">ex</span><span class="p">.</span><span class="n">InnerException</span><span class="p">).</span><span class="n">Throw</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <p>Due to the new <a href="http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx">async/await</a> system Microsoft introduced in .NET 4.5, they simplified this greatly by introducing the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo.aspx">ExceptionDispatchInfo</a> helper.</p> <p>By using this class, you are able to rethrow a caught exception object without losing the callstack. This allows you to unwrap the <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> and rethrow the actual exception. This allows you or the users of your code to catch specific exceptions.</p> <p>The snippet above is, of course, not a very realistic way to use this helper class, but shows what it does perfectly.</p> ]]></content:encoded> </item> </channel> </rss>