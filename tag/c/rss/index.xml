<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; C#]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/tag/c/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[Daily Tracing]]></title> <description><![CDATA[No doubt about it. Tracing is very important when working on a project. ]]></description> <link>//steven.thuriot.be/daily-tracing</link> <guid isPermaLink="true">//steven.thuriot.be/daily-tracing</guid> <pubDate>2015-10-14T20:06:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/library.jpg" medium="image"/> <content:encoded><![CDATA[<p>No doubt about it. Tracing is very important when working on a project.</p> <p>Not only will it make tracking down bugs easier, it will also make it a lot easier to get some numbers for general usage, timings, etc.</p> <p>On a project I&#39;m currently working on, it&#39;s very interesting to have a lot of tracing. And I do mean <code>a lot</code>! The project is quite large and the logic is incredibly complex (sadly, by its very nature). Log files were growing fast, faster than we could manage. However, at any given time, we&#39;d only be interested in traces from the last three days, tops.</p> <p>I created a <code>TraceListener</code> that allows you to trace each day to an individual file. It will concatenate the date to the given file name. As soon as it notices we started a new day, it will create a new file and start writing to that one instead. At the same time, it will clean up any files older than three days, as those are not relevant to us anymore. The number of days it should keep, as well as the formatting of the file&#39;s title can easily be adjusted in code.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">DailyTraceListener</span> <span class="p">:</span> <span class="n">TraceListener</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_logLocation</span><span class="p">;</span>

    <span class="k">private</span> <span class="n">StreamWriter</span> <span class="n">_writer</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">DateTime</span> <span class="n">_today</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">DailyTraceListener</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_logLocation</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">TextWriter</span> <span class="nf">EnsureWriter</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_today</span> <span class="p">==</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">)</span> <span class="k">return</span> <span class="n">_writer</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">_writer</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>

        <span class="n">_today</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">directoryName</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">GetDirectoryName</span><span class="p">(</span><span class="n">_logLocation</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">directoryName</span><span class="p">))</span>
            <span class="n">directoryName</span> <span class="p">=</span> <span class="n">AppDomain</span><span class="p">.</span><span class="n">CurrentDomain</span><span class="p">.</span><span class="n">BaseDirectory</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">fileNameWithoutExtension</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">GetFileNameWithoutExtension</span><span class="p">(</span><span class="n">_logLocation</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">extension</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">_logLocation</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">fileName</span> <span class="p">=</span> <span class="n">fileNameWithoutExtension</span> <span class="p">+</span> <span class="s">&quot;_&quot;</span> <span class="p">+</span> <span class="n">_today</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&quot;yyyyMMdd&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="n">extension</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">file</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span><span class="n">directoryName</span><span class="p">,</span> <span class="n">fileName</span><span class="p">);</span>

        <span class="n">_writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>


        <span class="c1">//Keep the last 3 days, delete the rest, but keep at least 3 files, even if they are older</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">magicNumber</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
        <span class="kt">var</span> <span class="n">oldFiles</span> <span class="p">=</span> <span class="n">Directory</span><span class="p">.</span><span class="n">GetFiles</span><span class="p">(</span><span class="n">directoryName</span><span class="p">,</span> <span class="n">fileNameWithoutExtension</span> <span class="p">+</span> <span class="s">&quot;*&quot;</span> <span class="p">+</span> <span class="n">extension</span><span class="p">)</span>
                                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Path</span> <span class="p">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">LastWrite</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">GetLastWriteTime</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">})</span>
                                <span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">LastWrite</span><span class="p">)</span>
                                <span class="p">.</span><span class="n">Skip</span><span class="p">(</span><span class="n">magicNumber</span><span class="p">)</span>
                                <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">oldFiles</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">fewDaysAgo</span> <span class="p">=</span> <span class="n">_today</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(-</span><span class="n">magicNumber</span><span class="p">);</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">oldFile</span> <span class="k">in</span> <span class="n">oldFiles</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">LastWrite</span> <span class="p">&lt;</span> <span class="n">fewDaysAgo</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Path</span><span class="p">))</span>
                <span class="k">try</span> <span class="p">{</span> <span class="n">File</span><span class="p">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">oldFile</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span> <span class="cm">/* ignore */</span> <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">_writer</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Write</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">EnsureWriter</span><span class="p">().</span><span class="n">Write</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WriteLine</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">EnsureWriter</span><span class="p">().</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Flush</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">lock</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                    <span class="n">_writer</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">(</span><span class="kt">bool</span> <span class="n">disposing</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">disposing</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="n">_writer</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Playing with Sets]]></title> <description><![CDATA[The [`Distinct`](https://msdn.microsoft.com/en-us/library/vstudio/bb348436.aspx) method is one of the really useful methods in the `System.Linq` namespace. Internally, it&#39;s really simple, too. It will just iterate your collection and add them all to a [`HashSet`](https://msdn.microsoft.com/en-us/library/bb359438.aspx). The set will make sure that each item is only added once on its own. ]]></description> <link>//steven.thuriot.be/playing-with-sets</link> <guid isPermaLink="true">//steven.thuriot.be/playing-with-sets</guid> <pubDate>2015-10-08T17:29:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/color-paint-cans.jpg" medium="image"/> <content:encoded><![CDATA[<p>The <a href="https://msdn.microsoft.com/en-us/library/vstudio/bb348436.aspx"><code>Distinct</code></a> method is one of the really useful methods in the <code>System.Linq</code> namespace. Internally, it&#39;s really simple, too. It will just iterate your collection and add them all to a <a href="https://msdn.microsoft.com/en-us/library/bb359438.aspx"><code>HashSet</code></a>. The set will make sure that each item is only added once on its own.</p> <p>Instead of adding all items and returning just the set, <code>Distinct</code> will actually create an iterator that will return the item if successfully added. While this is a good idea since the actual execution is deferred, at times it is nice to just create the set and keep working with it, instead.</p> <p>While this is simple enough as is, I created an extension method anyway.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">ToSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">source</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <p>It&#39;s a bit too simple to post, really. One could argue it&#39;s too simple to exist, even. And frankly, it is. So we&#39;ll go a step further, and allow creating the set based on a key.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">ToSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">.</span><span class="n">AsComparer</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div> <p>Continuing the <code>LINQ</code> way of thinking, it would be nice to just pass a <code>Func</code> along to the method to create the key. However, <code>HashSet</code> doesn&#39;t accept this and wants a comparer instead. So let&#39;s create a comparer that will wrap around our <code>Func</code>!</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">FunctorComparerExtensions</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="k">static</span> <span class="n">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">AsComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="kt">var</span> <span class="n">comparer</span> <span class="p">=</span> <span class="n">Comparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;.</span><span class="n">Default</span><span class="p">;</span>
       <span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">comparison</span> <span class="p">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">comparer</span><span class="p">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">keySelector</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">keySelector</span><span class="p">(</span><span class="n">y</span><span class="p">));</span>
       <span class="k">return</span> <span class="n">comparison</span><span class="p">.</span><span class="n">AsComparer</span><span class="p">();</span>
   <span class="p">}</span>

   <span class="k">public</span> <span class="k">static</span> <span class="n">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">AsComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">comparison</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="k">return</span> <span class="k">new</span> <span class="n">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">comparison</span><span class="p">);</span>
   <span class="p">}</span>

<span class="p">}</span>

<span class="k">sealed</span> <span class="k">class</span> <span class="nc">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEqualityComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">readonly</span> <span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">_comparison</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">FunctorComparer</span><span class="p">(</span><span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">comparison</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_comparison</span> <span class="p">=</span> <span class="n">comparison</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="nf">Compare</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">_comparison</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Compare</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">(</span><span class="n">T</span> <span class="n">obj</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Now our key will be able to be used for both comparisons as equality.</p> <p>Usage is quite simple!</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="k">set</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SomeCondition</span> <span class="p">==</span> <span class="k">true</span><span class="p">).</span><span class="n">ToSet</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">KeyProperty</span><span class="p">);</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Colored Console TraceListener]]></title> <description><![CDATA[Writing to the `Console` can provide a lot of useful information while developing. While this can easily be done by using the static `Console` class, I prefer using the `Trace` class instead. ]]></description> <link>//steven.thuriot.be/colored-console-tracelistener</link> <guid isPermaLink="true">//steven.thuriot.be/colored-console-tracelistener</guid> <pubDate>2015-08-31T18:38:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/ascii.png" medium="image"/> <content:encoded><![CDATA[<p>Writing to the <code>Console</code> can provide a lot of useful information while developing. While this can easily be done by using the static <code>Console</code> class, I prefer using the <code>Trace</code> class instead.</p> <p>Doing it this way, our code is easily reusable for other kinds of logging and provides the ability to add additional metadata, which can also be used to filter the messages (e.g. the type).</p> <p><code>System.Diagnostics</code> provides the <code>ConsoleTraceListener</code> class to combine these two. But I like to spice it up a bit and color-code the different types of events.</p> <p>This can easily be done by inheriting the provided TraceListener and overriding the <code>ConsoleColor</code> before writing our events.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ColorConsoleTraceListener</span> <span class="p">:</span> <span class="n">ConsoleTraceListener</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="n">IReadOnlyDictionary</span><span class="p">&lt;</span><span class="n">TraceEventType</span><span class="p">,</span> <span class="n">ConsoleColor</span><span class="p">&gt;</span> <span class="n">_colors</span><span class="p">;</span>
    <span class="k">static</span> <span class="nf">ColorConsoleTraceListener</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_colors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">TraceEventType</span><span class="p">,</span> <span class="n">ConsoleColor</span><span class="p">&gt;</span>
                <span class="p">{</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Verbose</span><span class="p">,</span>      <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Information</span><span class="p">,</span>  <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Gray</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Warning</span><span class="p">,</span>      <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Yellow</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Error</span><span class="p">,</span>        <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkRed</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Critical</span><span class="p">,</span>     <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Red</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Start</span><span class="p">,</span>        <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkCyan</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Stop</span><span class="p">,</span>         <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkGreen</span><span class="p">}</span>
                <span class="p">};</span>
    <span class="p">}</span>

    <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">_prependEventType</span><span class="p">;</span>
    <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">_prependSource</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">ColorConsoleTraceListener</span><span class="p">(</span><span class="kt">bool</span> <span class="n">prependEventType</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">prependSource</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_prependEventType</span> <span class="p">=</span> <span class="n">prependEventType</span><span class="p">;</span>
        <span class="n">_prependSource</span> <span class="p">=</span> <span class="n">prependSource</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">TraceEvent</span><span class="p">(</span><span class="n">TraceEventCache</span> <span class="n">eventCache</span><span class="p">,</span> <span class="kt">string</span> <span class="n">source</span><span class="p">,</span> <span class="n">TraceEventType</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Filter</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">Filter</span><span class="p">.</span><span class="n">ShouldTrace</span><span class="p">(</span><span class="n">eventCache</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>

        <span class="n">Trace</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">TraceEvent</span><span class="p">(</span><span class="n">TraceEventCache</span> <span class="n">eventCache</span><span class="p">,</span> <span class="kt">string</span> <span class="n">source</span><span class="p">,</span> <span class="n">TraceEventType</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">format</span><span class="p">,</span> <span class="k">params</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Filter</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">Filter</span><span class="p">.</span><span class="n">ShouldTrace</span><span class="p">(</span><span class="n">eventCache</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">format</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>


        <span class="n">Trace</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">InvariantCulture</span><span class="p">,</span> <span class="n">format</span><span class="p">,</span> <span class="n">args</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">Trace</span><span class="p">(</span><span class="kt">string</span> <span class="n">source</span><span class="p">,</span> <span class="n">TraceEventType</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ConsoleColor</span><span class="p">?</span> <span class="n">previousColor</span><span class="p">;</span>
        <span class="n">ConsoleColor</span> <span class="n">color</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_colors</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">eventType</span><span class="p">,</span> <span class="k">out</span> <span class="n">color</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">previousColor</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span><span class="p">;</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="n">color</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">previousColor</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_prependSource</span><span class="p">)</span> <span class="n">Write</span><span class="p">(</span><span class="n">source</span> <span class="p">+</span> <span class="s">&quot; — &quot;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_prependEventType</span><span class="p">)</span> <span class="n">Write</span><span class="p">(</span><span class="n">eventType</span> <span class="p">+</span> <span class="s">&quot; — &quot;</span><span class="p">);</span>
        <span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">previousColor</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="n">previousColor</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Secure Strings]]></title> <description><![CDATA[A lot of programs use some form of passwords. These are usually kept in memory. The issue here is that a program&#39;s used memory is very easy to read out and your unsecured password will be there in plain sight. ]]></description> <link>//steven.thuriot.be/secure-strings</link> <guid isPermaLink="true">//steven.thuriot.be/secure-strings</guid> <pubDate>2015-08-23T18:59:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/security.jpg" medium="image"/> <content:encoded><![CDATA[<p>A lot of programs use some form of passwords. These are usually kept in memory. The issue here is that a program&#39;s used memory is very easy to read out and your unsecured password will be there in plain sight.</p> <p>For this specific reason, the <a href="https://msdn.microsoft.com/en-us/library/system.security.securestring.aspx"><code>SecureString</code></a> (<code>System.Security</code>) class is available, which will keep your string encrypted in memory.</p> <p>Since this class does not have an apparent constructor that receives a <code>string</code>, people tend to create an empty <code>SecureString</code>, iterate their string and call <code>AppendChar</code> for each and every iteration. Not only is this a tedious process, the .NET framework will have to unprotect the value each time and protect it again after adding the <code>char</code>. The good news, though, is that this entire process is done in unmanaged memory.</p> <p>This whole process, however, can be done in a much easier way, by using <code>unsafe</code> code (tick the option to enable it in your project settings). This will enable you to create a char pointer (<code>char*</code>) to your string and pass it to the <code>SecureString</code> constructor as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">SecureString</span> <span class="nf">ToSecureString</span><span class="p">(</span><span class="k">this</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">passwordChars</span> <span class="p">=</span> <span class="n">password</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">securePassword</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SecureString</span><span class="p">(</span><span class="n">passwordChars</span><span class="p">,</span> <span class="n">password</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
                <span class="n">securePassword</span><span class="p">.</span><span class="n">MakeReadOnly</span><span class="p">();</span>

                <span class="k">return</span> <span class="n">securePassword</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div> <p>Don&#39;t forget to mark it as read-only when you&#39;re done to prevent it from being modified.</p> <p>Getting your string back, is just as easy and can be done by calling <code>SecureStringToGlobalAllocUnicode</code>:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">ToUnsecureString</span><span class="p">(</span><span class="k">this</span> <span class="n">SecureString</span> <span class="n">securePassword</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IntPtr</span> <span class="n">unmanagedString</span> <span class="p">=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">;</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">unmanagedString</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">SecureStringToGlobalAllocUnicode</span><span class="p">(</span><span class="n">securePassword</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">PtrToStringUni</span><span class="p">(</span><span class="n">unmanagedString</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="n">Marshal</span><span class="p">.</span><span class="n">ZeroFreeGlobalAllocUnicode</span><span class="p">(</span><span class="n">unmanagedString</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div> <p>One could, however, argue that you don&#39;t have control over how long that string will remain in your memory. Instead of working with a string, we could work with a byte array instead. This will be easy to clear from memory afterwards.</p> <p>We could go a step further and automate the process as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
<span class="na">        [DllImport(&quot;msvcrt.dll&quot;, EntryPoint = &quot;memcpy&quot;, CallingConvention = CallingConvention.Cdecl, SetLastError = false)]</span>
        <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">memcpy</span><span class="p">(</span><span class="k">void</span><span class="p">*</span> <span class="n">dest</span><span class="p">,</span> <span class="k">void</span><span class="p">*</span> <span class="n">src</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">T</span> <span class="n">Process</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">SecureString</span> <span class="n">input</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">[],</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">process</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="kt">var</span> <span class="n">ptr</span> <span class="p">=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">;</span>
          <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

          <span class="k">try</span>
          <span class="p">{</span>
              <span class="n">ptr</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">SecureStringToBSTR</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>

              <span class="n">bytes</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">input</span><span class="p">.</span><span class="n">Length</span> <span class="p">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)];</span>
              <span class="k">fixed</span> <span class="p">(</span><span class="k">void</span><span class="p">*</span> <span class="n">b</span> <span class="p">=</span> <span class="n">bytes</span><span class="p">)</span>
                  <span class="n">memcpy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">ptr</span><span class="p">.</span><span class="n">ToPointer</span><span class="p">(),</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

              <span class="k">return</span> <span class="nf">process</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="k">finally</span>
          <span class="p">{</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">bytes</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                  <span class="n">bytes</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>

              <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span> <span class="p">!=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">ZeroFreeBSTR</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
          <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Playing with Generic References: Hidden features of C#]]></title> <description><![CDATA[When writing generic classes, it&#39;s highly likely you&#39;ve gotten to the point (at least once) where you had to write a piece of type-specific code (wether due to third party or not) and you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action. ]]></description> <link>//steven.thuriot.be/generic-references</link> <guid isPermaLink="true">//steven.thuriot.be/generic-references</guid> <pubDate>2015-08-19T19:17:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/surprise.jpg" medium="image"/> <content:encoded><![CDATA[<p>When writing generic classes, it&#39;s highly likely you&#39;ve gotten to the point (at least once) where you had to write a piece of type-specific code (wether due to third party or not) and you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action.</p> <p>Code smells aside, you&#39;ve probably bumped into a casting issue at this point.</p> <p>Imagine a generic class that holds some data.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">//Shit hits the fan if we want to stay in safe code...</span>
    <span class="c1">//and we&#39;ll do something like this:</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">_value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Of course, this example won&#39;t even compile. The compiler won&#39;t let you cast to the generic type, even though you&#39;ve verified it to be correct and in fact, the same! A cast which isn&#39;t really a cast in the first place.</p> <p>Usually, we solve this by boxing the generic value first, and thus tricking the compiler.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="c1">//Tricking the compiler!</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="kt">object</span><span class="p">)</span><span class="n">_value</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Bam! Code compiles, code works. Job done. Or is it? Not only are we tricking the compiler, we are also tricking ourselves... Doing this will box the generic value, moving it from the stack to the heap. This process is slow and should be avoided.</p> <p>It&#39;s a problem (given you want to keep your code this way in the first place) that is actually easily solved. We can circumvent this by using a few of C#&#39;s undocumented keywords: <code>__makeref</code> and <code>__refvalue</code>.</p> <p><code>__makeref</code> will create a <code>TypeReference</code>, while <code>__refvalue</code> will cast the reference to the type you pass it. No boxing and unboxing involved!</p> <p>Implemented it would look like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="kt">var</span> <span class="n">tr</span> <span class="p">=</span> <span class="n">__makeref</span><span class="p">(</span><span class="n">_value</span><span class="p">);</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="n">__refvalue</span><span class="p">(</span><span class="n">tr</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="c1">//no typeof here..!</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>I have noticed that it&#39;s rather picky with its casts, so be careful! For instance, if the type of <code>_value</code> is a <code>string</code>, and you&#39;re calling <code>__refvalue</code> with <code>object</code> as a type, it will throw an exception. Even though in normal code, that would work without any issues!</p> <p>This definitely needs to be properly unit-tested when used in your project.</p> <p>Enjoy, and don&#39;t forget to check back for more adventures later!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Snapshot]]></title> <description><![CDATA[When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing `IClonable` or using `Serialization` (followed by `Deserialization`). ]]></description> <link>//steven.thuriot.be/snapshot</link> <guid isPermaLink="true">//steven.thuriot.be/snapshot</guid> <pubDate>2014-12-14T19:21:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/lens_camera_macro.jpg" medium="image"/> <content:encoded><![CDATA[<p>When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing <code>IClonable</code> or using <code>Serialization</code> (followed by <code>Deserialization</code>).</p> <p>This might be an issue, however, when that instance is one from a third-party library. I wrote a little library, called <a href="https://github.com/StevenThuriot/Snapshot">Snapshot</a>, that uses the DLR to come up with a solution to this problem.</p> <p>By default, it will map all public properties and fields to a dynamic object. This behaviour is configurable. You will end up with a dynamic object with the same <strong>public</strong> signature as the one you took a snapshot of.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Steven&quot;</span><span class="p">,</span> <span class="s">&quot;Thuriot&quot;</span><span class="p">);</span>
<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">27</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">snapshot</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">TakeSnapshot</span><span class="p">();</span>

<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">28</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Person age: {0}&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Snapshot age: {0}&quot;</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</code></pre></div> <hr> <p>Output:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Person age: 28
Snapshot age: 27
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Resolving types while stripping down nullables]]></title> <description><![CDATA[I&#39;m currently working on a WPF project that uses advanced validation for their screens. ]]></description> <link>//steven.thuriot.be/resolving-types-while-stripping-down-nullables</link> <guid isPermaLink="true">//steven.thuriot.be/resolving-types-while-stripping-down-nullables</guid> <pubDate>2013-11-27T12:10:00+00:00</pubDate> <content:encoded><![CDATA[<p>I&#39;m currently working on a WPF project that uses advanced validation for their screens.</p> <p>Each WPF control has a property that accepts a data type for the property you&#39;re binding it to. This datatype will be used during validation so illegal formats aren&#39;t filled in. (e.g. no strings when ints are expected, no ints when decimals are specified, etc...). We currently have a few metadata builders that simplify this process greatly by resolving types and setting them automatically.</p> <p>There is one catch, though. &lt;!--more--&gt;When binding to a nullable property, the base type is used rather than the nullable type.</p> <p>Coming up with a solution, was luckily not that hard. Rather than setting the datatype directly from the passed generic type, we added a little helper method. This method makes sure the correct type is always resolved.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="n">GetDataType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">T</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">Nullable</span><span class="p">.</span><span class="n">GetUnderlyingType</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">??</span> <span class="n">type</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Exceptions and the TPL]]></title> <description><![CDATA[When an exception occurs while using the TPL, it will always get wrapped with an [AggregateException](http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx) before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well. ]]></description> <link>//steven.thuriot.be/exceptions-and-the-tpl</link> <guid isPermaLink="true">//steven.thuriot.be/exceptions-and-the-tpl</guid> <pubDate>2013-11-27T10:50:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/Carnivorous-Rabbit.jpg" medium="image"/> <content:encoded><![CDATA[<p>When an exception occurs while using the TPL, it will always get wrapped with an <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well.</p> <p>This is, <em>of course</em>, something you do not want to happen as the callstack contains valuable information.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">try</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Run</span><span class="p">(...)</span>
    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="n">AggregateException</span> <span class="n">ex</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ExceptionDispatchInfo</span><span class="p">.</span><span class="n">Capture</span><span class="p">(</span><span class="n">ex</span><span class="p">.</span><span class="n">InnerException</span><span class="p">).</span><span class="n">Throw</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <p>Due to the new <a href="http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx">async/await</a> system Microsoft introduced in .NET 4.5, they simplified this greatly by introducing the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo.aspx">ExceptionDispatchInfo</a> helper.</p> <p>By using this class, you are able to rethrow a caught exception object without losing the callstack. This allows you to unwrap the <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> and rethrow the actual exception. This allows you or the users of your code to catch specific exceptions.</p> <p>The snippet above is, of course, not a very realistic way to use this helper class, but shows what it does perfectly.</p> ]]></content:encoded> </item> <item> <title><![CDATA[WF in WPF: Handing over control to the user]]></title> <description><![CDATA[...because delivering an application set in stone doesn&#39;t always cut it. ]]></description> <link>//steven.thuriot.be/wf-in-wpf-handing-over-control-to-the-user</link> <guid isPermaLink="true">//steven.thuriot.be/wf-in-wpf-handing-over-control-to-the-user</guid> <pubDate>2013-07-01T09:30:00+00:00</pubDate> <content:encoded><![CDATA[<p>...because delivering an application set in stone doesn&#39;t always cut it.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Stone.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Stone.jpg" alt="Set in Stone"></a></p> <h1>What is which and which is what??</h1> <p>Before we begin, it is important that we understand all of the concepts used. So we will go over them first.</p> <h2>WF: Windows Workflow Foundation</h2> <p>Workflow foundation is a Microsoft technology that provides the developer with an easy way to host an in-process workflow engine.</p> <p>A workflow is a series of distinct programming steps or phases. A step in workflow is also referred to as an “Activity”. The .NET framework already provides a huge list of these activities, e.g. “Writeline”. While most things can already be achieved using these predefined activities, it is also possible for the developer to create their very own activities.</p> <p>These activities can be used as building blocks to visually assemble a workflow.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Chart.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Chart.jpg" alt=".NET Framework Chart"></a></p> <h2>WPF: Windows Presentation Foundation</h2> <p>The Presentation Foundation is a graphical subsystem for rendering user interfaces in Windows-based applications. WPF runs on top of DirectX.</p> <p>WPF views are built using XAML. This is an XML-based language to define and link various UI elements.</p> <h1>Handing over control?</h1> <h2>Why?</h2> <p>A lot of the applications we build on a daily basis have a pretty solid foundation. The general guidelines are written down. These are then turned into code and a single purpose application is built.</p> <p>But what happens when the requirements can change on a daily basis? Or when they can differ greatly on the context they’re used in?</p> <p>This can be solved by handing over the control to the end user. By handing over simple building blocks, rather than lines of code written in stone, we can enable the user to customize the application to their needs at that particular time in an easy and playful manner.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Lego.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Lego.jpg" alt="Lego Building Blocks"></a></p> <p>By teaching the end user how to play with these blocks (or rather, Workflow Activities), (s)he can constantly keep shaping the application to their needs.</p> <h2>How?</h2> <p>Wait a minute... All of this sounds rather hard! The end user won’t be happy with a giant software bill after developing all of this...</p> <p>While it could be a lot of work, it is very easy to achieve this goal by combining WF with WPF!</p> <p>The .NET framework comes with a Workflow designer specifically for WPF. With only a few lines of code, we can offer the end user a visual designer that is easy to use. By dragging and dropping activity blocks, a workflow that suits the user’s needs can be set up in a matter of minutes.</p> <p>Not only is it easy to set up, it’s also very easy to execute, save and load workflows into the application! This way, the end user can set up several workflows they often require and load them up when needed.</p> <h3>Snippet</h3> <p>This sample shows how to do it in only a few lines of <em>(granted, quick and dirty)</em> code:</p> <h4>Window.xaml</h4> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;window</span> <span class="na">x:Class=</span><span class="s">&quot;MainWindow&quot;</span>
        <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span>
        <span class="na">xmlns:x=</span><span class="s">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>
        <span class="na">Title=</span><span class="s">&quot;MainWindow&quot;</span> <span class="na">Height=</span><span class="s">&quot;350&quot;</span> <span class="na">Width=</span><span class="s">&quot;525&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;grid</span> <span class="na">x:Name=</span><span class="s">&quot;_Grid&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/grid&gt;&lt;grid</span> <span class="err">.ColumnDefinitions</span><span class="nt">&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;Auto&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;*&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;Auto&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
        <span class="nt">&lt;/grid&gt;</span>

        <span class="nt">&lt;contentpresenter</span> <span class="na">Grid.Column=</span><span class="s">&quot;1&quot;</span> <span class="na">Content=</span><span class="s">&quot;{Binding View}&quot;</span><span class="nt">&gt;&lt;/contentpresenter&gt;</span>

<span class="nt">&lt;/window&gt;</span>
</code></pre></div> <h4>Window.xaml.cs</h4> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="nf">CreateDesigner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">dm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DesignerMetadata</span><span class="p">();</span>
    <span class="n">dm</span><span class="p">.</span><span class="n">Register</span><span class="p">();</span>

    <span class="n">_designer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkflowDesigner</span><span class="p">();</span>
    <span class="n">_designer</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="k">new</span> <span class="n">Sequence</span><span class="p">());</span>

    <span class="kt">var</span> <span class="n">designerView</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">Context</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">GetService</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DesignerView</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>

    <span class="n">designerView</span><span class="p">.</span><span class="n">WorkflowShellBarItemVisibility</span> <span class="p">=</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Imports</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">MiniMap</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Variables</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Arguments</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Zoom</span><span class="p">;</span>

    <span class="n">ToolboxControl</span> <span class="n">tc</span> <span class="p">=</span> <span class="n">GetToolboxControl</span><span class="p">();</span>
    <span class="n">Grid</span><span class="p">.</span><span class="n">SetColumn</span><span class="p">(</span><span class="n">tc</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>

    <span class="n">_Grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tc</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">propertyInspectorView</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">PropertyInspectorView</span><span class="p">;</span>

    <span class="n">Grid</span><span class="p">.</span><span class="n">SetColumn</span><span class="p">(</span><span class="n">propertyInspectorView</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
    <span class="n">_Grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">propertyInspectorView</span><span class="p">);</span>

    <span class="n">DataContext</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">static</span> <span class="n">ToolboxControl</span> <span class="nf">GetToolboxControl</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Create the ToolBoxControl.</span>
    <span class="kt">var</span> <span class="n">ctrl</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxControl</span><span class="p">();</span>

    <span class="c1">// Create a category.</span>
    <span class="kt">var</span> <span class="n">category</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxCategory</span><span class="p">(</span><span class="s">&quot;category1&quot;</span><span class="p">);</span>

    <span class="c1">// Create Toolbox items.</span>
    <span class="kt">var</span> <span class="n">tool1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Assign</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">tool2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Sequence</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">tool3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">WriteLine</span><span class="p">));</span>

    <span class="c1">// Add the Toolbox items to the category.</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool1</span><span class="p">);</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool2</span><span class="p">);</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool3</span><span class="p">);</span>

    <span class="c1">// Add the category to the ToolBox control.</span>
    <span class="n">ctrl</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">category</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">ctrl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> <h3>Executing a workflow:</h3> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">_designer</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
<span class="kt">string</span> <span class="n">workflow</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">encoding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ASCIIEncoding</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">encoding</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">workflow</span><span class="p">);</span>

<span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">(</span><span class="n">bytes</span><span class="p">))</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">activity</span> <span class="p">=</span> <span class="n">ActivityXamlServices</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">invoker</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkflowInvoker</span><span class="p">(</span><span class="n">activity</span><span class="p">);</span>
    <span class="n">invoker</span><span class="p">.</span><span class="n">Invoke</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <h3>Result:</h3> <p><a href="//cdn.thuriot.be/images/WFinWPF/Result.png"><img src="//cdn.thuriot.be/images/WFinWPF/Result.png" alt="WPF View Result"></a></p> ]]></content:encoded> </item> <item> <title><![CDATA[NuGet Guidance]]></title> <description><![CDATA[Sometimes a NuGet package can contain complex install logic. When this is the case, it can be a real hassle for a C# programmer to write all the code in powershell. ]]></description> <link>//steven.thuriot.be/nuget-guidance</link> <guid isPermaLink="true">//steven.thuriot.be/nuget-guidance</guid> <pubDate>2012-04-07T17:22:00+00:00</pubDate> <content:encoded><![CDATA[<p>Sometimes a NuGet package can contain complex install logic. When this is the case, it can be a real hassle for a C# programmer to write all the code in powershell. </p> <p>This project is a hoster for any &quot;recipe&quot; you include in your nuget package. Using MEF, the recipes will run inside this hoster project.</p> <p>For your convenience, all you have to do is inherit BaseRecipe when creating new recipes.</p> <p>Sample usage:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">NuGetGuidance.Domain</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Recipe</span> <span class="p">:</span> <span class="n">BaseRecipe</span> 
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Execute</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">Prompt</span><span class="p">(</span><span class="s">&quot;Server URI&quot;</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>
        <span class="n">Log</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&quot;Received input: {0}&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">project</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadAllText</span><span class="p">(</span><span class="n">Project</span><span class="p">.</span><span class="n">FullName</span><span class="p">);</span>

        <span class="c1">//Do stuff  </span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> </channel> </rss>