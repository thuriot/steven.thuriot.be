<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; Steven Thuriot]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/author/steven/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[Secure Webhooks]]></title> <description><![CDATA[Security is always a tricky one. Especially when it comes to webhooks, it can be difficult to make sure that the payload being received is a valid one. For some API&#39;s, a service-to-service token can easily be set up, but when dealing with public api&#39;s, it&#39;s not always that simple. Dealing with this issue, I had a quick glance at how GitHub solves this issue and it&#39;s quite ingenious. They basically compute a Hash-based Message Authentication Code (HMAC) by using the SHA256 hash function for each payload they&#39;re sending, using a common secret. To validate the payload, you just calculate the same HMAC using your common secret. If it matches, the payload is valid! If not, ignore and return an error code from your api. Doing this is actually pretty simple. First, let&#39;s send out our own payload from our API: ```csharp //GitHub&#39;s signature name, feel free to use your own! const string HookSignatureHeader=&quot;X-Hub-Signature-256&quot;; string payload=SerializeToJson(body); byte[] payloadBytes=Encoding.UTF8.GetBytes(payload); var headerValue=CreateHeaderValue(secret, payloadBytes); var content=new StringContent(payload, Encoding.UTF8, &quot;application/json&quot;); content.Headers.Add(HookSignatureHeader, headerValue); ``` Additionally, just as usefull is to add some metadata in the headers: ```csharp content.Headers.Add(&quot;X-Hook-Event&quot;, &quot;MyWebHookEventType&quot;); ``` This way, the consumers of your API can just skip the validation/deserialization/... of your payload when they&#39;re not interested in that specific event. Validation would work in a very similar way: ```csharp //Optionally check &quot;X-Hook-Event&quot; header for starters to see if we&#39;re even interested in this event at all. if (!Request.Headers.TryGetValue(headerName, out var values)) { return Unauthorized(); } var signature=values.ToString(); //Prefixing makes for an additional cheap check const string SignaturePrefix=&quot;sha256=&quot;; if (signature?.StartsWith(SignaturePrefix, StringComparison.OrdinalIgnoreCase) != true) { return Unauthorized(); } using var ms=new MemoryStream(); await Request.Body.CopyToAsync(ms); //Or BodyReader if you&#39;re not in netstandard / Abstractions. var payload=ms.ToArray(); var validationSignature=CreateHeaderValue(secret, payload); if (!StringComparer.OrdinalIgnoreCase.Equals(signature, validationSignature)) { return Unauthorized(); } //Payload is valid, deserialize and handle... var body=Encoding.UTF8.GetString(payload); var payloadEntity=DeserializeFromJson(body); ``` Since we already read the full body stream here, you don&#39;t have to declare a `[FromBody]` attribute on your API to avoid the payload being deserialized early. Not only can you not validate the deserialized payload (your serializer settings might differ resulting in a different HMAC), this provides some additional performance optimization since invalid payloads and irrelevant headers won&#39;t be deserialized or read at all! Calculating the actual header is only a few lines in newer .NET versions: ```csharp private static string CalculateSignature(string secret, byte[] payloadBytes) { byte[] secretBytes=Encoding.ASCII.GetBytes(secret); using var sha=new HMACSHA256(secretBytes); byte[] hash=sha.ComputeHash(payloadBytes); return SignaturePrefix + Convert.ToHexString(hash); } ``` Or In case you&#39;re writing this in netstandard, which doesn&#39;t have the `Convert.ToHexString` call yet: ```csharp private static string CalculateSignature(string secret, byte[] payloadBytes) { byte[] secretBytes=Encoding.ASCII.GetBytes(secret); using var sha=new HMACSHA256(secretBytes); byte[] hash=sha.ComputeHash(payloadBytes); var builder=new StringBuilder((hash.Length * 2) + SignaturePrefix.Length); builder.Append(SignaturePrefix); for (int i=0; i &lt; hash.Length; i++) { builder.AppendFormat(&quot;{0:X2}&quot;, hash[i]); } return builder.ToString(); } ``` A sample GitHub repo for this can be found [here](https://github.com/StevenThuriot/SecureWebhooks). Happy validating! ]]></description> <link>//steven.thuriot.be/secure-webhooks</link> <guid isPermaLink="true">//steven.thuriot.be/secure-webhooks</guid> <pubDate>2022-01-24T19:12:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/hash.jpg" medium="image"/> <content:encoded><![CDATA[<p>Security is always a tricky one. Especially when it comes to webhooks, it can be difficult to make sure that the payload being received is a valid one. For some API&#39;s, a service-to-service token can easily be set up, but when dealing with public api&#39;s, it&#39;s not always that simple.</p> <p>Dealing with this issue, I had a quick glance at how GitHub solves this issue and it&#39;s quite ingenious. They basically compute a Hash-based Message Authentication Code (HMAC) by using the SHA256 hash function for each payload they&#39;re sending, using a common secret. To validate the payload, you just calculate the same HMAC using your common secret. If it matches, the payload is valid! If not, ignore and return an error code from your api.</p> <p>Doing this is actually pretty simple. First, let&#39;s send out our own payload from our API:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">//GitHub&#39;s signature name, feel free to use your own!</span>
<span class="k">const</span> <span class="kt">string</span> <span class="n">HookSignatureHeader</span> <span class="p">=</span> <span class="s">&quot;X-Hub-Signature-256&quot;</span><span class="p">;</span>

<span class="kt">string</span> <span class="n">payload</span> <span class="p">=</span> <span class="n">SerializeToJson</span><span class="p">(</span><span class="n">body</span><span class="p">);</span>
<span class="kt">byte</span><span class="p">[]</span> <span class="n">payloadBytes</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">payload</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">headerValue</span> <span class="p">=</span> <span class="n">CreateHeaderValue</span><span class="p">(</span><span class="n">secret</span><span class="p">,</span> <span class="n">payloadBytes</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringContent</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">);</span>
<span class="n">content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">HookSignatureHeader</span><span class="p">,</span> <span class="n">headerValue</span><span class="p">);</span>
</code></pre></div> <p>Additionally, just as usefull is to add some metadata in the headers:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">content</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;X-Hook-Event&quot;</span><span class="p">,</span> <span class="s">&quot;MyWebHookEventType&quot;</span><span class="p">);</span>
</code></pre></div> <p>This way, the consumers of your API can just skip the validation/deserialization/... of your payload when they&#39;re not interested in that specific event.</p> <p>Validation would work in a very similar way:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">//Optionally check &quot;X-Hook-Event&quot; header for starters to see if we&#39;re even interested in this event at all.</span>

<span class="k">if</span> <span class="p">(!</span><span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">headerName</span><span class="p">,</span> <span class="k">out</span> <span class="kt">var</span> <span class="n">values</span><span class="p">))</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">Unauthorized</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">var</span> <span class="n">signature</span> <span class="p">=</span> <span class="n">values</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>

<span class="c1">//Prefixing makes for an additional cheap check</span>
<span class="k">const</span> <span class="kt">string</span> <span class="n">SignaturePrefix</span> <span class="p">=</span> <span class="s">&quot;sha256=&quot;</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">signature</span><span class="p">?.</span><span class="n">StartsWith</span><span class="p">(</span><span class="n">SignaturePrefix</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">)</span> <span class="p">!=</span> <span class="k">true</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">Unauthorized</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">using</span> <span class="nn">var</span> <span class="n">ms</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">();</span>
<span class="k">await</span> <span class="n">Request</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">CopyToAsync</span><span class="p">(</span><span class="n">ms</span><span class="p">);</span> <span class="c1">//Or BodyReader if you&#39;re not in netstandard / Abstractions.</span>

<span class="kt">var</span> <span class="n">payload</span> <span class="p">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">validationSignature</span> <span class="p">=</span> <span class="n">CreateHeaderValue</span><span class="p">(</span><span class="n">secret</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(!</span><span class="n">StringComparer</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">signature</span><span class="p">,</span> <span class="n">validationSignature</span><span class="p">))</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">Unauthorized</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//Payload is valid, deserialize and handle...</span>
<span class="kt">var</span> <span class="n">body</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">payload</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">payloadEntity</span> <span class="p">=</span> <span class="n">DeserializeFromJson</span><span class="p">(</span><span class="n">body</span><span class="p">);</span>
</code></pre></div> <p>Since we already read the full body stream here, you don&#39;t have to declare a <code>[FromBody]</code> attribute on your API to avoid the payload being deserialized early. Not only can you not validate the deserialized payload (your serializer settings might differ resulting in a different HMAC), this provides some additional performance optimization since invalid payloads and irrelevant headers won&#39;t be deserialized or read at all!</p> <p>Calculating the actual header is only a few lines in newer .NET versions:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">CalculateSignature</span><span class="p">(</span><span class="kt">string</span> <span class="n">secret</span><span class="p">,</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">payloadBytes</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">secretBytes</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">secret</span><span class="p">);</span>
    <span class="k">using</span> <span class="nn">var</span> <span class="n">sha</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HMACSHA256</span><span class="p">(</span><span class="n">secretBytes</span><span class="p">);</span>

    <span class="kt">byte</span><span class="p">[]</span> <span class="n">hash</span> <span class="p">=</span> <span class="n">sha</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="n">payloadBytes</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">SignaturePrefix</span> <span class="p">+</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToHexString</span><span class="p">(</span><span class="n">hash</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <p>Or In case you&#39;re writing this in netstandard, which doesn&#39;t have the <code>Convert.ToHexString</code> call yet:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">CalculateSignature</span><span class="p">(</span><span class="kt">string</span> <span class="n">secret</span><span class="p">,</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">payloadBytes</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">secretBytes</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">secret</span><span class="p">);</span>
    <span class="k">using</span> <span class="nn">var</span> <span class="n">sha</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HMACSHA256</span><span class="p">(</span><span class="n">secretBytes</span><span class="p">);</span>

    <span class="kt">byte</span><span class="p">[]</span> <span class="n">hash</span> <span class="p">=</span> <span class="n">sha</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="n">payloadBytes</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">((</span><span class="n">hash</span><span class="p">.</span><span class="n">Length</span> <span class="p">*</span> <span class="m">2</span><span class="p">)</span> <span class="p">+</span> <span class="n">SignaturePrefix</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

    <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">SignaturePrefix</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">hash</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">AppendFormat</span><span class="p">(</span><span class="s">&quot;{0:X2}&quot;</span><span class="p">,</span> <span class="n">hash</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <p>A sample GitHub repo for this can be found <a href="https://github.com/StevenThuriot/SecureWebhooks">here</a>. Happy validating!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Daily Tracing]]></title> <description><![CDATA[No doubt about it. Tracing is very important when working on a project. Not only will it make tracking down bugs easier, it will also make it a lot easier to get some numbers for general usage, timings, etc. On a project I&#39;m currently working on, it&#39;s very interesting to have a lot of tracing. And I do mean `a lot`! The project is quite large and the logic is incredibly complex (sadly, by its very nature). Log files were growing fast, faster than we could manage. However, at any given time, we&#39;d only be interested in traces from the last three days, tops. I created a `TraceListener` that allows you to trace each day to an individual file. It will concatenate the date to the given file name. As soon as it notices we started a new day, it will create a new file and start writing to that one instead. At the same time, it will clean up any files older than three days, as those are not relevant to us anymore. The number of days it should keep, as well as the formatting of the file&#39;s title can easily be adjusted in code. ```csharp using System; using System.Diagnostics; using System.IO; using System.Linq; using System.Reflection; public class DailyTraceListener : TraceListener { private readonly string _logLocation; private StreamWriter _writer; private DateTime _today; public DailyTraceListener(string name) { _logLocation=name; } private TextWriter EnsureWriter() { if (_today == DateTime.Today) return _writer; if (_writer != null) _writer.Dispose(); _today=DateTime.Today; var directoryName=Path.GetDirectoryName(_logLocation); if (string.IsNullOrEmpty(directoryName)) directoryName=AppDomain.CurrentDomain.BaseDirectory; var fileNameWithoutExtension=Path.GetFileNameWithoutExtension(_logLocation); var extension=Path.GetExtension(_logLocation); var fileName=fileNameWithoutExtension + &quot;_&quot; + _today.ToString(&quot;yyyyMMdd&quot;) + extension; var file=Path.Combine(directoryName, fileName); _writer=new StreamWriter(file, true); //Keep the last 3 days, delete the rest, but keep at least 3 files, even if they are older const int magicNumber=3; var oldFiles=Directory.GetFiles(directoryName, fileNameWithoutExtension + &quot;*&quot; + extension) .Select(x =&gt; new { Path=x, LastWrite=File.GetLastWriteTime(x) }) .OrderByDescending(x =&gt; x.LastWrite) .ToArray(); if (oldFiles.Length &gt; magicNumber) { var fewDaysAgo=_today.AddDays(-magicNumber); var olderThanAFewDays=oldFiles.Where(x =&gt; x.LastWrite &lt; fewDaysAgo).ToArray(); var skipAmount=Math.Max(0, magicNumber - (oldFiles.Length - olderThanAFewDays.Length)); foreach (var oldFile in olderThanAFewDays.Skip(skipAmount).Select(x =&gt; x.Path)) try { File.Delete(oldFile); } catch { /* ignore */ } } return _writer; } public override void Write(string message) { EnsureWriter().Write(message); } public override void WriteLine(string message) { EnsureWriter().WriteLine(message); } public override void Flush() { if (_writer != null) lock (this) if (_writer != null) _writer.Flush(); } protected override void Dispose(bool disposing) { if (disposing) if (_writer != null) _writer.Dispose(); } } ``` ]]></description> <link>//steven.thuriot.be/daily-tracing</link> <guid isPermaLink="true">//steven.thuriot.be/daily-tracing</guid> <pubDate>2015-10-14T20:06:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/library.jpg" medium="image"/> <content:encoded><![CDATA[<p>No doubt about it. Tracing is very important when working on a project.</p> <p>Not only will it make tracking down bugs easier, it will also make it a lot easier to get some numbers for general usage, timings, etc.</p> <p>On a project I&#39;m currently working on, it&#39;s very interesting to have a lot of tracing. And I do mean <code>a lot</code>! The project is quite large and the logic is incredibly complex (sadly, by its very nature). Log files were growing fast, faster than we could manage. However, at any given time, we&#39;d only be interested in traces from the last three days, tops.</p> <p>I created a <code>TraceListener</code> that allows you to trace each day to an individual file. It will concatenate the date to the given file name. As soon as it notices we started a new day, it will create a new file and start writing to that one instead. At the same time, it will clean up any files older than three days, as those are not relevant to us anymore. The number of days it should keep, as well as the formatting of the file&#39;s title can easily be adjusted in code.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">DailyTraceListener</span> <span class="p">:</span> <span class="n">TraceListener</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_logLocation</span><span class="p">;</span>

    <span class="k">private</span> <span class="n">StreamWriter</span> <span class="n">_writer</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">DateTime</span> <span class="n">_today</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">DailyTraceListener</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_logLocation</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">TextWriter</span> <span class="nf">EnsureWriter</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_today</span> <span class="p">==</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">)</span> <span class="k">return</span> <span class="n">_writer</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">_writer</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>

        <span class="n">_today</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">directoryName</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">GetDirectoryName</span><span class="p">(</span><span class="n">_logLocation</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">directoryName</span><span class="p">))</span>
            <span class="n">directoryName</span> <span class="p">=</span> <span class="n">AppDomain</span><span class="p">.</span><span class="n">CurrentDomain</span><span class="p">.</span><span class="n">BaseDirectory</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">fileNameWithoutExtension</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">GetFileNameWithoutExtension</span><span class="p">(</span><span class="n">_logLocation</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">extension</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">_logLocation</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">fileName</span> <span class="p">=</span> <span class="n">fileNameWithoutExtension</span> <span class="p">+</span> <span class="s">&quot;_&quot;</span> <span class="p">+</span> <span class="n">_today</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&quot;yyyyMMdd&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="n">extension</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">file</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span><span class="n">directoryName</span><span class="p">,</span> <span class="n">fileName</span><span class="p">);</span>

        <span class="n">_writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>


        <span class="c1">//Keep the last 3 days, delete the rest, but keep at least 3 files, even if they are older</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">magicNumber</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
        <span class="kt">var</span> <span class="n">oldFiles</span> <span class="p">=</span> <span class="n">Directory</span><span class="p">.</span><span class="n">GetFiles</span><span class="p">(</span><span class="n">directoryName</span><span class="p">,</span> <span class="n">fileNameWithoutExtension</span> <span class="p">+</span> <span class="s">&quot;*&quot;</span> <span class="p">+</span> <span class="n">extension</span><span class="p">)</span>
                                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Path</span> <span class="p">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">LastWrite</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">GetLastWriteTime</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">})</span>
                                <span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">LastWrite</span><span class="p">)</span>
                                <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">oldFiles</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="n">magicNumber</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">fewDaysAgo</span> <span class="p">=</span> <span class="n">_today</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(-</span><span class="n">magicNumber</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">olderThanAFewDays</span> <span class="p">=</span> <span class="n">oldFiles</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">LastWrite</span> <span class="p">&lt;</span> <span class="n">fewDaysAgo</span><span class="p">).</span><span class="n">ToArray</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">skipAmount</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">magicNumber</span> <span class="p">-</span> <span class="p">(</span><span class="n">oldFiles</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">olderThanAFewDays</span><span class="p">.</span><span class="n">Length</span><span class="p">));</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">oldFile</span> <span class="k">in</span> <span class="n">olderThanAFewDays</span><span class="p">.</span><span class="n">Skip</span><span class="p">(</span><span class="n">skipAmount</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Path</span><span class="p">))</span>
                <span class="k">try</span> <span class="p">{</span> <span class="n">File</span><span class="p">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">oldFile</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span> <span class="cm">/* ignore */</span> <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">_writer</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Write</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">EnsureWriter</span><span class="p">().</span><span class="n">Write</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WriteLine</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">EnsureWriter</span><span class="p">().</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Flush</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">lock</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                    <span class="n">_writer</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">(</span><span class="kt">bool</span> <span class="n">disposing</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">disposing</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="n">_writer</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Playing with Sets]]></title> <description><![CDATA[The [`Distinct`](https://msdn.microsoft.com/en-us/library/vstudio/bb348436.aspx) method is one of the really useful methods in the `System.Linq` namespace. Internally, it&#39;s really simple, too. It will just iterate your collection and add them all to a [`HashSet`](https://msdn.microsoft.com/en-us/library/bb359438.aspx). The set will make sure that each item is only added once on its own. Instead of adding all items and returning just the set, `Distinct` will actually create an iterator that will return the item if successfully added. While this is a good idea since the actual execution is deferred, at times it is nice to just create the set and keep working with it, instead. While this is simple enough as is, I created an extension method anyway. ```csharp public static HashSet&lt;T&gt; ToSet&lt;T&gt;(this IEnumerable&lt;T&gt; source) { return new HashSet&lt;T&gt;(source); } ``` It&#39;s a bit too simple to post, really. One could argue it&#39;s too simple to exist, even. And frankly, it is. So we&#39;ll go a step further, and allow creating the set based on a key. ```csharp public static HashSet&lt;T&gt; ToSet&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, TKey&gt; keySelector) { return new HashSet&lt;T&gt;(source, keySelector.AsComparer()); } ``` Continuing the `LINQ` way of thinking, it would be nice to just pass a `Func` along to the method to create the key. However, `HashSet` doesn&#39;t accept this and wants a comparer instead. So let&#39;s create a comparer that will wrap around our `Func`! ```csharp public static class FunctorComparerExtensions { public static FunctorComparer&lt;T&gt; AsComparer&lt;T, TKey&gt;(this Func&lt;T, TKey&gt; keySelector) { var comparer=Comparer&lt;TKey&gt;.Default; Comparison&lt;T&gt; comparison=(x, y) =&gt; comparer.Compare(keySelector(x), keySelector(y)); return comparison.AsComparer(); } public static FunctorComparer&lt;T&gt; AsComparer&lt;T&gt;(this Comparison&lt;T&gt; comparison) { return new FunctorComparer&lt;T&gt;(comparison); } } sealed class FunctorComparer&lt;T&gt; : IEqualityComparer&lt;T&gt;, IComparer&lt;T&gt; { readonly Comparison&lt;T&gt; _comparison; public FunctorComparer(Comparison&lt;T&gt; comparison) { _comparison=comparison; } public int Compare(T x, T y) { return _comparison(x, y); } public bool Equals(T x, T y) { return Compare(x, y) == 0; } public int GetHashCode(T obj) { return obj.GetHashCode(); } } ``` Now our key will be able to be used for both comparisons as equality. Usage is quite simple! ```csharp var set=list.Where(x =&gt; x.SomeCondition == true).ToSet(x =&gt; x.KeyProperty); ``` ]]></description> <link>//steven.thuriot.be/playing-with-sets</link> <guid isPermaLink="true">//steven.thuriot.be/playing-with-sets</guid> <pubDate>2015-10-08T17:29:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/color-paint-cans.jpg" medium="image"/> <content:encoded><![CDATA[<p>The <a href="https://msdn.microsoft.com/en-us/library/vstudio/bb348436.aspx"><code>Distinct</code></a> method is one of the really useful methods in the <code>System.Linq</code> namespace. Internally, it&#39;s really simple, too. It will just iterate your collection and add them all to a <a href="https://msdn.microsoft.com/en-us/library/bb359438.aspx"><code>HashSet</code></a>. The set will make sure that each item is only added once on its own.</p> <p>Instead of adding all items and returning just the set, <code>Distinct</code> will actually create an iterator that will return the item if successfully added. While this is a good idea since the actual execution is deferred, at times it is nice to just create the set and keep working with it, instead.</p> <p>While this is simple enough as is, I created an extension method anyway.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">ToSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">source</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <p>It&#39;s a bit too simple to post, really. One could argue it&#39;s too simple to exist, even. And frankly, it is. So we&#39;ll go a step further, and allow creating the set based on a key.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">ToSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">HashSet</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">source</span><span class="p">,</span> <span class="n">keySelector</span><span class="p">.</span><span class="n">AsComparer</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div> <p>Continuing the <code>LINQ</code> way of thinking, it would be nice to just pass a <code>Func</code> along to the method to create the key. However, <code>HashSet</code> doesn&#39;t accept this and wants a comparer instead. So let&#39;s create a comparer that will wrap around our <code>Func</code>!</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">FunctorComparerExtensions</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="k">static</span> <span class="n">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">AsComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="n">keySelector</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="kt">var</span> <span class="n">comparer</span> <span class="p">=</span> <span class="n">Comparer</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;.</span><span class="n">Default</span><span class="p">;</span>
       <span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">comparison</span> <span class="p">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">comparer</span><span class="p">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">keySelector</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">keySelector</span><span class="p">(</span><span class="n">y</span><span class="p">));</span>
       <span class="k">return</span> <span class="n">comparison</span><span class="p">.</span><span class="n">AsComparer</span><span class="p">();</span>
   <span class="p">}</span>

   <span class="k">public</span> <span class="k">static</span> <span class="n">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">AsComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">comparison</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="k">return</span> <span class="k">new</span> <span class="n">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">comparison</span><span class="p">);</span>
   <span class="p">}</span>

<span class="p">}</span>

<span class="k">sealed</span> <span class="k">class</span> <span class="nc">FunctorComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEqualityComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span> <span class="n">IComparer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">readonly</span> <span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">_comparison</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">FunctorComparer</span><span class="p">(</span><span class="n">Comparison</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">comparison</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_comparison</span> <span class="p">=</span> <span class="n">comparison</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="nf">Compare</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">_comparison</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Compare</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">(</span><span class="n">T</span> <span class="n">obj</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Now our key will be able to be used for both comparisons as equality.</p> <p>Usage is quite simple!</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="k">set</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SomeCondition</span> <span class="p">==</span> <span class="k">true</span><span class="p">).</span><span class="n">ToSet</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">KeyProperty</span><span class="p">);</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Colored Console TraceListener]]></title> <description><![CDATA[Writing to the `Console` can provide a lot of useful information while developing. While this can easily be done by using the static `Console` class, I prefer using the `Trace` class instead. Doing it this way, our code is easily reusable for other kinds of logging and provides the ability to add additional metadata, which can also be used to filter the messages (e.g. the type). `System.Diagnostics` provides the `ConsoleTraceListener` class to combine these two. But I like to spice it up a bit and color-code the different types of events. This can easily be done by inheriting the provided TraceListener and overriding the `ConsoleColor` before writing our events. ```csharp public class ColorConsoleTraceListener : ConsoleTraceListener { static readonly IReadOnlyDictionary&lt;TraceEventType, ConsoleColor&gt; _colors; static ColorConsoleTraceListener() { _colors=new Dictionary&lt;TraceEventType, ConsoleColor&gt; { {TraceEventType.Verbose, ConsoleColor.DarkGray}, {TraceEventType.Information, ConsoleColor.Gray}, {TraceEventType.Warning, ConsoleColor.Yellow}, {TraceEventType.Error, ConsoleColor.DarkRed}, {TraceEventType.Critical, ConsoleColor.Red}, {TraceEventType.Start, ConsoleColor.DarkCyan}, {TraceEventType.Stop, ConsoleColor.DarkGreen} }; } readonly bool _prependEventType; readonly bool _prependSource; public ColorConsoleTraceListener(bool prependEventType=true, bool prependSource=true) { _prependEventType=prependEventType; _prependSource=prependSource; } public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message) { if (Filter != null &amp;&amp; !Filter.ShouldTrace(eventCache, source, eventType, id, message, null, null, null)) return; Trace(source, eventType, message); } public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, params object[] args) { if (Filter != null &amp;&amp; !Filter.ShouldTrace(eventCache, source, eventType, id, format, args, null, null)) return; Trace(source, eventType, string.Format(CultureInfo.InvariantCulture, format, args)); } void Trace(string source, TraceEventType eventType, string message) { ConsoleColor? previousColor; ConsoleColor color; if (_colors.TryGetValue(eventType, out color)) { previousColor=Console.ForegroundColor; Console.ForegroundColor = color; } else { previousColor=null; } if (_prependSource) Write(source + &quot; — &quot;); if (_prependEventType) Write(eventType + &quot; — &quot;); WriteLine(message); if (previousColor.HasValue) { Console.ForegroundColor = previousColor.Value; } } } ``` ]]></description> <link>//steven.thuriot.be/colored-console-tracelistener</link> <guid isPermaLink="true">//steven.thuriot.be/colored-console-tracelistener</guid> <pubDate>2015-08-31T18:38:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/ascii.png" medium="image"/> <content:encoded><![CDATA[<p>Writing to the <code>Console</code> can provide a lot of useful information while developing. While this can easily be done by using the static <code>Console</code> class, I prefer using the <code>Trace</code> class instead.</p> <p>Doing it this way, our code is easily reusable for other kinds of logging and provides the ability to add additional metadata, which can also be used to filter the messages (e.g. the type).</p> <p><code>System.Diagnostics</code> provides the <code>ConsoleTraceListener</code> class to combine these two. But I like to spice it up a bit and color-code the different types of events.</p> <p>This can easily be done by inheriting the provided TraceListener and overriding the <code>ConsoleColor</code> before writing our events.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ColorConsoleTraceListener</span> <span class="p">:</span> <span class="n">ConsoleTraceListener</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="n">IReadOnlyDictionary</span><span class="p">&lt;</span><span class="n">TraceEventType</span><span class="p">,</span> <span class="n">ConsoleColor</span><span class="p">&gt;</span> <span class="n">_colors</span><span class="p">;</span>
    <span class="k">static</span> <span class="nf">ColorConsoleTraceListener</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_colors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">TraceEventType</span><span class="p">,</span> <span class="n">ConsoleColor</span><span class="p">&gt;</span>
                <span class="p">{</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Verbose</span><span class="p">,</span>      <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Information</span><span class="p">,</span>  <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Gray</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Warning</span><span class="p">,</span>      <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Yellow</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Error</span><span class="p">,</span>        <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkRed</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Critical</span><span class="p">,</span>     <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">Red</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Start</span><span class="p">,</span>        <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkCyan</span><span class="p">},</span>
                    <span class="p">{</span><span class="n">TraceEventType</span><span class="p">.</span><span class="n">Stop</span><span class="p">,</span>         <span class="n">ConsoleColor</span><span class="p">.</span><span class="n">DarkGreen</span><span class="p">}</span>
                <span class="p">};</span>
    <span class="p">}</span>

    <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">_prependEventType</span><span class="p">;</span>
    <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">_prependSource</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">ColorConsoleTraceListener</span><span class="p">(</span><span class="kt">bool</span> <span class="n">prependEventType</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">prependSource</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_prependEventType</span> <span class="p">=</span> <span class="n">prependEventType</span><span class="p">;</span>
        <span class="n">_prependSource</span> <span class="p">=</span> <span class="n">prependSource</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">TraceEvent</span><span class="p">(</span><span class="n">TraceEventCache</span> <span class="n">eventCache</span><span class="p">,</span> <span class="kt">string</span> <span class="n">source</span><span class="p">,</span> <span class="n">TraceEventType</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Filter</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">Filter</span><span class="p">.</span><span class="n">ShouldTrace</span><span class="p">(</span><span class="n">eventCache</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>

        <span class="n">Trace</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">TraceEvent</span><span class="p">(</span><span class="n">TraceEventCache</span> <span class="n">eventCache</span><span class="p">,</span> <span class="kt">string</span> <span class="n">source</span><span class="p">,</span> <span class="n">TraceEventType</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">format</span><span class="p">,</span> <span class="k">params</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Filter</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">Filter</span><span class="p">.</span><span class="n">ShouldTrace</span><span class="p">(</span><span class="n">eventCache</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">format</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>


        <span class="n">Trace</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">InvariantCulture</span><span class="p">,</span> <span class="n">format</span><span class="p">,</span> <span class="n">args</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">Trace</span><span class="p">(</span><span class="kt">string</span> <span class="n">source</span><span class="p">,</span> <span class="n">TraceEventType</span> <span class="n">eventType</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ConsoleColor</span><span class="p">?</span> <span class="n">previousColor</span><span class="p">;</span>
        <span class="n">ConsoleColor</span> <span class="n">color</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_colors</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">eventType</span><span class="p">,</span> <span class="k">out</span> <span class="n">color</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">previousColor</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span><span class="p">;</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="n">color</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">previousColor</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_prependSource</span><span class="p">)</span> <span class="n">Write</span><span class="p">(</span><span class="n">source</span> <span class="p">+</span> <span class="s">&quot; — &quot;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_prependEventType</span><span class="p">)</span> <span class="n">Write</span><span class="p">(</span><span class="n">eventType</span> <span class="p">+</span> <span class="s">&quot; — &quot;</span><span class="p">);</span>
        <span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">previousColor</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">ForegroundColor</span> <span class="p">=</span> <span class="n">previousColor</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[We did it!]]></title> <description><![CDATA[After one year of work, we&#39;ve finally did it! Achievement unlocked, green bar of marvel! ![Streak](//cdn.thuriot.be/images/Streak/Streak.PNG) ]]></description> <link>//steven.thuriot.be/we-did-it</link> <guid isPermaLink="true">//steven.thuriot.be/we-did-it</guid> <pubDate>2015-08-25T12:07:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/code.jpg" medium="image"/> <content:encoded><![CDATA[<p>After one year of work, we&#39;ve finally did it!</p> <p>Achievement unlocked, green bar of marvel!</p> <p><img src="//cdn.thuriot.be/images/Streak/Streak.PNG" alt="Streak"></p> ]]></content:encoded> </item> <item> <title><![CDATA[Secure Strings]]></title> <description><![CDATA[A lot of programs use some form of passwords. These are usually kept in memory. The issue here is that a program&#39;s used memory is very easy to read out and your unsecured password will be there in plain sight. For this specific reason, the [`SecureString`](https://msdn.microsoft.com/en-us/library/system.security.securestring.aspx) (`System.Security`) class is available, which will keep your string encrypted in memory. Since this class does not have an apparent constructor that receives a `string`, people tend to create an empty `SecureString`, iterate their string and call `AppendChar` for each and every iteration. Not only is this a tedious process, the .NET framework will have to unprotect the value each time and protect it again after adding the `char`. The good news, though, is that this entire process is done in unmanaged memory. This whole process, however, can be done in a much easier way, by using `unsafe` code (tick the option to enable it in your project settings). This will enable you to create a char pointer (`char*`) to your string and pass it to the `SecureString` constructor as follows: ```csharp unsafe static class UnsafeExtensions { public static SecureString ToSecureString(this string password) { fixed (char* passwordChars=password) { var securePassword=new SecureString(passwordChars, password.Length); securePassword.MakeReadOnly(); return securePassword; } } } ``` Don&#39;t forget to mark it as read-only when you&#39;re done to prevent it from being modified. Getting your string back, is just as easy and can be done by calling `SecureStringToGlobalAllocUnicode`: ```csharp unsafe static class UnsafeExtensions { public static string ToUnsecureString(this SecureString securePassword) { IntPtr unmanagedString=IntPtr.Zero; try { unmanagedString=Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(unmanagedString); } finally { Marshal.ZeroFreeGlobalAllocUnicode(unmanagedString); } } } ``` One could, however, argue that you don&#39;t have control over how long that string will remain in your memory. Instead of working with a string, we could work with a byte array instead. This will be easy to clear from memory afterwards. We could go a step further and automate the process as follows: ```csharp unsafe static class UnsafeExtensions { [DllImport(&quot;msvcrt.dll&quot;, EntryPoint=&quot;memcpy&quot;, CallingConvention=CallingConvention.Cdecl, SetLastError=false)] static extern IntPtr memcpy(void* dest, void* src, int count); public static T Process&lt;T&gt;(this SecureString input, Func&lt;byte[], T&gt; process) { var ptr=IntPtr.Zero; byte[] bytes=null; try { ptr=Marshal.SecureStringToBSTR(input); bytes=new byte[input.Length * sizeof(char)]; fixed (void* b=bytes) memcpy(b, ptr.ToPointer(), bytes.Length); return process(bytes); } finally { if (bytes != null) bytes.Clear(); if (ptr != IntPtr.Zero) Marshal.ZeroFreeBSTR(ptr); } } ``` ]]></description> <link>//steven.thuriot.be/secure-strings</link> <guid isPermaLink="true">//steven.thuriot.be/secure-strings</guid> <pubDate>2015-08-23T18:59:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/security.jpg" medium="image"/> <content:encoded><![CDATA[<p>A lot of programs use some form of passwords. These are usually kept in memory. The issue here is that a program&#39;s used memory is very easy to read out and your unsecured password will be there in plain sight.</p> <p>For this specific reason, the <a href="https://msdn.microsoft.com/en-us/library/system.security.securestring.aspx"><code>SecureString</code></a> (<code>System.Security</code>) class is available, which will keep your string encrypted in memory.</p> <p>Since this class does not have an apparent constructor that receives a <code>string</code>, people tend to create an empty <code>SecureString</code>, iterate their string and call <code>AppendChar</code> for each and every iteration. Not only is this a tedious process, the .NET framework will have to unprotect the value each time and protect it again after adding the <code>char</code>. The good news, though, is that this entire process is done in unmanaged memory.</p> <p>This whole process, however, can be done in a much easier way, by using <code>unsafe</code> code (tick the option to enable it in your project settings). This will enable you to create a char pointer (<code>char*</code>) to your string and pass it to the <code>SecureString</code> constructor as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">SecureString</span> <span class="nf">ToSecureString</span><span class="p">(</span><span class="k">this</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">passwordChars</span> <span class="p">=</span> <span class="n">password</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">securePassword</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SecureString</span><span class="p">(</span><span class="n">passwordChars</span><span class="p">,</span> <span class="n">password</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
                <span class="n">securePassword</span><span class="p">.</span><span class="n">MakeReadOnly</span><span class="p">();</span>

                <span class="k">return</span> <span class="n">securePassword</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div> <p>Don&#39;t forget to mark it as read-only when you&#39;re done to prevent it from being modified.</p> <p>Getting your string back, is just as easy and can be done by calling <code>SecureStringToGlobalAllocUnicode</code>:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">ToUnsecureString</span><span class="p">(</span><span class="k">this</span> <span class="n">SecureString</span> <span class="n">securePassword</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IntPtr</span> <span class="n">unmanagedString</span> <span class="p">=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">;</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">unmanagedString</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">SecureStringToGlobalAllocUnicode</span><span class="p">(</span><span class="n">securePassword</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">PtrToStringUni</span><span class="p">(</span><span class="n">unmanagedString</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="n">Marshal</span><span class="p">.</span><span class="n">ZeroFreeGlobalAllocUnicode</span><span class="p">(</span><span class="n">unmanagedString</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div> <p>One could, however, argue that you don&#39;t have control over how long that string will remain in your memory. Instead of working with a string, we could work with a byte array instead. This will be easy to clear from memory afterwards.</p> <p>We could go a step further and automate the process as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">unsafe</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnsafeExtensions</span>
    <span class="p">{</span>
<span class="na">        [DllImport(&quot;msvcrt.dll&quot;, EntryPoint = &quot;memcpy&quot;, CallingConvention = CallingConvention.Cdecl, SetLastError = false)]</span>
        <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">memcpy</span><span class="p">(</span><span class="k">void</span><span class="p">*</span> <span class="n">dest</span><span class="p">,</span> <span class="k">void</span><span class="p">*</span> <span class="n">src</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">T</span> <span class="n">Process</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">SecureString</span> <span class="n">input</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">[],</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">process</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="kt">var</span> <span class="n">ptr</span> <span class="p">=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">;</span>
          <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

          <span class="k">try</span>
          <span class="p">{</span>
              <span class="n">ptr</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">SecureStringToBSTR</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>

              <span class="n">bytes</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">input</span><span class="p">.</span><span class="n">Length</span> <span class="p">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)];</span>
              <span class="k">fixed</span> <span class="p">(</span><span class="k">void</span><span class="p">*</span> <span class="n">b</span> <span class="p">=</span> <span class="n">bytes</span><span class="p">)</span>
                  <span class="n">memcpy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">ptr</span><span class="p">.</span><span class="n">ToPointer</span><span class="p">(),</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

              <span class="k">return</span> <span class="nf">process</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="k">finally</span>
          <span class="p">{</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">bytes</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                  <span class="n">bytes</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>

              <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span> <span class="p">!=</span> <span class="n">IntPtr</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">ZeroFreeBSTR</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
          <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Playing with Generic References: Hidden features of C#]]></title> <description><![CDATA[When writing generic classes, it&#39;s highly likely you&#39;ve gotten to the point (at least once) where you had to write a piece of type-specific code (wether due to third party or not) and you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action. Code smells aside, you&#39;ve probably bumped into a casting issue at this point. Imagine a generic class that holds some data. ```csharp public class ClassWithData&lt;T&gt; { T _value; // other stuff public byte[] GetBytes() { //Shit hits the fan if we want to stay in safe code... //and we&#39;ll do something like this: if (typeof(T) == typeof(int)) { return BitConverter.GetBytes((int)_value); } else if (typeof(T) == typeof(double)) //and so on ... } } ``` Of course, this example won&#39;t even compile. The compiler won&#39;t let you cast to the generic type, even though you&#39;ve verified it to be correct and in fact, the same! A cast which isn&#39;t really a cast in the first place. Usually, we solve this by boxing the generic value first, and thus tricking the compiler. ```csharp public class ClassWithData&lt;T&gt; { T _value; // other stuff public byte[] GetBytes() { if (typeof(T) == typeof(int)) { //Tricking the compiler! int value=(int)(object)_value; return BitConverter.GetBytes(value); } else if (typeof(T) == typeof(double)) //and so on ... } } ``` Bam! Code compiles, code works. Job done. Or is it? Not only are we tricking the compiler, we are also tricking ourselves... Doing this will box the generic value, moving it from the stack to the heap. This process is slow and should be avoided. It&#39;s a problem (given you want to keep your code this way in the first place) that is actually easily solved. We can circumvent this by using a few of C#&#39;s undocumented keywords: `__makeref` and `__refvalue`. `__makeref` will create a `TypeReference`, while `__refvalue` will cast the reference to the type you pass it. No boxing and unboxing involved! Implemented it would look like this: ```csharp public class ClassWithData&lt;T&gt; { T _value; // other stuff public byte[] GetBytes() { if (typeof(T) == typeof(int)) { var tr=__makeref(_value); int value=__refvalue(tr, int); //no typeof here..! return BitConverter.GetBytes(value); } else if (typeof(T) == typeof(double)) //and so on ... } } ``` I have noticed that it&#39;s rather picky with its casts, so be careful! For instance, if the type of `_value` is a `string`, and you&#39;re calling `__refvalue` with `object` as a type, it will throw an exception. Even though in normal code, that would work without any issues! This definitely needs to be properly unit-tested when used in your project. Enjoy, and don&#39;t forget to check back for more adventures later! ]]></description> <link>//steven.thuriot.be/generic-references</link> <guid isPermaLink="true">//steven.thuriot.be/generic-references</guid> <pubDate>2015-08-19T19:17:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/surprise.jpg" medium="image"/> <content:encoded><![CDATA[<p>When writing generic classes, it&#39;s highly likely you&#39;ve gotten to the point (at least once) where you had to write a piece of type-specific code (wether due to third party or not) and you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action.</p> <p>Code smells aside, you&#39;ve probably bumped into a casting issue at this point.</p> <p>Imagine a generic class that holds some data.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">//Shit hits the fan if we want to stay in safe code...</span>
    <span class="c1">//and we&#39;ll do something like this:</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">_value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Of course, this example won&#39;t even compile. The compiler won&#39;t let you cast to the generic type, even though you&#39;ve verified it to be correct and in fact, the same! A cast which isn&#39;t really a cast in the first place.</p> <p>Usually, we solve this by boxing the generic value first, and thus tricking the compiler.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="c1">//Tricking the compiler!</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="kt">object</span><span class="p">)</span><span class="n">_value</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Bam! Code compiles, code works. Job done. Or is it? Not only are we tricking the compiler, we are also tricking ourselves... Doing this will box the generic value, moving it from the stack to the heap. This process is slow and should be avoided.</p> <p>It&#39;s a problem (given you want to keep your code this way in the first place) that is actually easily solved. We can circumvent this by using a few of C#&#39;s undocumented keywords: <code>__makeref</code> and <code>__refvalue</code>.</p> <p><code>__makeref</code> will create a <code>TypeReference</code>, while <code>__refvalue</code> will cast the reference to the type you pass it. No boxing and unboxing involved!</p> <p>Implemented it would look like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="kt">var</span> <span class="n">tr</span> <span class="p">=</span> <span class="n">__makeref</span><span class="p">(</span><span class="n">_value</span><span class="p">);</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="n">__refvalue</span><span class="p">(</span><span class="n">tr</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="c1">//no typeof here..!</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>I have noticed that it&#39;s rather picky with its casts, so be careful! For instance, if the type of <code>_value</code> is a <code>string</code>, and you&#39;re calling <code>__refvalue</code> with <code>object</code> as a type, it will throw an exception. Even though in normal code, that would work without any issues!</p> <p>This definitely needs to be properly unit-tested when used in your project.</p> <p>Enjoy, and don&#39;t forget to check back for more adventures later!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Automating your wake up alarm using Tasker]]></title> <description><![CDATA[Setting your wake up alarm, you have two choices. Either you let it automatically wake you at a set time and let that alarm repeat, or you can do it manually which is a tedious and repetitive job. The choice seems obvious, just pick the first option! However, this can quickly turn out very annoying when you have a day off and forget shutting off the alarm. Having it wake you up at 6AM can easily turn your mood on what should be a fun day. Since this has happened to me a few times, I decided to tinker something together using [Tasker](https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm&amp;hl=en). This is an amazing Android app that allows you to automate anything, from Settings to SMS. I created a `Task` that sets the alarm on weekdays and let the task trigger at 5 minutes after midnight. Inside the task, I used a variable for hours and minutes. This way I can easily adjust them, if needed, in Taskers `var` window. They are named `%AlarmHour` and `%AlarmMinute`. You could also create tasks to set these variables for you, depending on other conditions. At this point, we&#39;ve built an alarm that mimics the behaviour of option #1, the automatic alarm. So what about our vacation days? To solve this issue, I added an extra condition to the task to check my calendar. I have the tendency to add an all day event in my calendar named `Vacation` when I have a day off. So having it check if there is a `Vacation` task in my calendar is exactly what I needed. Now the task will only run on weekdays I don&#39;t have a day off. Perfect! For your convenience, I exported the task. The generated xml, for those that want to import it, is as follows: ```xml &lt;TaskerData sr=&quot;&quot; dvi=&quot;1&quot; tv=&quot;4.7u1m&quot;&gt; &lt;Profile sr=&quot;prof7&quot; ve=&quot;2&quot;&gt; &lt;cdate&gt;1430336947272&lt;/cdate&gt; &lt;edate&gt;1433861797349&lt;/edate&gt; &lt;id&gt;7&lt;/id&gt; &lt;mid0&gt;6&lt;/mid0&gt; &lt;nme&gt;Set Alarm On Weekdays&lt;/nme&gt; &lt;Time sr=&quot;con0&quot;&gt; &lt;fh&gt;0&lt;/fh&gt; &lt;fm&gt;5&lt;/fm&gt; &lt;th&gt;0&lt;/th&gt; &lt;tm&gt;5&lt;/tm&gt; &lt;/Time&gt; &lt;State sr=&quot;con1&quot; ve=&quot;2&quot;&gt; &lt;code&gt;5&lt;/code&gt; &lt;pin&gt;true&lt;/pin&gt; &lt;Str sr=&quot;arg0&quot; ve=&quot;3&quot;&gt;Vacation&lt;/Str&gt; &lt;Str sr=&quot;arg1&quot; ve=&quot;3&quot; /&gt; &lt;Str sr=&quot;arg2&quot; ve=&quot;3&quot; /&gt; &lt;Int sr=&quot;arg3&quot; val=&quot;0&quot; /&gt; &lt;Str sr=&quot;arg4&quot; ve=&quot;3&quot; /&gt; &lt;/State&gt; &lt;Day sr=&quot;con2&quot;&gt; &lt;wday0&gt;4&lt;/wday0&gt; &lt;wday1&gt;6&lt;/wday1&gt; &lt;wday2&gt;5&lt;/wday2&gt; &lt;wday3&gt;3&lt;/wday3&gt; &lt;wday4&gt;2&lt;/wday4&gt; &lt;/Day&gt; &lt;/Profile&gt; &lt;Task sr=&quot;task6&quot;&gt; &lt;cdate&gt;1430336877555&lt;/cdate&gt; &lt;edate&gt;1433861797349&lt;/edate&gt; &lt;id&gt;6&lt;/id&gt; &lt;nme&gt;Set Alarm&lt;/nme&gt; &lt;pri&gt;10&lt;/pri&gt; &lt;Action sr=&quot;act0&quot; ve=&quot;7&quot;&gt; &lt;code&gt;566&lt;/code&gt; &lt;Int sr=&quot;arg0&quot;&gt; &lt;var&gt;%AlarmHour&lt;/var&gt; &lt;/Int&gt; &lt;Int sr=&quot;arg1&quot;&gt; &lt;var&gt;%AlarmMinute&lt;/var&gt; &lt;/Int&gt; &lt;Str sr=&quot;arg2&quot; ve=&quot;3&quot;&gt;Time for work!&lt;/Str&gt; &lt;Int sr=&quot;arg3&quot; val=&quot;0&quot; /&gt; &lt;/Action&gt; &lt;/Task&gt; &lt;/TaskerData&gt; ``` ]]></description> <link>//steven.thuriot.be/automating-your-wake-up-alarm-using-tasker</link> <guid isPermaLink="true">//steven.thuriot.be/automating-your-wake-up-alarm-using-tasker</guid> <pubDate>2015-07-12T09:22:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/Old-clock.jpg" medium="image"/> <content:encoded><![CDATA[<p>Setting your wake up alarm, you have two choices. Either you let it automatically wake you at a set time and let that alarm repeat, or you can do it manually which is a tedious and repetitive job. </p> <p>The choice seems obvious, just pick the first option! However, this can quickly turn out very annoying when you have a day off and forget shutting off the alarm. Having it wake you up at 6AM can easily turn your mood on what should be a fun day.</p> <p>Since this has happened to me a few times, I decided to tinker something together using <a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm&amp;hl=en">Tasker</a>. This is an amazing Android app that allows you to automate anything, from Settings to SMS.</p> <p>I created a <code>Task</code> that sets the alarm on weekdays and let the task trigger at 5 minutes after midnight. Inside the task, I used a variable for hours and minutes. This way I can easily adjust them, if needed, in Taskers <code>var</code> window. They are named <code>%AlarmHour</code> and <code>%AlarmMinute</code>. You could also create tasks to set these variables for you, depending on other conditions.</p> <p>At this point, we&#39;ve built an alarm that mimics the behaviour of option #1, the automatic alarm. So what about our vacation days? To solve this issue, I added an extra condition to the task to check my calendar. I have the tendency to add an all day event in my calendar named <code>Vacation</code> when I have a day off. So having it check if there is a <code>Vacation</code> task in my calendar is exactly what I needed. </p> <p>Now the task will only run on weekdays I don&#39;t have a day off. Perfect!</p> <p>For your convenience, I exported the task. The generated xml, for those that want to import it, is as follows:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;TaskerData</span> <span class="na">sr=</span><span class="s">&quot;&quot;</span> <span class="na">dvi=</span><span class="s">&quot;1&quot;</span> <span class="na">tv=</span><span class="s">&quot;4.7u1m&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Profile</span> <span class="na">sr=</span><span class="s">&quot;prof7&quot;</span> <span class="na">ve=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;cdate&gt;</span>1430336947272<span class="nt">&lt;/cdate&gt;</span>
        <span class="nt">&lt;edate&gt;</span>1433861797349<span class="nt">&lt;/edate&gt;</span>
        <span class="nt">&lt;id&gt;</span>7<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;mid0&gt;</span>6<span class="nt">&lt;/mid0&gt;</span>
        <span class="nt">&lt;nme&gt;</span>Set Alarm On Weekdays<span class="nt">&lt;/nme&gt;</span>
        <span class="nt">&lt;Time</span> <span class="na">sr=</span><span class="s">&quot;con0&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;fh&gt;</span>0<span class="nt">&lt;/fh&gt;</span>
            <span class="nt">&lt;fm&gt;</span>5<span class="nt">&lt;/fm&gt;</span>
            <span class="nt">&lt;th&gt;</span>0<span class="nt">&lt;/th&gt;</span>
            <span class="nt">&lt;tm&gt;</span>5<span class="nt">&lt;/tm&gt;</span>
        <span class="nt">&lt;/Time&gt;</span>
        <span class="nt">&lt;State</span> <span class="na">sr=</span><span class="s">&quot;con1&quot;</span> <span class="na">ve=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;code&gt;</span>5<span class="nt">&lt;/code&gt;</span>
            <span class="nt">&lt;pin&gt;</span>true<span class="nt">&lt;/pin&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg0&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>Vacation<span class="nt">&lt;/Str&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg1&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg2&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg3&quot;</span> <span class="na">val=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg4&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/State&gt;</span>
        <span class="nt">&lt;Day</span> <span class="na">sr=</span><span class="s">&quot;con2&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;wday0&gt;</span>4<span class="nt">&lt;/wday0&gt;</span>
            <span class="nt">&lt;wday1&gt;</span>6<span class="nt">&lt;/wday1&gt;</span>
            <span class="nt">&lt;wday2&gt;</span>5<span class="nt">&lt;/wday2&gt;</span>
            <span class="nt">&lt;wday3&gt;</span>3<span class="nt">&lt;/wday3&gt;</span>
            <span class="nt">&lt;wday4&gt;</span>2<span class="nt">&lt;/wday4&gt;</span>
        <span class="nt">&lt;/Day&gt;</span>
    <span class="nt">&lt;/Profile&gt;</span>
    <span class="nt">&lt;Task</span> <span class="na">sr=</span><span class="s">&quot;task6&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;cdate&gt;</span>1430336877555<span class="nt">&lt;/cdate&gt;</span>
        <span class="nt">&lt;edate&gt;</span>1433861797349<span class="nt">&lt;/edate&gt;</span>
        <span class="nt">&lt;id&gt;</span>6<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;nme&gt;</span>Set Alarm<span class="nt">&lt;/nme&gt;</span>
        <span class="nt">&lt;pri&gt;</span>10<span class="nt">&lt;/pri&gt;</span>
        <span class="nt">&lt;Action</span> <span class="na">sr=</span><span class="s">&quot;act0&quot;</span> <span class="na">ve=</span><span class="s">&quot;7&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;code&gt;</span>566<span class="nt">&lt;/code&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg0&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;var&gt;</span>%AlarmHour<span class="nt">&lt;/var&gt;</span>
            <span class="nt">&lt;/Int&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg1&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;var&gt;</span>%AlarmMinute<span class="nt">&lt;/var&gt;</span>
            <span class="nt">&lt;/Int&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg2&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>Time for work!<span class="nt">&lt;/Str&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg3&quot;</span> <span class="na">val=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/Action&gt;</span>
    <span class="nt">&lt;/Task&gt;</span>
<span class="nt">&lt;/TaskerData&gt;</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[HTPC: Getting rid of your RDP Woes]]></title> <description><![CDATA[Last year, I finally decided to get a HTPC hooked up to my TV set (running Windows 8.1). While it has been a major improvement on my TV experience, it has caused some extra woes as well. Due to the machine&#39;s nature, I refuse to hook up a keyboard and mouse. Even a wireless one! The only thing I&#39;ve hooked up, is an IR receiver and I want to keep it this way. Now and then, the machine requires a little bit of maintenance. I like RDP&#39;ing into the machine and manage it remotely. I prefer RDP since it is built in. I don&#39;t want to install yet another VNC service on a machine I want to keep as clean and lightweight as possible. _I do realize that installing a Linux distro would make it even more lightweight, but I&#39;m currently running a few Windows-only services on it. (I am a .NET developer, after all!)_ RDP, all in all, works great. It does what it&#39;s supposed to do and I hardly have to configure anything to make it work. There is only one downside and sadly, it&#39;s a rather big one. When RDP&#39;ing into the machine, it auto locks. This is something I can live with, as that also means no one is watching my actions through my TV while I&#39;m working on the machine. However, after closing the connection, the machine remains locked. This is a major pain in the ass as it means I&#39;ll have to either reboot the machine (auto-login) or type in my password.... Only there is no keyboard attached. After reading up a bit and tinkering a lot, I&#39;ve come up with a rather decent solution. # Disconnecting through a Task First, we&#39;ll start by creating a new task. We&#39;ll be creating the task to simplify running an elevated command. Open the `Task Scheduler` by pressing the `Win+R` buttons and executing the following command. ``` Taskschd.msc ``` After the window opens, right-click the `Task Scheduler Library`, create a new task and name it `Disconnect`. ![Create New Task - General Tab](//cdn.thuriot.be/images/HTPC-RDP/1.New.jpg) Don&#39;t forget to tick `Run with highest privileges`. This will allow the task to run with administrative rights without triggering [UAC](https://en.wikipedia.org/wiki/User_Account_Control). I like having UAC on, but it gets annoying fast for tasks like these. Without administrative rights, it will not work. After doing so, go to the actions tab. ![Actions Tab](//cdn.thuriot.be/images/HTPC-RDP/2.Actions.jpg) Click `New` and create a new action. The following window opens. ![Add Action](//cdn.thuriot.be/images/HTPC-RDP/3.Action.jpg) The command we will be executing is the following: ``` powershell -Command &quot;tscon (qwinsta | ForEach-Object { $_.Trim() -replace &#39;\s+&#39;,&#39;,&#39; } | ConvertFrom-Csv | Where-Object { $_.SESSIONNAME -match &#39;^&gt;&#39; } | Select-Object -First 1 -expand ID) /dest:console&quot; ``` Enter it into the window as shown in the screenshot. Lastly, go to the settings tab. Make sure `Allow task to be run on demand` is ticked. ![Settings Tab](//cdn.thuriot.be/images/HTPC-RDP/4.Settings.jpg) # A word of explanation: What exactly is happening? We&#39;re basically running the `qwinsta` command. This will give us a list of all sessions running on the machine. The current sessions that we are in, will be marked with a `&gt;`, so we&#39;re filtering that line out. After selecting that line, we want to retrieve the `ID` column. This is the ID of the current session. After getting the ID, we run the `tscon` command and pass the id and tell it to connect to `console`. This will make it drop the RDP connection and connect to its physical console. We have now disconnected the RDP connection and left the machine running unlocked. No keyboard required to watch some TV! # Rounding up ## Starting the task This task can easily be run with the following command: _Note that `Disconnect` is the name of the task we just created._ ``` schtasks /run /tn &quot;Disconnect&quot; ``` ## Simplify, beautify We can use [OblyTile](http://forum.xda-developers.com/showthread.php?t=1899865) to create a Windows 8 tile that will run this command. Then all we have to do is click the tile and we&#39;re disconnect, ready to watch some TV without further interaction. That&#39;s it, enjoy your HTPC! ]]></description> <link>//steven.thuriot.be/htpc-getting-rid-of-your-rdp-woes</link> <guid isPermaLink="true">//steven.thuriot.be/htpc-getting-rid-of-your-rdp-woes</guid> <pubDate>2014-12-30T15:02:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/NESRemote.png" medium="image"/> <content:encoded><![CDATA[<p>Last year, I finally decided to get a HTPC hooked up to my TV set (running Windows 8.1). While it has been a major improvement on my TV experience, it has caused some extra woes as well.</p> <p>Due to the machine&#39;s nature, I refuse to hook up a keyboard and mouse. Even a wireless one! The only thing I&#39;ve hooked up, is an IR receiver and I want to keep it this way. Now and then, the machine requires a little bit of maintenance. I like RDP&#39;ing into the machine and manage it remotely. I prefer RDP since it is built in. I don&#39;t want to install yet another VNC service on a machine I want to keep as clean and lightweight as possible. </p> <p><em>I do realize that installing a Linux distro would make it even more lightweight, but I&#39;m currently running a few Windows-only services on it. (I am a .NET developer, after all!)</em></p> <p>RDP, all in all, works great. It does what it&#39;s supposed to do and I hardly have to configure anything to make it work. There is only one downside and sadly, it&#39;s a rather big one. When RDP&#39;ing into the machine, it auto locks. This is something I can live with, as that also means no one is watching my actions through my TV while I&#39;m working on the machine. However, after closing the connection, the machine remains locked. This is a major pain in the ass as it means I&#39;ll have to either reboot the machine (auto-login) or type in my password.... Only there is no keyboard attached.</p> <p>After reading up a bit and tinkering a lot, I&#39;ve come up with a rather decent solution.</p> <h1>Disconnecting through a Task</h1> <p>First, we&#39;ll start by creating a new task. We&#39;ll be creating the task to simplify running an elevated command. Open the <code>Task Scheduler</code> by pressing the <code>Win+R</code> buttons and executing the following command.</p> <div class="highlight"><pre><code class="language-text" data-lang="text">Taskschd.msc
</code></pre></div> <p>After the window opens, right-click the <code>Task Scheduler Library</code>, create a new task and name it <code>Disconnect</code>.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/1.New.jpg" alt="Create New Task - General Tab"></p> <p>Don&#39;t forget to tick <code>Run with highest privileges</code>. This will allow the task to run with administrative rights without triggering <a href="https://en.wikipedia.org/wiki/User_Account_Control">UAC</a>. I like having UAC on, but it gets annoying fast for tasks like these. Without administrative rights, it will not work. </p> <p>After doing so, go to the actions tab.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/2.Actions.jpg" alt="Actions Tab"></p> <p>Click <code>New</code> and create a new action. The following window opens.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/3.Action.jpg" alt="Add Action"></p> <p>The command we will be executing is the following:</p> <div class="highlight"><pre><code class="language-text" data-lang="text">powershell -Command &quot;tscon (qwinsta | ForEach-Object { $_.Trim() -replace &#39;\s+&#39;,&#39;,&#39; } | ConvertFrom-Csv | Where-Object { $_.SESSIONNAME -match &#39;^&gt;&#39; } | Select-Object -First 1 -expand ID) /dest:console&quot;
</code></pre></div> <p>Enter it into the window as shown in the screenshot.</p> <p>Lastly, go to the settings tab. Make sure <code>Allow task to be run on demand</code> is ticked.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/4.Settings.jpg" alt="Settings Tab"></p> <h1>A word of explanation: What exactly is happening?</h1> <p>We&#39;re basically running the <code>qwinsta</code> command. This will give us a list of all sessions running on the machine. The current sessions that we are in, will be marked with a <code>&gt;</code>, so we&#39;re filtering that line out. After selecting that line, we want to retrieve the <code>ID</code> column. This is the ID of the current session.</p> <p>After getting the ID, we run the <code>tscon</code> command and pass the id and tell it to connect to <code>console</code>. This will make it drop the RDP connection and connect to its physical console. </p> <p>We have now disconnected the RDP connection and left the machine running unlocked. No keyboard required to watch some TV!</p> <h1>Rounding up</h1> <h2>Starting the task</h2> <p>This task can easily be run with the following command: <em>Note that <code>Disconnect</code> is the name of the task we just created.</em></p> <div class="highlight"><pre><code class="language-text" data-lang="text">schtasks /run /tn &quot;Disconnect&quot;
</code></pre></div> <h2>Simplify, beautify</h2> <p>We can use <a href="http://forum.xda-developers.com/showthread.php?t=1899865">OblyTile</a> to create a Windows 8 tile that will run this command. Then all we have to do is click the tile and we&#39;re disconnect, ready to watch some TV without further interaction.</p> <p>That&#39;s it, enjoy your HTPC!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Snapshot]]></title> <description><![CDATA[When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing `IClonable` or using `Serialization` (followed by `Deserialization`). This might be an issue, however, when that instance is one from a third-party library. I wrote a little library, called [Snapshot](https://github.com/StevenThuriot/Snapshot), that uses the DLR to come up with a solution to this problem. By default, it will map all public properties and fields to a dynamic object. This behaviour is configurable. You will end up with a dynamic object with the same **public** signature as the one you took a snapshot of. ```csharp var person=new Person(&quot;Steven&quot;, &quot;Thuriot&quot;); person.Age = 27; var snapshot=person.TakeSnapshot(); person.Age = 28; Console.WriteLine(&quot;Person age: {0}&quot;, person.Age); Console.WriteLine(&quot;Snapshot age: {0}&quot;, snapshot.Age); ``` --- Output: ```xml Person age: 28 Snapshot age: 27 ``` ]]></description> <link>//steven.thuriot.be/snapshot</link> <guid isPermaLink="true">//steven.thuriot.be/snapshot</guid> <pubDate>2014-12-14T19:21:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/lens_camera_macro.jpg" medium="image"/> <content:encoded><![CDATA[<p>When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing <code>IClonable</code> or using <code>Serialization</code> (followed by <code>Deserialization</code>).</p> <p>This might be an issue, however, when that instance is one from a third-party library. I wrote a little library, called <a href="https://github.com/StevenThuriot/Snapshot">Snapshot</a>, that uses the DLR to come up with a solution to this problem.</p> <p>By default, it will map all public properties and fields to a dynamic object. This behaviour is configurable. You will end up with a dynamic object with the same <strong>public</strong> signature as the one you took a snapshot of.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Steven&quot;</span><span class="p">,</span> <span class="s">&quot;Thuriot&quot;</span><span class="p">);</span>
<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">27</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">snapshot</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">TakeSnapshot</span><span class="p">();</span>

<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">28</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Person age: {0}&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Snapshot age: {0}&quot;</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</code></pre></div> <hr> <p>Output:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Person age: 28
Snapshot age: 27
</code></pre></div>]]></content:encoded> </item> </channel> </rss>