<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; C#]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://localhost:4000</link> <link href="http://localhost:4000/tag/c/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[How to make building Strings from dates easy?]]></title> <description><![CDATA[While the DateTime object might already have quite some standard formats for its ToString method, it&#39;s just not good enough to use directly in a front-end. ]]></description> <link>http://localhost:4000/how-to-make-building-strings-from-dates-easy</link> <guid isPermaLink="true">http://localhost:4000/how-to-make-building-strings-from-dates-easy</guid> <pubDate>2010-12-08T14:47:00+00:00</pubDate> <content:encoded><![CDATA[<p>While the DateTime object might already have quite some standard formats for its ToString method, it&#39;s just not good enough to use directly in a front-end.</p> <p>In some applications, outputting dates can become quite a recurring job. Because of this, I decided to write a little helper class. This helper can easily be extended later by overloading the Print method to support other objects than just DateTime.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Helpers</span>
<span class="p">{</span>
    <span class="c1">///&lt;summary&gt;</span>
    <span class="c1">/// Helpers.PrintHelper</span>
    <span class="c1">///&lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">PrintHelper</span>
    <span class="p">{</span>
        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Prints the specified date time.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;dateTime&quot;&gt;The date time.&lt;/param&gt;</span>
        <span class="c1">///&lt;returns&gt;&lt;/returns&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">String</span> <span class="nf">Print</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">dateTime</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">dateTime</span><span class="p">.</span><span class="n">ToString</span>
                <span class="p">(</span>
                    <span class="s">&quot;dddd, &#39;&quot;</span> <span class="p">+</span>
                    <span class="n">AddOrdinal</span><span class="p">(</span><span class="n">dateTime</span><span class="p">.</span><span class="n">Day</span><span class="p">)</span> <span class="p">+</span>
                    <span class="s">&quot; of&#39; MMMM yyyy &#39;at&#39; HH:mm:ss&quot;</span>
                <span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Adds the ordinal.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;day&quot;&gt;The day.&lt;/param&gt;</span>
        <span class="c1">///&lt;returns&gt;&lt;/returns&gt;</span>
        <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AddOrdinal</span><span class="p">(</span><span class="kt">int</span> <span class="n">day</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">day</span> <span class="p">%</span> <span class="m">100</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="m">11</span><span class="p">:</span>
                <span class="k">case</span> <span class="m">12</span><span class="p">:</span>
                <span class="k">case</span> <span class="m">13</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">day</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;th&quot;</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">switch</span> <span class="p">(</span><span class="n">day</span> <span class="p">%</span> <span class="m">10</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="m">1</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">day</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;st&quot;</span><span class="p">;</span>
                <span class="k">case</span> <span class="m">2</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">day</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;nd&quot;</span><span class="p">;</span>
                <span class="k">case</span> <span class="m">3</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">day</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;rd&quot;</span><span class="p">;</span>
                <span class="k">default</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">day</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="s">&quot;th&quot;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>You can then use it as following:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">String</span> <span class="n">date</span> <span class="p">=</span> <span class="n">Helpers</span><span class="p">.</span><span class="n">PrintHelper</span><span class="p">.</span><span class="n">Print</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
</code></pre></div> <p>The variable &quot;date&quot; will then contain the datetime, formatted beautifully, including ordinals.</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">8th of December 2010 at 14:46:00
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[How to check if periods overlap and/or contain another period?]]></title> <description><![CDATA[Checking for overlap can be quite tricky. It&#39;s not hard at all to make the whole process far too complicated, resulting in a lot of overhead. Because of this, I decided to think about the easiest way to check for this and expand my helper class from the previous post. ]]></description> <link>http://localhost:4000/how-to-check-if-periods-overlap-andor-contain-another-period</link> <guid isPermaLink="true">http://localhost:4000/how-to-check-if-periods-overlap-andor-contain-another-period</guid> <pubDate>2010-12-09T11:39:00+00:00</pubDate> <content:encoded><![CDATA[<p>Checking for overlap can be quite tricky. It&#39;s not hard at all to make the whole process far too complicated, resulting in a lot of overhead. Because of this, I decided to think about the easiest way to check for this and expand my helper class from the previous post.</p> <p>Imagine having a class called <code>Period</code>. This class contains a start and end date.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Period</span>
<span class="p">{</span>
    <span class="c1">///&lt;summary&gt;</span>
    <span class="c1">/// Gets or sets the start date.</span>
    <span class="c1">///&lt;/summary&gt;</span>
    <span class="c1">///&lt;value&gt;The start date.&lt;/value&gt;</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Start</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">///&lt;summary&gt;</span>
    <span class="c1">/// Gets or sets the end date.</span>
    <span class="c1">///&lt;/summary&gt;</span>
    <span class="c1">///&lt;value&gt;The end date.&lt;/value&gt;</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">End</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The helper class accepts two periods. It is possible to check if the periods overlap or if one period completely contains the other.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Helpers</span>
<span class="p">{</span>
    <span class="c1">///&lt;summary&gt;</span>
    <span class="c1">/// Helpers.OverlapHelper</span>
    <span class="c1">///&lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">OverlapHelper</span>
    <span class="p">{</span>
        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Determines whether the specified periods overlap.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;period1&quot;&gt;The first period.&lt;/param&gt;</span>
        <span class="c1">///&lt;param name=&quot;period2&quot;&gt;The second period.&lt;/param&gt;</span>
        <span class="c1">///&lt;returns&gt;</span>
        <span class="c1">///     &lt;c&gt;true&lt;/c&gt; if the specified periods overlap; otherwise,&lt;c&gt;false&lt;/c&gt;.</span>
        <span class="c1">///&lt;/returns&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">Boolean</span> <span class="nf">HasOverlap</span><span class="p">(</span><span class="n">Period</span> <span class="n">period1</span><span class="p">,</span> <span class="n">Period</span> <span class="n">period2</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">period2</span><span class="p">.</span><span class="n">Start</span><span class="p">&lt;</span> <span class="n">period1</span><span class="p">.</span><span class="n">End</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">period2</span><span class="p">.</span><span class="n">End</span> <span class="p">&gt;</span> <span class="n">period1</span><span class="p">.</span><span class="n">Start</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Determines whether period1 contains period2.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;period1&quot;&gt;The first period.&lt;/param&gt;</span>
        <span class="c1">///&lt;param name=&quot;period2&quot;&gt;The second period.&lt;/param&gt;</span>
        <span class="c1">///&lt;returns&gt;</span>
        <span class="c1">///     &lt;c&gt;true&lt;/c&gt; if period1 contains period2; otherwise,&lt;c&gt;false&lt;/c&gt;.</span>
        <span class="c1">///&lt;/returns&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">Boolean</span> <span class="nf">Contains</span><span class="p">(</span><span class="n">Period</span> <span class="n">period1</span><span class="p">,</span> <span class="n">Period</span> <span class="n">period2</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">period2</span><span class="p">.</span><span class="n">Start</span> <span class="p">&gt;=</span> <span class="n">period1</span><span class="p">.</span><span class="n">Start</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">period2</span><span class="p">.</span><span class="n">End</span><span class="p">&lt;=</span> <span class="n">period1</span><span class="p">.</span><span class="n">End</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>And of course, some test cases. Period 1 starts March 23rd and stops March 28th.</p> <p><strong>Testcases for Overlap</strong></p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">18/3 – 25/3 –&gt; true  <span class="err">&amp;&amp;</span> true  –&gt; true
18/3 – 29/3 –&gt; true  <span class="err">&amp;&amp;</span> true  –&gt; true
25/3 – 29/3 –&gt; true  <span class="err">&amp;&amp;</span> true  –&gt; true
24/3 – 27/3 –&gt; true  <span class="err">&amp;&amp;</span> true  –&gt; true
18/3 – 22/3 –&gt; true  <span class="err">&amp;&amp;</span> false –&gt; false
29/3 – 30/3 –&gt; false <span class="err">&amp;&amp;</span> true  –&gt; false
</code></pre></div> <p><strong>Testcases for Contains</strong></p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">18/3 – 25/3 –&gt; false <span class="err">&amp;&amp;</span> true  –&gt; false
18/3 – 29/3 –&gt; false <span class="err">&amp;&amp;</span> false –&gt; false
25/3 – 29/3 –&gt; true  <span class="err">&amp;&amp;</span> false –&gt; false
24/3 – 27/3 –&gt; true  <span class="err">&amp;&amp;</span> true  –&gt; true
18/3 – 22/3 –&gt; false <span class="err">&amp;&amp;</span> true  –&gt; false
29/3 – 30/3 –&gt; true  <span class="err">&amp;&amp;</span> false –&gt; false
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Highly coupled dependencies, a thing of the past.]]></title> <description><![CDATA[Programming 101, try to avoid highly coupled dependencies. Luckily, with today&#39;s frameworks, this has become a thing of the past. ]]></description> <link>http://localhost:4000/high-coupled-dependencies-a-thing-of-the-past</link> <guid isPermaLink="true">http://localhost:4000/high-coupled-dependencies-a-thing-of-the-past</guid> <pubDate>2010-12-21T13:38:00+00:00</pubDate> <content:encoded><![CDATA[<p>Programming 101, try to avoid highly coupled dependencies. Luckily, with today&#39;s frameworks, this has become a thing of the past.</p> <p>First, what are highly coupled dependencies? To understand this, here&#39;s a little example:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">MultiplierInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="nf">GetMultiplier</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">MultiplierImplementation</span> <span class="p">:</span> <span class="n">MultiplierInterface</span> 
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="nf">GetMultiplier</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="m">5f</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Calculator</span> <span class="p">{</span>
    <span class="k">private</span> <span class="n">MultiplierInterface</span> <span class="n">multiplier</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MultiplierImplementation</span><span class="p">();</span>

    <span class="k">public</span> <span class="kt">float</span> <span class="nf">Multiply</span><span class="p">(</span><span class="kt">float</span> <span class="n">number</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">number</span> <span class="p">*</span> <span class="n">multiplier</span><span class="p">.</span><span class="n">GetMultiplier</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>As you can see in this rather strange code sample, the <em>Calculator</em> class has a highly coupled dependency to the <em>MultiplierImplementation</em> class. I realise it&#39;s not a code sample you&#39;ll ever encounter in real life, but it works for showing what I&#39;m talking about.</p> <p>A better way to build the <em>Calculator</em> class would be to use a factory. <em>Calculator</em> would implement a constructor with the <em>Multiplier</em> interface as a parameter. The factory will then create an instance of a class implementing the <em>Multiplier</em> interface and pass it to the constructor of <em>Calculator</em>. This moves the dependency management from <em>Calculator</em> to the factory. As a consequence, if the <code><code>Calculator</code></code> needed to be assembled with a different <em>Multiplier</em> implementation, the <em>Calculator</em> code would not have to be changed. This is called dependency injection.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">CalculatorFactory</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Calculator</span> <span class="nf">BuildCalculator</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">MultiplierInterface</span> <span class="n">multiplier</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MultiplierImplementation</span><span class="p">();</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Calculator</span><span class="p">(</span><span class="n">multiplier</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>In a more realistic software application, this may happen if a new version of a base application is constructed with a different service implementation. Using factories, only the service code and the Factory code would need to be modified, but not the code of the multiple users of the service.</p> <p>Creating all these factories can quickly become a lot of work, though. It&#39;s not called &quot;manual dependency injection&quot; for nothing. So, long story short, how to automate this process? It&#39;s simple! Use a dependency injection framework. In .NET, one of the better frameworks to do this is called <a href="http://ninject.org/">Ninject</a>. It&#39;s an amazing piece of code that takes care of any sort of dependency injection you would ever need. Simply get the latest dll, reference it in your project and stop worrying about highly coupled dependencies. At the time of this post, the latest Ninject version is v2.0.</p> <p>Here&#39;s a little example how the above code would look when using the Ninject framework rather than self-made factories.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">MultiplierInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="nf">GetMultiplier</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">MultiplierImplementation</span> <span class="p">:</span> <span class="n">MultiplierInterface</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="nf">GetMultiplier</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="m">5f</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Calculator</span> <span class="p">{</span>
    <span class="k">private</span> <span class="n">MultiplierInterface</span> <span class="n">multiplier</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">float</span> <span class="nf">Multiply</span><span class="p">(</span><span class="kt">float</span> <span class="n">number</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">number</span> <span class="p">*</span> <span class="n">multiplier</span><span class="p">.</span><span class="n">GetMultiplier</span><span class="p">();</span>
    <span class="p">}</span>

<span class="na">    [Inject]</span>
    <span class="k">public</span> <span class="nf">Calculator</span><span class="p">(</span><span class="n">MultiplierInterface</span> <span class="n">multiplier</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">multiplier</span> <span class="p">=</span> <span class="n">multiplier</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">CalculatorModule</span> <span class="p">:</span> <span class="n">NinjectModule</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Load</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">MultiplierInterface</span><span class="p">&gt;().</span><span class="n">To</span><span class="p">&lt;</span><span class="n">MultiplierImplementation</span><span class="p">&gt;();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">Calculator</span><span class="p">&gt;().</span><span class="n">ToSelf</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">IKernel</span> <span class="n">kernel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StandardKernel</span><span class="p">(</span><span class="k">new</span> <span class="n">CalculatorModule</span><span class="p">());</span>
        <span class="n">Calculator</span> <span class="n">calculator</span> <span class="p">=</span> <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">Calculator</span><span class="p">&gt;();</span>
        <span class="c1">//Logic implementation...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>As you can see, all you need to do is create a Ninject kernel and pass it all the modules you&#39;ve created as parameters. Inside these modules, you declare the objects you want to place inside the kernel. Every object that gets injected or receives injects, needs to be declared. By simply putting the [Inject] attribute over <em>Calculator</em>&#39;s constructor, Ninject will know it needs to inject it with an instance that implements <em>MultiplierInterface</em>. There are three possibilities when Ninject creates an instance of an object.</p> <ul> <li>There is one constructor with an Inject attribute. Ninject will use this constructor.</li> <li>There are multiple constructors but no Inject attributes are defined. Ninject will select the constructor with the most parameters that it understands to resolve.</li> <li>There are no constructors. Ninject will use the default constructor.</li> </ul> <p>When injecting, Ninject will notice you&#39;ve bound the <em>MultiplierImplementation</em> class to this interface. It will then create an instance of this class and pass it to <em>Calculator</em>&#39;s constructor. All you need to do is ask the kernel for a <em>Calculator</em> and it will automate all the rest. It&#39;s as simple as that. You might also notice that the <em>ToSelf()</em> method is used when binding the Calculator class. This is simply because it does not have an interface in this example and it&#39;s a lot faster than writing it like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Bind</span><span class="p">&lt;</span><span class="n">Calculator</span><span class="p">&gt;().</span><span class="n">To</span><span class="p">&lt;</span><span class="n">Calculator</span><span class="p">&gt;();</span>
</code></pre></div> <p>I, of course, realise real life isn&#39;t always that simple. Because of this, I&#39;ve prepared two other, more complicated code samples to show how this framework works.</p> <h1>First Ninject Sample</h1> <p>First, we will create an interface that our objects will use.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IRunnable</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">Run</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <p>Second, we will create four objects that each implement this interface in a unique way.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Runnable1</span> <span class="p">:</span> <span class="n">IRunnable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Runnable2</span> <span class="p">:</span> <span class="n">IRunnable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Runnable3</span> <span class="p">:</span> <span class="n">IRunnable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Runnable4</span> <span class="p">:</span> <span class="n">IRunnable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;!&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>We will also create a controller that contains one of each. Its constructor will obviously accept four <em>IRunnable</em> interfaces. This is where it gets tricky. How will Ninject know which object to pass?! Simply put, it doesn&#39;t. This is where attributes come in. We will create three attributes.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">FirstNinjectAttribute</span> <span class="p">:</span> <span class="n">Attribute</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">SecondNinjectAttribute</span> <span class="p">:</span> <span class="n">Attribute</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ThirdNinjectAttribute</span> <span class="p">:</span> <span class="n">Attribute</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div> <p>These attributes will be used to make clear to Ninject which implementation should be used where. Without these attributes, it would simply create an instance of the first deceleration of the <em>IRunnable</em> interface four times and pass it to the constructor. This is, of course, not desirable in almost every case. We make it clear to Ninject which implementation belongs to which attribute in the <em>NinjectModule</em>.</p> <p>And here it is:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">RunnableModule</span> <span class="p">:</span> <span class="n">NinjectModule</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Load</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">IRunnable</span><span class="p">&gt;().</span><span class="n">To</span><span class="p">&lt;</span><span class="n">Runnable1</span><span class="p">&gt;();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">IRunnable</span><span class="p">&gt;().</span><span class="n">To</span><span class="p">&lt;</span><span class="n">Runnable2</span><span class="p">&gt;().</span><span class="n">WhenTargetHas</span><span class="p">&lt;</span><span class="n">FirstNinjectAttribute</span><span class="p">&gt;();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">IRunnable</span><span class="p">&gt;().</span><span class="n">To</span><span class="p">&lt;</span><span class="n">Runnable3</span><span class="p">&gt;().</span><span class="n">WhenTargetHas</span><span class="p">&lt;</span><span class="n">SecondNinjectAttribute</span><span class="p">&gt;();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">IRunnable</span><span class="p">&gt;().</span><span class="n">To</span><span class="p">&lt;</span><span class="n">Runnable4</span><span class="p">&gt;().</span><span class="n">WhenTargetHas</span><span class="p">&lt;</span><span class="n">ThirdNinjectAttribute</span><span class="p">&gt;();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">NinjectController</span><span class="p">&gt;().</span><span class="n">ToSelf</span><span class="p">().</span><span class="n">InSingletonScope</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Our first runnable class gets declared without an attribute. If Ninject needs to pass a parameter typed <em>IRunnable</em> that does not have any of these attributes, it will pass an instance of <em>Runnable1</em>. We finally bind <em>NinjectController</em> to itself. Notice, however, that we&#39;re binding this class in singleton scope. Simply put, this means that every time you ask the kernel for a <em>NinjectController</em>, it will return that very same instance every time. This is quite desirable behaviour for a controller. Standard behaviour for Ninject is to create a new instance every time you call the Get method. It&#39;s the same as calling <em>.InTransientScope()</em> when binding the class. There are two other scopes available: Thread ( <em>.InThreadScope()</em> ) and Request ( <em>.InRequestScope()</em> ). Both are pretty straight forward. In thread scope, Ninject will create one instance per thread. In request scope, it will create one instance per web request. In the latter case, it will destroy that instance when the request ends.</p> <p>Finally, here&#39;s the code for our controller:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">NinjectController</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">IRunnable</span> <span class="n">testRunnable1</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">IRunnable</span> <span class="n">testRunnable2</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">IRunnable</span> <span class="n">testRunnable3</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">IRunnable</span> <span class="n">testRunnable4</span><span class="p">;</span>

<span class="na">    [Inject]</span>
    <span class="k">public</span> <span class="nf">NinjectController</span><span class="p">(</span><span class="n">IRunnable</span> <span class="n">testRunnable1</span><span class="p">,</span> <span class="p">[</span><span class="n">FirstNinject</span><span class="p">]</span> <span class="n">IRunnable</span> <span class="n">testRunnable2</span><span class="p">,</span> <span class="p">[</span><span class="n">SecondNinject</span><span class="p">]</span> <span class="n">IRunnable</span> <span class="n">testRunnable3</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">testRunnable1</span> <span class="p">=</span> <span class="n">testRunnable1</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">testRunnable2</span> <span class="p">=</span> <span class="n">testRunnable2</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">testRunnable3</span> <span class="p">=</span> <span class="n">testRunnable3</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">testRunnable4</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>

<span class="na">    [Inject]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetRunnable4</span><span class="p">([</span><span class="n">ThirdNinject</span><span class="p">]</span> <span class="n">IRunnable</span> <span class="n">testRunnable</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">testRunnable4</span> <span class="p">=</span> <span class="n">testRunnable</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">testRunnable1</span><span class="p">.</span><span class="n">Run</span><span class="p">();</span>
        <span class="n">testRunnable2</span><span class="p">.</span><span class="n">Run</span><span class="p">();</span>
        <span class="n">testRunnable3</span><span class="p">.</span><span class="n">Run</span><span class="p">();</span>
        <span class="n">testRunnable4</span><span class="p">.</span><span class="n">Run</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The first parameter will get an instance of the Runnable class that is defined without an attribute. The others will get an instance of those with the correct attribute. But wait, you say, the constructor doesn&#39;t have a parameter for the fourth runnable instance. What gives?! Won&#39;t running this result in the program throwing an exception?!</p> <p>Well, this is another strength of Ninject. Notice that <em>Inject</em> attribute above the <em>SetRunnable4</em> method? That&#39;s right, it will call this method and pass the correct instance right after injecting the constructor, leaving us with a controller that has all 4 runnable classes filled in. Sweet!</p> <p>Here&#39;s a main method to run this code sample:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">IKernel</span> <span class="n">kernel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StandardKernel</span><span class="p">(</span><span class="k">new</span> <span class="n">RunnableModule</span><span class="p">());</span>
        <span class="n">NinjectController</span> <span class="n">controller</span> <span class="p">=</span> <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">NinjectController</span><span class="p">&gt;();</span>
        <span class="n">controller</span><span class="p">.</span><span class="n">Run</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The output of this will be <strong>&quot;Hello, world!&quot;</strong>.</p> <h1>Second Ninject Sample</h1> <p>Okay, so now we know how to inject normal classes. So what if the class you want to inject has a parameter list of unknown length? And what if this parameter list is a list of <em>Strings</em> or other constants?</p> <p>Let&#39;s create a few classes that will be injected. This sample will also be using the attributes we created in the previous sample.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">NinjectParams</span>
<span class="p">{</span>
<span class="na">    [Inject]</span>
    <span class="k">public</span> <span class="nf">NinjectParams</span><span class="p">(</span><span class="k">params</span> <span class="n">String</span><span class="p">[]</span> <span class="n">strings</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">String</span> <span class="n">item</span> <span class="k">in</span> <span class="n">strings</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">NinjectParamsWithFirstAttribute</span>
<span class="p">{</span>
<span class="na">    [Inject]</span>
    <span class="k">public</span> <span class="nf">NinjectParamsWithFirstAttribute</span><span class="p">([</span><span class="n">FirstNinject</span><span class="p">]</span> <span class="k">params</span> <span class="n">String</span><span class="p">[]</span> <span class="n">strings</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">String</span> <span class="n">item</span> <span class="k">in</span> <span class="n">strings</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">NinjectParamsWithSecondAttribute</span>
<span class="p">{</span>
<span class="na">    [Inject]</span>
    <span class="k">public</span> <span class="nf">NinjectParamsWithSecondAttribute</span><span class="p">([</span><span class="n">SecondNinject</span><span class="p">]</span> <span class="k">params</span> <span class="n">String</span><span class="p">[]</span> <span class="n">strings</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">String</span> <span class="n">item</span> <span class="k">in</span> <span class="n">strings</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">NinjectParamsWithBothAttributes</span>
<span class="p">{</span>
<span class="na">    [Inject]</span>
    <span class="k">public</span> <span class="nf">NinjectParamsWithBothAttributes</span><span class="p">([</span><span class="n">FirstNinject</span><span class="p">,</span> <span class="n">SecondNinject</span><span class="p">]</span> <span class="k">params</span> <span class="n">String</span><span class="p">[]</span> <span class="n">strings</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">String</span> <span class="n">item</span> <span class="k">in</span> <span class="n">strings</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>As you can see, each constructor has the <em>params</em> attribute and accepts <em>Strings</em>. In other words the constructor will accept an unlimited amount of <em>Strings</em>. Without the attributes, Ninject would just inject every <em>String</em> it can find. This is, of course, unwanted behaviour most of the time. Using attributes, we can control the behaviour.</p> <p>The tricky part is creating the module which will be loaded in the kernel.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ParamsModule</span> <span class="p">:</span> <span class="n">Ninject</span><span class="p">.</span><span class="n">Modules</span><span class="p">.</span><span class="n">NinjectModule</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Load</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;().</span><span class="n">ToConstant</span><span class="p">(</span><span class="s">&quot;First String&quot;</span><span class="p">);</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;().</span><span class="n">ToConstant</span><span class="p">(</span><span class="s">&quot;Second String&quot;</span><span class="p">);</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;().</span><span class="n">ToConstant</span><span class="p">(</span><span class="s">&quot;Third String will only be passed to FirstNinjectAttribute&quot;</span><span class="p">)</span>
            <span class="p">.</span><span class="n">WhenTargetHas</span><span class="p">&lt;</span><span class="n">FirstNinjectAttribute</span><span class="p">&gt;();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;().</span><span class="n">ToConstant</span><span class="p">(</span><span class="s">&quot;Fourth String will only be passed to SecondNinjectAttribute&quot;</span><span class="p">)</span>
            <span class="p">.</span><span class="n">WhenTargetHas</span><span class="p">&lt;</span><span class="n">SecondNinjectAttribute</span><span class="p">&gt;();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;().</span><span class="n">ToConstant</span><span class="p">(</span><span class="s">&quot;Fifth String&quot;</span><span class="p">);</span>

        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">NinjectParams</span><span class="p">&gt;().</span><span class="n">ToSelf</span><span class="p">();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">NinjectParamsWithFirstAttribute</span><span class="p">&gt;().</span><span class="n">ToSelf</span><span class="p">();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">NinjectParamsWithSecondAttribute</span><span class="p">&gt;().</span><span class="n">ToSelf</span><span class="p">();</span>
        <span class="n">Bind</span><span class="p">&lt;</span><span class="n">NinjectParamsWithBothAttributes</span><span class="p">&gt;().</span><span class="n">ToSelf</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Here&#39;s an example of the main function to use with this code.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">IKernel</span> <span class="n">kernel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StandardKernel</span><span class="p">(</span><span class="k">new</span> <span class="n">ParamsModule</span><span class="p">());</span>
        <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">NinjectParams</span><span class="p">&gt;();</span>
        <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">NinjectParamsWithFirstAttribute</span><span class="p">&gt;();</span>
        <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">NinjectParamsWithSecondAttribute</span><span class="p">&gt;();</span>
        <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">NinjectParamsWithBothAttributes</span><span class="p">&gt;();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Now we come to the interesting part, what exactly will the output be?</p> <p><em>NinjectParams</em> will receive three <em>Strings</em>, namely the ones that were bound in the module without an attribute.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="p">{</span><span class="kt">string</span><span class="p">[</span><span class="m">3</span><span class="p">]}</span>
<span class="na">    [0]</span><span class="p">:</span> <span class="s">&quot;First String&quot;</span>
<span class="na">    [1]</span><span class="p">:</span> <span class="s">&quot;Second String&quot;</span>
<span class="na">    [2]</span><span class="p">:</span> <span class="s">&quot;Fifth String&quot;</span>
</code></pre></div> <p><em>NinjectParamsWithFirstAttribute</em> will receive four <em>Strings.</em> Each <em>String</em> without attribute will be injected because it fits the constructor, but also the <em>String</em> with the <em>FirstNinjectAttribute</em>. The <em>Strings</em> with an attribute have priority over others and will be injected first.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="p">{</span><span class="kt">string</span><span class="p">[</span><span class="m">4</span><span class="p">]}</span>
<span class="na">    [0]</span><span class="p">:</span> <span class="s">&quot;Third String will only be passed to FirstNinjectAttribute&quot;</span>
<span class="na">    [1]</span><span class="p">:</span> <span class="s">&quot;First String&quot;</span>
<span class="na">    [2]</span><span class="p">:</span> <span class="s">&quot;Second String&quot;</span>
<span class="na">    [3]</span><span class="p">:</span> <span class="s">&quot;Fifth String&quot;</span>
</code></pre></div> <p><em>NinjectParamsWithSecondAttribute</em> has similar behaviour, but will accept the <em>String</em> with the <em>SecondNinjectAttribute</em> rather than the first one.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="p">{</span><span class="kt">string</span><span class="p">[</span><span class="m">4</span><span class="p">]}</span>
<span class="na">    [0]</span><span class="p">:</span> <span class="s">&quot;Fourth String will only be passed to SecondNinjectAttribute&quot;</span>
<span class="na">    [1]</span><span class="p">:</span> <span class="s">&quot;First String&quot;</span>
<span class="na">    [2]</span><span class="p">:</span> <span class="s">&quot;Second String&quot;</span>
<span class="na">    [3]</span><span class="p">:</span> <span class="s">&quot;Fifth String&quot;</span>
</code></pre></div> <p>Finally, <em>NinjectParamsWithBothAttributes</em> will receive all <em>Strings</em>.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="p">{</span><span class="kt">string</span><span class="p">[</span><span class="m">5</span><span class="p">]}</span>
<span class="na">    [0]</span><span class="p">:</span> <span class="s">&quot;Third String will only be passed to FirstNinjectAttribute&quot;</span>
<span class="na">    [1]</span><span class="p">:</span> <span class="s">&quot;Fourth String will only be passed to SecondNinjectAttribute&quot;</span>
<span class="na">    [2]</span><span class="p">:</span> <span class="s">&quot;First String&quot;</span>
<span class="na">    [3]</span><span class="p">:</span> <span class="s">&quot;Second String&quot;</span>
<span class="na">    [4]</span><span class="p">:</span> <span class="s">&quot;Fifth String&quot;</span>
</code></pre></div> <p>Swapping the attributes in this last sample does not change the order in which they are injected. In other words, changing the attribute to &quot;[SecondNinject, FirstNinject]&quot; will make no difference. Ninject will inject in the order that the <em>Strings</em> are defined in the module. It doesn&#39;t really matter though if you define them in the module before or after the classes that will be injected in version 2 and up. In lower versions, Ninject will only inject things that are defined already, defining another <em>String</em> afterwards means it won&#39;t be injected.</p> <p>However, I feel it&#39;s generally good practice to define the things that will be injected into others first. Best practice would be to completely separate them into different modules. One module for each type. (e.g. for this example: <em>StringsModule</em>, <em>NinjectParamsModule</em>, and so on). When splitting up the modules, it&#39;s a good idea to pass the modules like <em>StringModule</em> to the kernel&#39;s constructor first. This will help keep things easy to understand for both yourself and others.</p> <p>Think things through before writing the module. The order might be important for your application.</p> ]]></content:encoded> </item> <item> <title><![CDATA[Guard your code using LINQ and Reflection]]></title> <description><![CDATA[Time to add another class to our Helpers. ]]></description> <link>http://localhost:4000/guard-your-code-using-linq-and-reflection</link> <guid isPermaLink="true">http://localhost:4000/guard-your-code-using-linq-and-reflection</guid> <pubDate>2010-12-23T10:13:00+00:00</pubDate> <content:encoded><![CDATA[<p>Time to add another class to our Helpers.</p> <p>Defensive programming is very important. Checking that every parameter is correct before working with them is simply a must. The code for doing something like this quickly becomes very repetitive. Writing a Guard class is the perfect way to keep everything in check and avoid duplicate code.</p> <p>I decided to even take it a step further and use reflection to get the name of the method and the parameters where things are starting to go wrong and add them to the exception&#39;s message as extra information. The checks themselves are done using LINQ.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Globalization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Helpers.Extensions</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Helpers</span>
<span class="p">{</span>
    <span class="c1">///&lt;summary&gt;</span>
    <span class="c1">/// Helper to make sure the passed parameters are correct.</span>
    <span class="c1">///&lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Guard</span>
    <span class="p">{</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Determines whether the typeToAssign can be assigned to the targetType</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;typeToAssign&quot;&gt;The type to assign.&lt;/param&gt;</span>
        <span class="c1">///&lt;param name=&quot;targetType&quot;&gt;Type of the target.&lt;/param&gt;</span>
        <span class="c1">///&lt;exception cref=&quot;ArgumentException&quot;&gt;The types can&#39;t be assigned.&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">CanBeAssigned</span><span class="p">(</span><span class="n">Type</span> <span class="n">typeToAssign</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">typeToAssign</span><span class="p">.</span><span class="n">CanBeAssignedTo</span><span class="p">(</span><span class="n">targetType</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">CurrentCulture</span><span class="p">,</span> <span class="n">targetType</span><span class="p">.</span><span class="n">IsInterface</span> <span class="p">?</span>
                    <span class="s">&quot;Type {0} can not be assigned to {1}: interface is not implemented.&quot;</span> <span class="p">:</span>
                    <span class="s">&quot;Type {0} can not be assigned to {1}.&quot;</span><span class="p">,</span> <span class="n">typeToAssign</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">targetType</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks the guids to ensure they are not empty.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;arguments&quot;&gt;The arguments.&lt;/param&gt;</span>
        <span class="c1">///&lt;exception cref=&quot;ArgumentException&quot;&gt;Some of the guids are empty.&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">GuidNotEmpty</span><span class="p">(</span><span class="k">params</span> <span class="n">Guid</span><span class="p">[]</span> <span class="n">arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Boolean</span> <span class="n">faultyArguments</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">t</span> <span class="k">in</span> <span class="n">arguments</span>
                                       <span class="k">where</span> <span class="n">t</span> <span class="p">==</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span>
                                       <span class="k">select</span> <span class="n">t</span><span class="p">).</span><span class="n">Any</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">faultyArguments</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">MethodBase</span> <span class="n">methodBase</span> <span class="p">=</span> <span class="n">GetCallingMethod</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;Some guids are empty: &quot;</span> <span class="p">+</span>
                    <span class="n">CreateMethodMessage</span><span class="p">(</span><span class="n">methodBase</span><span class="p">,</span> <span class="n">arguments</span><span class="p">.</span><span class="n">ToObjectArray</span><span class="p">());</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks the dates to ensure they are in the future.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;arguments&quot;&gt;The arguments.&lt;/param&gt;</span>
        <span class="c1">///&lt;exception cref=&quot;ArgumentException&quot;&gt;Some of the dates are in the past.&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">InTheFuture</span><span class="p">(</span><span class="k">params</span> <span class="n">DateTime</span><span class="p">[]</span> <span class="n">arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Boolean</span> <span class="n">faultyArguments</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">t</span> <span class="k">in</span> <span class="n">arguments</span>
                                       <span class="k">where</span> <span class="p">!</span><span class="n">t</span><span class="p">.</span><span class="n">InTheFuture</span><span class="p">()</span>
                                       <span class="k">select</span> <span class="n">t</span><span class="p">).</span><span class="n">Any</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">faultyArguments</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">MethodBase</span> <span class="n">methodBase</span> <span class="p">=</span> <span class="n">GetCallingMethod</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;Not all passed dates are in the past: &quot;</span> <span class="p">+</span>
                    <span class="n">CreateMethodMessage</span><span class="p">(</span><span class="n">methodBase</span><span class="p">,</span> <span class="n">arguments</span><span class="p">.</span><span class="n">ToObjectArray</span><span class="p">());</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks the dates to ensure they are in the past.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;arguments&quot;&gt;The arguments.&lt;/param&gt;</span>
        <span class="c1">///&lt;exception cref=&quot;ArgumentException&quot;&gt;Some of the dates are in the future.&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">InThePast</span><span class="p">(</span><span class="k">params</span> <span class="n">DateTime</span><span class="p">[]</span> <span class="n">arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Boolean</span> <span class="n">faultyArguments</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">t</span> <span class="k">in</span> <span class="n">arguments</span>
                                       <span class="k">where</span> <span class="p">!</span><span class="n">t</span><span class="p">.</span><span class="n">InThePast</span><span class="p">()</span>
                                       <span class="k">select</span> <span class="n">t</span><span class="p">).</span><span class="n">Any</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">faultyArguments</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">MethodBase</span> <span class="n">methodBase</span> <span class="p">=</span> <span class="n">GetCallingMethod</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;Not all passed dates are in the past: &quot;</span> <span class="p">+</span>
                    <span class="n">CreateMethodMessage</span><span class="p">(</span><span class="n">methodBase</span><span class="p">,</span> <span class="n">arguments</span><span class="p">.</span><span class="n">ToObjectArray</span><span class="p">());</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks the arguments to ensure they aren&#39;t null.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;arguments&quot;&gt;The arguments.&lt;/param&gt;</span>
        <span class="c1">///&lt;exception cref=&quot;ArgumentException&quot;&gt;Some of the arguments are null.&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">NotNull</span><span class="p">(</span><span class="k">params</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Boolean</span> <span class="n">faultyArguments</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">faultyArguments</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">t</span> <span class="k">in</span> <span class="n">arguments</span>
                                        <span class="k">where</span> <span class="n">t</span> <span class="p">==</span> <span class="k">null</span>
                                           <span class="k">select</span> <span class="n">t</span><span class="p">).</span><span class="n">Any</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">ArgumentNullException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">faultyArguments</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">faultyArguments</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">MethodBase</span> <span class="n">methodBase</span> <span class="p">=</span> <span class="n">GetCallingMethod</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;&lt;NULL&gt; has been passed: &quot;</span> <span class="p">+</span>
                    <span class="n">CreateMethodMessage</span><span class="p">(</span><span class="n">methodBase</span><span class="p">,</span> <span class="n">arguments</span><span class="p">);</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks the arguments to ensure they aren&#39;t null, empty or whitespace.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;arguments&quot;&gt;The arguments.&lt;/param&gt;</span>
        <span class="c1">///&lt;exception cref=&quot;ArgumentException&quot;&gt;Some of the arguments are null, empty or whitespace.&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">NotNullOrWhiteSpace</span><span class="p">(</span><span class="k">params</span> <span class="n">String</span><span class="p">[]</span> <span class="n">arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Boolean</span> <span class="n">faultyArguments</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">faultyArguments</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">t</span> <span class="k">in</span> <span class="n">arguments</span>
                                   <span class="k">where</span> <span class="n">t</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">()</span>
                                   <span class="k">select</span> <span class="n">t</span><span class="p">).</span><span class="n">Any</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">ArgumentNullException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">faultyArguments</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">faultyArguments</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">MethodBase</span> <span class="n">methodBase</span> <span class="p">=</span> <span class="n">GetCallingMethod</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;&lt;NULL&gt;, empty or whitespace has been passed: &quot;</span> <span class="p">+</span>
                    <span class="n">CreateMethodMessage</span><span class="p">(</span><span class="n">methodBase</span><span class="p">,</span> <span class="n">arguments</span><span class="p">);</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks if the start datetime is before the end datetime.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;start&quot;&gt;The start datetime.&lt;/param&gt;</span>
        <span class="c1">///&lt;param name=&quot;end&quot;&gt;The end datetime.&lt;/param&gt;</span>
        <span class="c1">///&lt;exception cref=&quot;ArgumentException&quot;&gt;The start datetime is after or equal to end datetime.&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">StartBeforeEnd</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">start</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">end</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">start</span><span class="p">.</span><span class="n">IsBefore</span><span class="p">(</span><span class="n">end</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">MethodBase</span> <span class="n">methodBase</span> <span class="p">=</span> <span class="n">GetCallingMethod</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&quot;The start datetime is after or equal to end datetime: &quot;</span> <span class="p">+</span>
                    <span class="n">CreateMethodMessage</span><span class="p">(</span><span class="n">methodBase</span><span class="p">,</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="p">});</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Gets the calling method.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;returns&gt;&lt;/returns&gt;</span>
        <span class="k">private</span> <span class="k">static</span> <span class="n">MethodBase</span> <span class="nf">GetCallingMethod</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">MethodBase</span> <span class="n">result</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">currentStackTrace</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackTrace</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>

            <span class="kt">int</span> <span class="n">totalFrameCount</span> <span class="p">=</span> <span class="n">currentStackTrace</span><span class="p">.</span><span class="n">FrameCount</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">totalFrameCount</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">result</span> <span class="p">=</span> <span class="n">currentStackTrace</span><span class="p">.</span><span class="n">GetFrame</span><span class="p">(</span><span class="m">0</span><span class="p">).</span><span class="n">GetMethod</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Creates the message.</span>
        <span class="c1">///&lt;/summary&gt;</span>
        <span class="c1">///&lt;param name=&quot;methodBase&quot;&gt;The method base.&lt;/param&gt;</span>
        <span class="c1">///&lt;param name=&quot;arguments&quot;&gt;The arguments.&lt;/param&gt;</span>
        <span class="c1">///&lt;returns&gt;&lt;/returns&gt;</span>
        <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">CreateMethodMessage</span><span class="p">(</span><span class="n">MethodBase</span> <span class="n">methodBase</span><span class="p">,</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">prefix</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">CurrentCulture</span><span class="p">,</span> <span class="s">&quot;Class: {0} - Method: {1} - Args: &quot;</span><span class="p">,</span>
                <span class="p">!</span><span class="n">methodBase</span><span class="p">.</span><span class="n">IsNull</span><span class="p">()</span> <span class="p">?</span>
                <span class="n">methodBase</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">.</span><span class="n">FullName</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="p">!</span><span class="n">methodBase</span><span class="p">.</span><span class="n">IsNull</span><span class="p">()</span> <span class="p">?</span> <span class="n">methodBase</span><span class="p">.</span><span class="n">Name</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">);</span>

            <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">prefix</span><span class="p">);</span>

            <span class="kt">int</span> <span class="n">paramLength</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="kt">bool</span> <span class="n">printArgumentNames</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="n">ParameterInfo</span><span class="p">[]</span> <span class="n">methodParameters</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">arguments</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">paramLength</span> <span class="p">=</span> <span class="n">arguments</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">methodBase</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">methodParameters</span> <span class="p">=</span> <span class="n">methodBase</span><span class="p">.</span><span class="n">GetParameters</span><span class="p">();</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">methodParameters</span><span class="p">.</span><span class="n">Length</span> <span class="p">==</span> <span class="n">paramLength</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">printArgumentNames</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">arguments</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span><span class="p">&lt;</span> <span class="n">arguments</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">((</span><span class="n">printArgumentNames</span><span class="p">))</span>
                    <span class="p">{</span>
                        <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">methodParameters</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Name</span><span class="p">);</span>
                        <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot; = &quot;</span><span class="p">);</span>
                    <span class="p">}</span>

                    <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">);</span>

                    <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">arguments</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">arguments</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="s">&quot;NULL&quot;</span><span class="p">);</span>

                    <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;]&quot;</span><span class="p">);</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">!=</span> <span class="n">arguments</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;No arguments&quot;</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The code is very easy to use. Here are some sample methods:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="nf">NullMethod</span><span class="p">(</span><span class="kt">object</span> <span class="n">object1</span><span class="p">,</span> <span class="kt">object</span> <span class="n">object2</span><span class="p">,</span> <span class="kt">object</span> <span class="n">object3</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Helpers</span><span class="p">.</span><span class="n">Guard</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">object1</span><span class="p">,</span> <span class="n">object2</span><span class="p">,</span> <span class="n">object3</span><span class="p">);</span>

    <span class="c1">//further logic</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">StringsMethod</span><span class="p">(</span><span class="n">String</span> <span class="n">firstName</span><span class="p">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="p">,</span> <span class="n">String</span> <span class="n">residence</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Helpers</span><span class="p">.</span><span class="n">Guard</span><span class="p">.</span><span class="n">NotNullOrWhiteSpace</span><span class="p">(</span><span class="n">firstName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">,</span> <span class="n">residence</span><span class="p">);</span>

    <span class="c1">//further logic</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">GuidMethod</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstGuid</span><span class="p">,</span> <span class="kt">string</span> <span class="n">secondGuid</span><span class="p">,</span> <span class="kt">string</span> <span class="n">thirdGuid</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fourthGuid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Helpers</span><span class="p">.</span><span class="n">Guard</span><span class="p">.</span><span class="n">ParsableToGuid</span><span class="p">(</span><span class="n">firstGuid</span><span class="p">,</span> <span class="n">secondGuid</span><span class="p">,</span> <span class="n">thirdGuid</span><span class="p">);</span>

    <span class="c1">//further logic</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">DateMethod</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">dateTime</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">dateTime_2</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">dateTime_3</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Helpers</span><span class="p">.</span><span class="n">Guard</span><span class="p">.</span><span class="n">DateInThePast</span><span class="p">(</span><span class="n">dateTime</span><span class="p">,</span> <span class="n">dateTime_2</span><span class="p">,</span> <span class="n">dateTime_3</span><span class="p">);</span>

    <span class="c1">//further logic</span>
<span class="p">}</span>
</code></pre></div> <p>Because of the <em>params</em> keyword in the methods of the Guard class, it is possible to pass as much parameters to the method as needed.</p> <p>Obviously, it&#39;s also possible to use multiple checks in one method.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="nf">CombinedMethod</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">dateTime_1</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">dateTime_2</span><span class="p">,</span> <span class="n">String</span> <span class="n">string_1</span><span class="p">,</span> <span class="n">String</span> <span class="n">string_2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Helpers</span><span class="p">.</span><span class="n">Guard</span><span class="p">.</span><span class="n">DateInThePast</span><span class="p">(</span><span class="n">dateTime_1</span><span class="p">,</span> <span class="n">dateTime_2</span><span class="p">);</span>
    <span class="n">Helpers</span><span class="p">.</span><span class="n">Guard</span><span class="p">.</span><span class="n">NotNullOrWhiteSpace</span><span class="p">(</span><span class="n">string_1</span><span class="p">,</span> <span class="n">string_2</span><span class="p">);</span>
    <span class="c1">//further logic</span>
<span class="p">}</span>
</code></pre></div> <p>As for the output, running the following <em>Run</em> method (I am aware of the awkward and rather bad naming, it&#39;s merely to make it obvious how the output will be generated) would throw an exception</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="nf">testMethod</span><span class="p">(</span><span class="n">StringBuilder</span> <span class="n">stringBuilder1</span><span class="p">,</span> <span class="n">StringBuilder</span> <span class="n">builder2</span><span class="p">,</span> <span class="n">StringBuilder</span> <span class="n">object3</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Helpers</span><span class="p">.</span><span class="n">Guard</span><span class="p">.</span><span class="n">NotNull</span><span class="p">(</span><span class="n">stringBuilder1</span><span class="p">,</span> <span class="n">builder2</span><span class="p">,</span> <span class="n">object3</span><span class="p">);</span>

    <span class="c1">//logic</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">StringBuilder</span> <span class="n">builder1</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="n">StringBuilder</span> <span class="n">builder2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">);</span>
    <span class="n">StringBuilder</span> <span class="n">builder3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">(</span><span class="s">&quot;, world!&quot;</span><span class="p">);</span>

    <span class="n">testMethod</span><span class="p">(</span><span class="n">builder1</span><span class="p">,</span> <span class="n">builder2</span><span class="p">,</span> <span class="n">builder3</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <p>with this message. I&#39;ve split it into several lines for readability. The actual message is in one line:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;NULL&gt;</span> has been passed: Class: Thuriot.Tests.GuardTest - Method: testMethod -
Args: stringBuilder1 = [NULL], builder2 = [Hello], object3 = [, world!]
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Testing for exceptions]]></title> <description><![CDATA[Every piece of software should at least have unit tests. Quite a few of these tests will probably be used to see if the method is correctly throwing an exception when needed. ]]></description> <link>http://localhost:4000/testing-for-exceptions</link> <guid isPermaLink="true">http://localhost:4000/testing-for-exceptions</guid> <pubDate>2010-12-30T12:51:00+00:00</pubDate> <content:encoded><![CDATA[<p>Every piece of software should at least have unit tests. Quite a few of these tests will probably be used to see if the method is correctly throwing an exception when needed.</p> <p>However, often the unit test&#39;s <em>ExpectedException</em> attribute just doesn&#39;t cut it. Imagine having two possible exceptions thrown from a certain method, both having the same exception type but different messages. To make testing for this easier, I wrote a little helper class!</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class="p">;</span>
<span class="k">namespace</span> <span class="nn">Assertion.Test</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AssertHelper</span>
    <span class="p">{</span>
        <span class="c1">///&lt;summary&gt;</span>
        <span class="c1">/// Checks of the action throws the specified Exception.</span>
        <span class="c1">/// It also checks if the messages are the same.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;typeparam name=&quot;T&quot;&gt;The type of exception to be thrown.&lt;/typeparam&gt;</span>
        <span class="c1">/// &lt;param name=&quot;action&quot;&gt;The action to be performed.&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name=&quot;expectedMessage&quot;&gt;The expected message.&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Throws</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Action</span> <span class="n">action</span><span class="p">,</span> <span class="n">String</span> <span class="n">expectedMessage</span><span class="p">)</span>
             <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">Exception</span>
        <span class="p">{</span>
            <span class="n">Boolean</span> <span class="n">fail</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">action</span><span class="p">.</span><span class="n">Invoke</span><span class="p">();</span>
                <span class="n">fail</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exc</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="n">exc</span><span class="p">.</span><span class="n">GetType</span><span class="p">(),</span>
                         <span class="s">&quot;An exception of the wrong type was thrown ({0} instead of {1}).&quot;</span><span class="p">,</span>
                         <span class="n">exc</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="n">expectedMessage</span><span class="p">,</span> <span class="n">exc</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="s">&quot;The messages are not equal.&quot;</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">fail</span><span class="p">)</span>
                <span class="n">Assert</span><span class="p">.</span><span class="n">Fail</span><span class="p">(</span><span class="s">&quot;Exception of type {0} should have been thrown.&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">Name</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>This method will check if the exception gets thrown, if it throws the correct type of exception and if the message is correct!</p> <p>Using it goes as follows:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">AssertHelper</span><span class="p">.</span><span class="n">Throws</span><span class="p">&lt;</span><span class="n">RepositoryException</span><span class="p">&gt;</span>
<span class="p">(</span>
    <span class="p">()</span> <span class="p">=&gt;</span> <span class="kt">object</span><span class="p">.</span><span class="n">Method</span><span class="p">(),</span>
    <span class="s">&quot;This is the exception&#39;s message!&quot;</span>
<span class="p">);</span>
</code></pre></div> <p>The generic refers to the exception that you are expecting. The first parameter is the method that will be called, the second is the message that the thrown exception will show.</p> ]]></content:encoded> </item> <item> <title><![CDATA[Multilanguage using Resource files (resx) in C# .NET]]></title> <description><![CDATA[I&#39;m currently working on a little helper framework and started placing all my strings in a resource file to keep my code as tidy as possible. ]]></description> <link>http://localhost:4000/multilanguage-using-resource-files-resx-in-c-net</link> <guid isPermaLink="true">http://localhost:4000/multilanguage-using-resource-files-resx-in-c-net</guid> <pubDate>2011-05-15T13:09:00+00:00</pubDate> <content:encoded><![CDATA[<p>I&#39;m currently working on a little helper framework and started placing all my strings in a resource file to keep my code as tidy as possible.</p> <p>At this point I started wondering, what if people want to use my framework, but don&#39;t want these messages appearing in English? Or even just want to slightly change the formatting of the messages I&#39;m placing in my resource file?</p> <p>&quot;Okay&quot;, I thought, &quot;I&#39;ll just change the resource file from embedded to external, then people can change it all they want&quot;. Sadly, things are never as easy as they may appear. Resource files need to be compiled as they have a code behind, thus you can&#39;t just make them external. Writing an entire reader wasn&#39;t an option for me either, as I found that way too much overhead, both for the speed of the framework as the work for the programmer. I also wanted to keep the easy-to-use resource files in my solution.</p> <p>&quot;Time for a new plan&quot;, I said to myself. &quot;We could create a second project file and place our resources in there. We could then release this project as an open source project so people could easily compile it into a DLL that the framework would use&quot;. It&#39;s quite obvious that your first ideas are never the good ones. Overcomplicating everything can sometimes be far too easy. Time to step back, relax and really start thinking things through. At this point I decided to take a look at how the code behind these resource files actually worked. They&#39;re actually fairly easy put together. For everything you put in your resource file, one getter property is generated. This getter property will refer to a resource manager that will read in the resource file. Right there and then, I saw the light!</p> <p>&quot;I&#39;ll just give people access to the resource manager&#39;s setter. Then they can replace it with their own!&quot;. A step in the right direction, but not there just yet. The problem is that this property does not have a setter. It only has a getter with a private backing field that gets initialized during the first call to it. Adding a setter wasn&#39;t an option, as every time you change something in your resource file, it will regenerate your code behind. If you forget about this setter, change something in your resource file and release your newly compiled framework, you will break people&#39;s code because your setter will be missing! A second idea was to create a partial class that had a property with getter and setter, giving access to this private field. While this seemed great, the problem is that the code behind the resource file is not a partial class. So every time you&#39;d change something, it would be regenerated again and you&#39;d have to place in the &quot;partial&quot; keyword to make your code compile again. You&#39;d also have two properties that more or less have the same functionality. It would also mean that my resource file had to be public, right in plain sight for everyone to see. At least you wouldn&#39;t be breaking other&#39;s code any more though. But no, this was <em>not</em> good enough. I had to think of something that worked completely independent of my resource class.</p> <p>I figured I&#39;d make a static <em>Settings</em> class. In this class I&#39;d place a property that accepts a resource manager. It looks like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="c1">///&lt;summary&gt;</span>
 <span class="c1">/// In case the default resource implementation does not suffice (e.g. you desire a translation),</span>
 <span class="c1">/// it is possible to replace it by your own.</span>
 <span class="c1">/// If the new resource manager doesn&#39;t have all the needed resources, it will not be set.</span>
 <span class="c1">///&lt;/summary&gt;</span>
 <span class="k">public</span> <span class="k">static</span> <span class="n">ResourceManager</span> <span class="n">Resource</span>
 <span class="p">{</span>
     <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">MyFrameworkResourceFile</span><span class="p">.</span><span class="n">ResourceManager</span><span class="p">;</span> <span class="p">}</span>
     <span class="k">set</span> <span class="p">{</span> <span class="n">SetResource</span><span class="p">(</span><span class="k">value</span><span class="p">);</span> <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div> <p>My setter has a call to a method to check if the new resource manager is compatible. It will check if all the keys defined in my resource file are also present in the new file. Because a private field has to be set, it will use reflection to get to this goal. Checking if the keys are present will also be done using reflection. The method is implemented like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="c1">///&lt;summary&gt;</span>
 <span class="c1">/// Test if the new resource manager has all the needed resources.</span>
 <span class="c1">/// If it misses one or more values, it will keep the current resource manager.</span>
 <span class="c1">///&lt;/summary&gt;</span>
 <span class="c1">///&lt;param name=&quot;resourceManager&quot;&gt;The new resource manager.&lt;/param&gt;</span>
 <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetResource</span><span class="p">(</span><span class="n">ResourceManager</span> <span class="n">resourceManager</span><span class="p">)</span>
 <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">resourceManager</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">newKeys</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Collection</span><span class="p">();</span>

    <span class="kt">var</span> <span class="n">newResourceSet</span> <span class="p">=</span> <span class="n">resourceManager</span><span class="p">.</span><span class="n">GetResourceSet</span><span class="p">(</span><span class="n">Culture</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">true</span><span class="p">).</span><span class="n">GetEnumerator</span><span class="p">();</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">newResourceSet</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">())</span>
        <span class="n">newKeys</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">newResourceSet</span><span class="p">.</span><span class="n">Key</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>

    <span class="kt">var</span> <span class="n">resourceType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MyFrameworkResourceFile</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">properties</span> <span class="p">=</span> <span class="n">resourceType</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span> <span class="p">|</span> <span class="p">(</span><span class="n">resourceType</span><span class="p">.</span><span class="n">IsPublic</span>
                                         <span class="p">?</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span>
                                         <span class="p">:</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">));</span>

    <span class="kt">var</span> <span class="n">foundAllKeys</span> <span class="p">=</span> <span class="n">properties</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
                                 <span class="p">.</span><span class="n">Intersect</span><span class="p">(</span><span class="n">newKeys</span><span class="p">)</span>
                                 <span class="p">.</span><span class="n">Count</span><span class="p">()</span> <span class="p">==</span> <span class="p">(</span><span class="n">properties</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="m">2</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(!</span><span class="n">foundAllKeys</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">resourceManagerField</span> <span class="p">=</span> <span class="n">resourceType</span><span class="p">.</span><span class="n">GetField</span><span class="p">(</span><span class="s">&quot;resourceMan&quot;</span><span class="p">,</span>
                                    <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">resourceManagerField</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="n">resourceManagerField</span><span class="p">.</span><span class="n">SetValue</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">resourceManager</span><span class="p">);</span>
 <span class="p">}</span>
</code></pre></div> <p>I can already hear what you are thinking... &quot;But reflection is slow and you shouldn&#39;t use it&quot;. I couldn&#39;t agree more that it is slow. Well, slower. Completely not using it is something I don&#39;t fully agree on, however. There are cases where reflection works out quite well. As long as you don&#39;t start running it on huge lists or in for loops that run 100.000 times, reflection will always be an option for me.</p> <p>I did some tests on the time it takes, just to give you an idea and to show you it&#39;s really not that bad. For this I created a resource file with <strong>200</strong> lines of resources (thus a code behind with 202 properties, as it also has a property for its resource manager and its culture).</p> <p>Running it once successfully took an average of <strong>0.016</strong> seconds. Not that bad, huh? Running it 25.000 times still took less than <strong>5</strong> seconds. So, depending on how big your framework&#39;s resource file will be, this method will add at most 5 milliseconds to the start up time, which is quite acceptable. Especially since it makes both your as the user&#39;s life a lot easier.</p> <p>As for the user, all (s)he would have to do is create their own resource file and insert all of the keys that are in the original resource file as well. It doesn&#39;t matter if there are other keys as well that you want to use in your own application. The runtime of the method will not be affected by this as it will only check for the needed properties, thus skipping all of the other ones. All you have to do is make sure that the resource file has a code behind as well, though it doesn&#39;t matter if it is set to internal or public. Both work the same. Actually setting your custom resource file would work like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Settings</span><span class="p">.</span><span class="n">Resource</span> <span class="p">=</span> <span class="n">MyCustomResourceFile</span><span class="p">.</span><span class="n">ResourceManager</span><span class="p">;</span>
</code></pre></div> <p>It&#39;s as simple as that!</p> <hr> <p><strong>[IMPORTANT] Edit:</strong></p> <p>Since this post has been receiving quite a few questions that can be solved in much easier ways, I will try to clarify my intentions a bit.</p> <p>The code supplied in my post gives the user of your framework more freedom to tinker with the actual resources when using your dll without having to do anything too fancy, e.g. change existing main resources or change things during runtime without changing the current culture. </p> <p>All in all, if all you want to do is supply a new non-supported language for your dll or any third party dll that you have the resx file for, supplying a completely new resource dll is the <strong>best</strong> way to go. Your users can then just create their own resx file and compile it into a satellite resource assembly using <a href="http://msdn.microsoft.com/en-us/library/ccec7sz1.aspx">Resource File Generator</a> to compile the <em>resx</em> to a <em>.resources</em> file and then compile that file to a <em>resources.dll</em> using <a href="http://msdn.microsoft.com/en-us/library/c405shex.aspx">Assembly Linker</a>.</p> <p>If we&#39;d want to compile a resource file for the en-US culture, commands would be as following:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">resgen.exe /compile xxx.en-US.resx
al.exe /out:TheApplication.xxx.en-US.resources.dll /embedresource: xxx.en-US.resources
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Avoid Count() methods]]></title> <description><![CDATA[At work I&#39;m currently working with [dotTrace](http://www.jetbrains.com/profiler/) to check the performance of our application. A few of our issues were quickly traced back to the faulty usage of the Count() extension method. ]]></description> <link>http://localhost:4000/avoid-count-methods</link> <guid isPermaLink="true">http://localhost:4000/avoid-count-methods</guid> <pubDate>2011-08-22T18:50:00+00:00</pubDate> <content:encoded><![CDATA[<p>At work I&#39;m currently working with <a href="http://www.jetbrains.com/profiler/">dotTrace</a> to check the performance of our application. A few of our issues were quickly traced back to the faulty usage of the Count() extension method.</p> <p>Count() should be avoided as much as possible on IEnumerables. Count() is optimized to check for Count or Length properties, but if the used list doesn&#39;t have these implemented, Count() will iterate the entire list. We have a few fairly large lists in our application, so that quickly consumes quite a bit of time to run all the Count()&#39;s. Unless you&#39;re interested in the exact size of your list, I would say to avoid this method at all costs. However, even in this case there are a few better options.</p> <p>The most interesting option is to check with what kind of list you&#39;re working with. Lists like Collection, Array, List, ... either have a Length or Count property. This property is just a simple int that is already stored in the memory. It doesn&#39;t get much faster than this. The cost of calling these properties is neglectable. If the full size of your list is really important for your use case, it might pay off to switch to one of these types of lists.</p> <p>In case you&#39;re not interested in the full size of the list and don&#39;t want to or can&#39;t use a list that implements one of these properties, don&#39;t worry, there are a few other tips and tricks to handle these. I noticed that most of the time, Count() is used to check if there are any items in the list (<strong>Count() &gt; 0 , != 0 or == 0</strong> ). In this case it&#39;s much more interesting to use the LINQ Any() extension method. This method will check if there is one item in the list and return the result as a boolean. On a big list, you gain quite a bit of performance. Another common misusage of Count() is <strong>Where(...).Count() &gt; 0</strong>. In this case, it&#39;s far better to use <strong>Any(...)</strong>. In case 0 isn&#39;t the number you&#39;re checking against, it&#39;s still better to use <strong>Count(...)</strong>  instead and drop <strong>Where(...)</strong>. Since <strong>Where</strong> is lazy, it won&#39;t matter much for performance, but I find that the readability of what you are trying to do is increased greatly.</p> <p>For all the other cases, I wrote a few extension methods so it&#39;s possible to completely avoid using Count(). The idea behind these extension methods is that the list you&#39;re checking usually has a lot more items in it than the number you&#39;re checking against, for instance <strong>&gt; 2</strong> on a list of 300 items. On these kinds of checks, my extension methods truly shine. Rather than counting the whole list, they count x+1 items from the list, where x is the number you&#39;re checking against. You don&#39;t need to do any more counting than x+1 as you can check any of the conditions with this amount. This way, the actual counting is reduced greatly. When used correctly, the average cost will be a lot lower than using <strong>Count()</strong>. All of the extension methods also have an overload to allow you to specify a <strong>Where(...)</strong> clause so it can do everything in one go, rather than having to do a <strong>Where(...)</strong> first and a <strong>Count()</strong> after.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;comparePredicate&quot;&gt;The comparison function.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;The result of the passed predicate.&lt;/returns&gt;</span>
<span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">OptimizedCount</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">comparePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">enumerable</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">numberOfItems</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">return</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">wherePredicate</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">enumerable</span> <span class="p">=</span> <span class="n">enumerable</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">wherePredicate</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">numberOfItemsToCount</span> <span class="p">=</span> <span class="k">checked</span><span class="p">(</span><span class="n">numberOfItems</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">countedItems</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">enumerator</span> <span class="p">=</span> <span class="n">enumerable</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">enumerator</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">countedItems</span> <span class="p">&lt;</span> <span class="n">numberOfItemsToCount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">countedItems</span><span class="p">++;</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="n">returnValue</span> <span class="p">=</span> <span class="n">comparePredicate</span><span class="p">(</span><span class="n">countedItems</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">returnValue</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountEqualTo</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">==</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountLessThan</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountGreaterThan</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountLessOrEqualTo</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&lt;=</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountGreaterOrEqualTo</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;=</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <p>A few more tips and tricks regarding <strong>Count()</strong>&#39;s. Do not use them in the check condition of for-loops. It will be executed every loop, causing a severe performance issue.</p> <p>Another, in my opinion, interesting optimization is the following one:</p> <p>Original code where the sublist is a Collection:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SubList</span><span class="p">).</span><span class="n">Count</span><span class="p">();</span>
</code></pre></div> <p>Optimized code:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Sum</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SubList</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</code></pre></div> <p>This way it will only make the sum of a few integers, which is much faster than creating one big list in memory, then count all the items.</p> ]]></content:encoded> </item> <item> <title><![CDATA[Modal Message Box for WinForms in .NET 2.0+]]></title> <description><![CDATA[The other day at work I felt the need to show the user a message, but wanted to do it a bit more fancy than just use the regular, old, boring MessageBox. ]]></description> <link>http://localhost:4000/modal-message-box-for-winforms-in-net-2-0</link> <guid isPermaLink="true">http://localhost:4000/modal-message-box-for-winforms-in-net-2-0</guid> <pubDate>2012-01-12T19:40:00+00:00</pubDate> <content:encoded><![CDATA[<p>The other day at work I felt the need to show the user a message, but wanted to do it a bit more fancy than just use the regular, old, boring MessageBox. </p> <p>I personally really enjoy the &quot;LightBox effect&quot; where the background darkens and the LightBox popped up. Because of the way WinForms work, this wasn&#39;t as simple as I was hoping it would be. I worked out a little solution and decided to share.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ModalMessageBox</span> <span class="p">:</span> <span class="n">Form</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nf">ModalMessageBox</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;parent&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">message</span><span class="p">))</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">font</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;font&quot;</span><span class="p">);</span>

        <span class="n">InitializeComponent</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeOKButton</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">okButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">OK</span><span class="p">,</span>
                            <span class="p">};</span>

        <span class="n">okButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">okButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">11</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">okButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>


        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">okButton</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeYesNoButtons</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">noButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;No&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">No</span>
                            <span class="p">};</span>

        <span class="n">noButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">11</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">noButton</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">yesButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Yes&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">Yes</span>
                            <span class="p">};</span>

        <span class="n">yesButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">yesButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">16</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">yesButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">yesButton</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeComponent</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">SuspendLayout</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">questionLabel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Label</span>
                                <span class="p">{</span>
                                    <span class="n">Anchor</span> <span class="p">=</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Top</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Left</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">,</span>
                                    <span class="n">BackColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
                                    <span class="n">BorderStyle</span> <span class="p">=</span> <span class="n">BorderStyle</span><span class="p">.</span><span class="n">FixedSingle</span><span class="p">,</span>
                                    <span class="n">Font</span> <span class="p">=</span> <span class="n">font</span><span class="p">,</span>
                                    <span class="n">ForeColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
                                    <span class="n">ImeMode</span> <span class="p">=</span> <span class="n">ImeMode</span><span class="p">.</span><span class="n">NoControl</span><span class="p">,</span>
                                    <span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">42</span><span class="p">),</span>
                                    <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span>
                                    <span class="n">Text</span> <span class="p">=</span> <span class="n">message</span><span class="p">,</span>
                                    <span class="n">TextAlign</span> <span class="p">=</span> <span class="n">ContentAlignment</span><span class="p">.</span><span class="n">MiddleCenter</span>
                                <span class="p">};</span>

        <span class="kt">var</span> <span class="n">height</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">78</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">height</span> <span class="p">&gt;</span> <span class="m">300</span><span class="p">)</span>
            <span class="n">height</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span>

        <span class="n">questionLabel</span><span class="p">.</span><span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">20</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>

        <span class="n">MaximizeBox</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">MinimizeBox</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">ShowInTaskbar</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">SizeGripStyle</span> <span class="p">=</span> <span class="n">SizeGripStyle</span><span class="p">.</span><span class="n">Hide</span><span class="p">;</span>
        <span class="n">FormBorderStyle</span> <span class="p">=</span> <span class="n">FormBorderStyle</span><span class="p">.</span><span class="n">None</span><span class="p">;</span>

        <span class="n">StartPosition</span> <span class="p">=</span> <span class="n">FormStartPosition</span><span class="p">.</span><span class="n">Manual</span><span class="p">;</span>
        <span class="n">ClientSize</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">+</span> <span class="m">2</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">+</span> <span class="m">2</span><span class="p">);</span>

        <span class="n">Rectangle</span> <span class="n">screenRectangle</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">RectangleToScreen</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientRectangle</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">titleHeight</span> <span class="p">=</span> <span class="n">screenRectangle</span><span class="p">.</span><span class="n">Top</span> <span class="p">-</span> <span class="n">parent</span><span class="p">.</span><span class="n">Top</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">borderWidth</span> <span class="p">=</span> <span class="n">screenRectangle</span><span class="p">.</span><span class="n">Left</span> <span class="p">-</span> <span class="n">parent</span><span class="p">.</span><span class="n">Left</span><span class="p">;</span>

        <span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">borderWidth</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">Y</span> <span class="p">+</span> <span class="n">titleHeight</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>

        <span class="n">TransparencyKey</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightSteelBlue</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">hatchBrush</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HatchBrush</span><span class="p">(</span><span class="n">HatchStyle</span><span class="p">.</span><span class="n">Percent50</span><span class="p">,</span> <span class="n">TransparencyKey</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">backgroundImage</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="m">50</span><span class="p">,</span> <span class="m">50</span><span class="p">);</span>

        <span class="n">Graphics</span> <span class="n">imageGraphics</span> <span class="p">=</span> <span class="n">Graphics</span><span class="p">.</span><span class="n">FromImage</span><span class="p">(</span><span class="n">backgroundImage</span><span class="p">);</span>
        <span class="n">imageGraphics</span><span class="p">.</span><span class="n">FillRectangle</span><span class="p">(</span><span class="n">hatchBrush</span><span class="p">,</span> <span class="n">DisplayRectangle</span><span class="p">);</span>

        <span class="n">AllowTransparency</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="n">backgroundImage</span><span class="p">.</span><span class="n">MakeTransparent</span><span class="p">(</span><span class="n">TransparencyKey</span><span class="p">);</span>

        <span class="n">BackColor</span> <span class="p">=</span> <span class="n">TransparencyKey</span><span class="p">;</span>
        <span class="n">BackgroundImage</span> <span class="p">=</span> <span class="n">backgroundImage</span><span class="p">;</span>
        <span class="n">BackgroundImageLayout</span> <span class="p">=</span> <span class="n">ImageLayout</span><span class="p">.</span><span class="n">Tile</span><span class="p">;</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">questionLabel</span><span class="p">);</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">buttons</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">OK</span><span class="p">:</span>
                <span class="n">InitializeOKButton</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">YesNo</span><span class="p">:</span>
                <span class="n">InitializeYesNoButtons</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(</span><span class="s">&quot;buttons&quot;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">ResumeLayout</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Show</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">OK</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Show</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">Font</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">delegate</span> <span class="n">DialogResult</span> <span class="nf">ShowDelegate</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">);</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">ShowDelegate</span> <span class="n">InternalShow</span> <span class="p">=</span> 
        <span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ModalMessageBox</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">).</span><span class="n">ShowDialog</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">InvokeRequired</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">InternalShow</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">DialogResult</span><span class="p">)</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nf">InternalShow</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The result looks like this:</p> <p>Before the pop-up <a href="//cdn.thuriot.be/ModalMessageBox/Input1.png"><img src="//cdn.thuriot.be/ModalMessageBox/Input1.png" alt="Input before the message pops up"></a></p> <p>After the pop-up <a href="//cdn.thuriot.be/ModalMessageBox/Input2.png"><img src="//cdn.thuriot.be/ModalMessageBox/Input2.png" alt="Input after the message pops up"></a></p> ]]></content:encoded> </item> <item> <title><![CDATA[Nuget Build And Deploy]]></title> <description><![CDATA[After attending [Scott Hanselman](http://www.hanselman.com)&#39;s [session at Techdays](http://channel9.msdn.com/Events/TechDays/TechDays-2011-Belgium/KEY01), I was really excited about [NuGet](http://nuget.org/). It&#39;s so easy to use and so versatile. Only one thing bothered me, and that is actually building your own NuGet package. First you need to let it generate a nuspec file, fill in everything by hand and only then you can let it generate your NuGet package. Then you need to update said NuSpec file everything something of relevance changes.  It&#39;s not a hard thing to do, it&#39;s just a bit bothersome and we&#39;d be off better if this was automated to some point. ]]></description> <link>http://localhost:4000/nuget-build-and-deploy</link> <guid isPermaLink="true">http://localhost:4000/nuget-build-and-deploy</guid> <pubDate>2012-03-05T18:41:00+00:00</pubDate> <content:encoded><![CDATA[<p>After attending <a href="http://www.hanselman.com">Scott Hanselman</a>&#39;s <a href="http://channel9.msdn.com/Events/TechDays/TechDays-2011-Belgium/KEY01">session at Techdays</a>, I was really excited about <a href="http://nuget.org/">NuGet</a>. It&#39;s so easy to use and so versatile. Only one thing bothered me, and that is actually building your own NuGet package. First you need to let it generate a nuspec file, fill in everything by hand and only then you can let it generate your NuGet package. Then you need to update said NuSpec file everything something of relevance changes.  It&#39;s not a hard thing to do, it&#39;s just a bit bothersome and we&#39;d be off better if this was automated to some point.</p> <p>So I started working on a little tool to help me build my NuSpec on the fly and create a NuGet package right away and potentially use this as a Visual Studio&#39;s build event.</p> <p>The post build event can be implemented like this:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">if &quot;$(ConfigurationName)&quot; == &quot;Release&quot; (  
  del /Q /F *.tmp
  &quot;R:\PathToTheExecutable\NuGet.BuildAndDeploy.exe&quot; /dll &quot;lib\$(TargetFileName)&quot; /outputdir &quot;$(TargetDir)\..&quot; /projectUrl http://thuriot.be/ /tags Small helper framework /dependencies &quot;Ninject 2.2&quot;
)
</code></pre></div> <p>The build output then looks like this:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">------ Rebuild All started: Project: Aikido, Configuration: Release Any CPU ------
  Aikido -<span class="ni">&amp;gt;</span> E:\Projects\Aikido\Release\lib\Aikido.dll
  Generating the NuSpec file for Aikido Framework version 1.0.0.0.

  Finished generating the NuSpec file succesfully.
  Writing NuSpec file... NuSpec file saved succesfully.

  Starting to build the NuGet pack...

  Attempting to build package from &#39;Aikido_Framework.nuspec&#39;.
  Successfully created package &#39;E:\Projects\- NuGet Packages\NuGet Packages\Aikido_Framework.1.0.0.0.nupkg&#39;.

------ Skipped Rebuild All: Project: Aikido.Test, Configuration: Release Any CPU ------
Project not selected to build for this solution configuration 
========== Rebuild All: 1 succeeded, 0 failed, 1 skipped ==========
</code></pre></div> <p>The generated NuSpec file looks like this:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;metadata&gt;</span>
    <span class="nt">&lt;id&gt;</span>Aikido<span class="nt">&lt;/id&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0.0.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;authors&gt;</span>Steven Thuriot<span class="nt">&lt;/authors&gt;</span>
    <span class="nt">&lt;owners&gt;</span>Steven Thuriot<span class="nt">&lt;/owners&gt;</span>
    <span class="nt">&lt;projectUrl&gt;</span>http://thuriot.be/<span class="nt">&lt;/projectUrl&gt;</span>
    <span class="nt">&lt;requireLicenseAcceptance&gt;</span>false<span class="nt">&lt;/requireLicenseAcceptance&gt;</span>
    <span class="nt">&lt;description&gt;</span>Small helper framework<span class="nt">&lt;/description&gt;</span>
    <span class="nt">&lt;tags&gt;</span>Small helper framework<span class="nt">&lt;/tags&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
      <span class="nt">&lt;dependency</span> <span class="na">id=</span><span class="s">&quot;Ninject&quot;</span> <span class="na">version=</span><span class="s">&quot;2.2&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
  <span class="nt">&lt;/metadata&gt;</span>
<span class="nt">&lt;/package&gt;</span>
</code></pre></div> <p>I realise it&#39;s a quick and dirty solution, but for a tool this small and simple it really doesn&#39;t matter, nor is it worth spending a lot more time on it. It took a minimal amount of work to make, it does what it is supposed to do and that is more than enough for its purpose.</p> <p><img src="//cdn.thuriot.be/GithubIcon.png" alt="GitHub"> You can take a look at the source code or download a built assembly on <a href="https://github.com/StevenThuriot/NuGet-Build-And-Deploy">GitHub</a>.</p> <p>Enjoy!</p> ]]></content:encoded> </item> <item> <title><![CDATA[NuGet Guidance]]></title> <description><![CDATA[Sometimes a NuGet package can contain complex install logic. When this is the case, it can be a real hassle for a C# programmer to write all the code in powershell. ]]></description> <link>http://localhost:4000/nuget-guidance</link> <guid isPermaLink="true">http://localhost:4000/nuget-guidance</guid> <pubDate>2012-04-07T17:22:00+00:00</pubDate> <content:encoded><![CDATA[<p>Sometimes a NuGet package can contain complex install logic. When this is the case, it can be a real hassle for a C# programmer to write all the code in powershell. </p> <p>This project is a hoster for any &quot;recipe&quot; you include in your nuget package. Using MEF, the recipes will run inside this hoster project.</p> <p>For your convenience, all you have to do is inherit BaseRecipe when creating new recipes.</p> <p>Sample usage:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">NuGetGuidance.Domain</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Recipe</span> <span class="p">:</span> <span class="n">BaseRecipe</span> 
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Execute</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">Prompt</span><span class="p">(</span><span class="s">&quot;Server URI&quot;</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>
        <span class="n">Log</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&quot;Received input: {0}&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">project</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadAllText</span><span class="p">(</span><span class="n">Project</span><span class="p">.</span><span class="n">FullName</span><span class="p">);</span>

        <span class="c1">//Do stuff  </span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> </channel> </rss>