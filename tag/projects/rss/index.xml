<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; Projects]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/tag/projects/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[HyperQube]]></title> <description><![CDATA[[HyperQube](https://github.com/StevenThuriot/HyperQube) is(/started as) an IFTTT variant, built on top of PushBullet, created for the desktop. ]]></description> <link>//steven.thuriot.be/hyperqube</link> <guid isPermaLink="true">//steven.thuriot.be/hyperqube</guid> <pubDate>2014-09-23T17:22:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/cube.jpg" medium="image"/> <content:encoded><![CDATA[<p><a href="https://github.com/StevenThuriot/HyperQube">HyperQube</a> is(/started as) an IFTTT variant, built on top of PushBullet, created for the desktop.</p> <p>It connects to PushBullet&#39;s websocket using the API key provided in your account settings. It filters out the messages the plugins are interested in using <a href="https://github.com/Reactive-Extensions">Reactive Extensions</a>.</p> <p>Deep down, everything is built completely modular so each part is easy to replace by another component (loaded by MEF). (e.g. input can easily be replaced by another UI, in WPF, WinForms, ...) By default, everything is built with an eye on maximum compatibility. ( .NET / Mono )</p> <h1>Building plugins</h1> <p>A sample project has been set up <a href="https://github.com/steventhuriot/hyperqube-plugins">here</a>.</p> <p>First, create a new project. All you need to start is a reference to <code>HyperQube.Library</code>. To make life easy, a nuget package is available!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Install-Package HyperQube.Library
</code></pre></div> <p>Building a plugin is as simple as implementing an interface. </p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IQube</span>
<span class="p">{</span>
  <span class="kt">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//Textual reference used throughout the project.</span>

  <span class="n">Interests</span> <span class="n">Interests</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//Things you are interested in. This is a flags enum.</span>

  <span class="k">void</span> <span class="nf">Receive</span><span class="p">(</span><span class="kt">dynamic</span> <span class="n">json</span><span class="p">);</span> <span class="c1">//Triggers each time a push message is received.</span>
<span class="p">}</span>
</code></pre></div> <p>Create a new class for your plugin and simply implement the interface.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">class</span> <span class="nc">Qube</span> <span class="p">:</span> <span class="n">IQube</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">Title</span>
  <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&quot;My First Plugin&quot;</span> <span class="p">};</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="n">Interests</span> <span class="n">Interests</span> 
  <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Interests</span><span class="p">.</span><span class="n">Note</span> <span class="p">|</span> <span class="n">Interests</span><span class="p">.</span><span class="n">Mirror</span><span class="p">;</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Receive</span><span class="p">(</span><span class="kt">dynamic</span> <span class="n">json</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">//json contains the full push message in json format, as pushed by PushBullet. </span>
    <span class="c1">//http://docs.pushbullet.com/v2/pushes/</span>

    <span class="c1">//This can be used just like you would do in javascript, using dynamics.</span>

    <span class="c1">//To get the actual message, a helper is available.</span>
    <span class="c1">//This, in return, is a json object.</span>
    <span class="kt">var</span> <span class="n">jsonMessage</span> <span class="p">=</span> <span class="n">Push</span><span class="p">.</span><span class="n">GetBody</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="n">json</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">jsonMessage</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="kt">string</span> <span class="n">message</span> <span class="p">=</span> <span class="n">jsonMessage</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
      <span class="c1">//Do something with your newly acquired message!</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>This will do for basic cases, but in most cases you&#39;ll need to get some I/O going. Since HyperQube uses <code>MEF</code> to build up its infrastructure, you can simply define a constructor with the parameters you need.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[ImportingConstructor]</span>
<span class="k">public</span> <span class="nf">Qube</span><span class="p">(</span><span class="n">IInputProvider</span> <span class="n">inputProvider</span><span class="p">,</span> <span class="n">IOutputProvider</span> <span class="n">outputProvider</span><span class="p">)</span>
<span class="p">{</span>

<span class="p">}</span>
</code></pre></div> <p>The output provider can trace messages (e.g. logging) or visually show messages. In it&#39;s default state, using the <code>Write</code> method of the output provider will show a tooltip coming from the system tray.</p> <p>The input provider can be used to ask the user about some variables in your plugin. In the sample project, this is used to ask the user about their XBMC set up and what exactly they want the plugin to do.</p> <p>The user can be asked about these things by using Questions. A question is a class implementing <code>IQuestion</code>. A few default <a href="https://github.com/StevenThuriot/HyperQube/tree/master/HyperQube.Library/Questions">scenario&#39;s</a> have been implemented already.</p> <ul> <li>CheckBox / Toggle (<a href="https://github.com/StevenThuriot/HyperQube/blob/master/HyperQube.Library/Questions/BooleanQuestion.cs">BooleanQuestion</a>)</li> <li>ComboBox (<a href="https://github.com/StevenThuriot/HyperQube/blob/master/HyperQube.Library/Questions/SelectableQuestion.cs">SelectableQuestion</a>)</li> <li>TextBox / PasswordBox (<a href="https://github.com/StevenThuriot/HyperQube/blob/master/HyperQube.Library/Questions/TextQuestion.cs">TextQuestion</a>)</li> </ul> <p>A question can have two types of validation.</p> <ul> <li>Required field (semi-automatic by setting a simple boolean)</li> <li>Aditional validation by implementing <code>IValidatableQuestion</code> <ul> <li>This interface has a property that supplies a list of <code>IValidation</code> instances.</li> <li>A base class has been supplied to easily implement a validation: <code>Validation</code></li> <li>A validation contains a predicate that returns true if the value in the box is valid.</li> <li>It also contains a message to show when the value is not valid. <ul> <li>Two parameters can be used in these messages that will be replaced at runtime:</li> <li>{title} : The title of the plugin</li> <li>{value} : The value of the box.</li> </ul></li> <li>The sample project contains a few extra implementations that it needs, e.g. <a href="https://github.com/StevenThuriot/HyperQube-Plugins/blob/master/Qube.XBMC/Questions/UriQuestion.cs">a question that asks about a uri</a>.</li> <li>The <code>ValidationMessages</code> class contains a few default messages.</li> </ul></li> </ul> <p>In most cases, you&#39;ll want to trigger the input through the tray icon. You can add menu&#39;s to the tray icon for your plugin by implementing <code>IQubeMenuItem</code>.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IQubeMenuItem</span>
<span class="p">{</span>
  <span class="kt">string</span> <span class="n">MenuTitle</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//The title shown in the tray.</span>
  <span class="k">void</span> <span class="nf">OpenMenu</span><span class="p">();</span> <span class="c1">//The method that gets called when the menu item is clicked.</span>
<span class="p">}</span>
</code></pre></div> <p>If you only have one menu item, the title will actually be the name of your plugin. The <code>MenuTitle</code> is a fallback when your plugin has submenu&#39;s. You can give your plugin submenus by implementing <code>IQubeMenuItemWithSubMenus</code>, which inherits from <code>IQubeMenuItem</code>.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IQubeMenuItemWithSubMenus</span> <span class="p">:</span> <span class="n">IQubeMenuItem</span>
<span class="p">{</span>
  <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IQubeMenuItem</span><span class="p">&gt;</span> <span class="n">SubMenuItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>This way, you can have as many menu&#39;s and submenu&#39;s that you need.</p> <p>After doing all this, simply build your plugin and drop it anywhere in the root or any subfolder of the <code>HyperQube</code> executable. <code>MEF</code> will automatically pick up your new plugin!</p> ]]></content:encoded> </item> <item> <title><![CDATA[AIRTunes]]></title> <description><![CDATA[AIRTunes is an Adobe AIR mp3 player that makes use of the Bedtime Tunes XML file, which delivers bedtime tunes to doze off to and is updated nightly. [^1]: Februari 2012: Due to recent events, I&#39;ve decided to take down the download link for this solution.]]></description> <link>//steven.thuriot.be/airtunes</link> <guid isPermaLink="true">//steven.thuriot.be/airtunes</guid> <pubDate>2012-03-27T13:43:00+00:00</pubDate> <content:encoded><![CDATA[<p>AIRTunes is an Adobe AIR mp3 player that makes use of the Bedtime Tunes XML file, which delivers bedtime tunes to doze off to and is updated nightly.</p> <p><img src="//cdn.thuriot.be/images/AIRTunes/Compact.png" alt="Compact mode"></p> <p>There are two modes available, full mode and compact mode. When starting the application, it will be in compact mode and randomly pick one of the songs in the feed and start playing it. You can either choose to stay in this mode and have the ability to randomly browse all the songs or you can go to full mode.</p> <p><img src="//cdn.thuriot.be/images/AIRTunes/Full.png" alt="Full Mode"></p> <p>In full mode you get a list of all the artists and titles. You can sort these columns by clicking on their headers. Standard, they are sorted by release date. (newest posts first)</p> <p>When the song you are currently listening to is finished, it will randomly pick another song.</p> <p><img src="//cdn.thuriot.be/images/AIRTunes/Timer.png" alt="Timer functions"></p> <p>In the Timer window, you can set a time-out to doze off to. The player will not stop abruptly, but finish playing the current song if it exceeds the chosen time. You can also let the player wake you up at a chosen time, gently waking up for a new day.</p> <p>AIRTunes is available for download here<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>.</p> <hr> <div class="footnotes"> <hr> <ol> <li id="fn1"> <p>Februari 2012: Due to recent events, I&#39;ve decided to take down the download link for this solution.&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p> </li> </ol> </div> ]]></content:encoded> </item> <item> <title><![CDATA[Thuriot.be]]></title> <description><![CDATA[*Note: I&#39;ve switched systems since writing this page. My site is currently running on [Jekyll](http://jekyllrb.com/) with a self-made theme. Before this, I was running on a self-built cms.* ]]></description> <link>//steven.thuriot.be/thuriot-be</link> <guid isPermaLink="true">//steven.thuriot.be/thuriot-be</guid> <pubDate>2011-11-11T15:00:00+00:00</pubDate> <content:encoded><![CDATA[<p><em>Note: I&#39;ve switched systems since writing this page. My site is currently running on <a href="http://jekyllrb.com/">Jekyll</a> with a self-made theme. Before this, I was running on a self-built cms.</em></p> <hr> <p>This site is completely dynamic. It has a MySQL database running behind it. The index.php file functions as a proxy, handling all the requests. It parses the url, asks the database manager for the correct info and displays it.</p> <p><a href="//cdn.thuriot.be/images/Site/Site1.png"><img src="//cdn.thuriot.be/images/Site/Site1_thumb.png" alt="Main view"></a></p> <p>The panel has 4 main sections. The first one is the start page. It will inform you how many pages and users are created at the current time. It will also let you know as which user you are currently logged in.</p> <p><a href="//cdn.thuriot.be/images/Site/Site2.png"><img src="//cdn.thuriot.be/images/Site/Site2_thumb.png" alt="Page management"></a></p> <p>The second part is the page manager. It&#39;s written in a combination of Javascript (Front-end) and PHP (Back-end). The idea behind this site is that each page belongs to a certain subject. For instance, the page at <code>thuriot.be/thuriot-be</code> is called &quot;thuriot-be&quot; and belongs to the subject &quot;Projects&quot;. When there is only a subject given and no page name, e.g. <code>thuriot.be/Projects</code>, the page name will automatically be the &quot;index&quot; page of that subject.</p> <p><a href="//cdn.thuriot.be/images/Site/Site3.png"><img src="//cdn.thuriot.be/images/Site/Site3_thumb.png" alt="Button management"></a></p> <p>The third part is the button manager. The two middle buttons of this site are also dynamic. By using this page, you can configure their link and name.&nbsp; The correct images will then be generated and the links stored in the database. This allows for a highly adaptable template.</p> <p><a href="//cdn.thuriot.be/images/Site/Site4.png"><img src="//cdn.thuriot.be/images/Site/Site4_thumb.png" alt="User management"></a></p> <p>The site also has a user manager. It is possible to create multiple users, letting more than one person work on the site without having to share accounts. User accounts can also be deleted, but for obvious reasons, a normal user can only delete its own account.</p> <p><a href="//cdn.thuriot.be/images/Site/Site5.png"><img src="//cdn.thuriot.be/images/Site/Site5_thumb.png" alt="Site border"></a></p> <p>Finally, after the user has logged in, when browsing normal pages on the site, hovering over the editable part will show a black border. When you double click when this border is showing, it will automatically go to the page manager and open the current page. This enables you to quickly start editing an existing page.</p> ]]></content:encoded> </item> <item> <title><![CDATA[Hairstudio Admin]]></title> <description><![CDATA[HairStudioAdmin is a tool developed for Hairstudio Christel &amp;amp; Glen. It is a tool to keep track of all the costumers&#39; details, their visits and their preferred treatments. ]]></description> <link>//steven.thuriot.be/hairstudio-admin</link> <guid isPermaLink="true">//steven.thuriot.be/hairstudio-admin</guid> <pubDate>2007-06-07T09:55:00+00:00</pubDate> <content:encoded><![CDATA[<p>HairStudioAdmin is a tool developed for Hairstudio Christel &amp; Glen. It is a tool to keep track of all the costumers&#39; details, their visits and their preferred treatments.</p> <p><a href="//cdn.thuriot.be/images/HairstudioAdmin/HSA1.jpg"><img src="//cdn.thuriot.be/images/HairstudioAdmin/HSA1_thumb.jpg" alt="Main view"></a></p> <p>It has an easy to use list with all the customers in it. This list is sorted alphabetically and is supported by search forms that allow you to filter the list. Finding a customer has never been easier.</p> <p>You can store all the details of the costumer in the middle fields. A few examples are cell phone, address, date of birth, e-mail and so on. The pane on the right is a text box, used to write down details about preferred treatments. For example, which color of dye this costumer uses each time.</p> <p><a href="//cdn.thuriot.be/images/HairstudioAdmin/HSA2.jpg"><img src="//cdn.thuriot.be/images/HairstudioAdmin/HSA2_thumb.jpg" alt="Visitor list"></a></p> <p>The upper right button (arrow) is used to let the text box swap with a visitor list. This new box will hold all the dates when the costumer visited the Hairstudio. It also has an easy button to add the current date into the list.</p> <p><a href="//cdn.thuriot.be/images/HairstudioAdmin/HSA3.jpg"><img src="//cdn.thuriot.be/images/HairstudioAdmin/HSA3_thumb.jpg" alt="Picture pane"></a></p> <p>The tool also allows you to add a picture of the customer. This picture pane allows you to either browse for a picture or let&#39;s you drag and drop a picture file onto it. Adding pictures has never been easier!</p> ]]></content:encoded> </item> </channel> </rss>