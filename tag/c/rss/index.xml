<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; C#]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/tag/c/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[Playing with Generic References: Hidden features of C#]]></title> <description><![CDATA[When writing generic classes, it&#39;s highly likely you&#39;ve gotten to the point (at least once) where you had to write a piece of type-specific code (wether due to third party or not) and you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action. ]]></description> <link>//steven.thuriot.be/generic-references</link> <guid isPermaLink="true">//steven.thuriot.be/generic-references</guid> <pubDate>2015-08-19T19:17:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/reference.jpg" medium="image"/> <content:encoded><![CDATA[<p>When writing generic classes, it&#39;s highly likely you&#39;ve gotten to the point (at least once) where you had to write a piece of type-specific code (wether due to third party or not) and you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action.</p> <p>Code smells aside, you&#39;ve probably bumped into a casting issue at this point.</p> <p>Imagine a generic class that holds some data.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">//Shit hits the fan if we want to stay in safe code...</span>
    <span class="c1">//and we&#39;ll do something like this:</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">_value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Of course, this example won&#39;t even compile. The compiler won&#39;t let you cast to the generic type, even though you&#39;ve verified it to be correct and in fact, the same! A cast which isn&#39;t really a cast in the first place.</p> <p>Usually, we solve this by boxing the generic value first, and thus tricking the compiler.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="c1">//Tricking the compiler!</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="kt">object</span><span class="p">)</span><span class="n">_value</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Bam! Code compiles, code works. Job done. Or is it? Not only are we tricking the compiler, we are also tricking ourselves... Doing this will box the generic value, moving it from the stack to the heap. This process is slow and should be avoided.</p> <p>It&#39;s a problem (given you want to keep your code this way in the first place) that is actually easily solved. We can circumvent this by using a few of C#&#39;s undocumented keywords: <code>__makeref</code> and <code>__refvalue</code>.</p> <p><code>__makeref</code> will create a <code>TypeReference</code>, while <code>__refvalue</code> will cast the reference to the type you pass it. No boxing and unboxing involved!</p> <p>Implemented it would look like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="kt">var</span> <span class="n">tr</span> <span class="p">=</span> <span class="n">__makeref</span><span class="p">(</span><span class="n">_value</span><span class="p">);</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="n">__refvalue</span><span class="p">(</span><span class="n">tr</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="c1">//no typeof here..!</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>I have noticed that it&#39;s rather picky with its casts, so be careful! For instance, if the type of <code>_value</code> is a <code>string</code>, and you&#39;re calling <code>__refvalue</code> with <code>object</code> as a type, it will throw an exception. Even though in normal code, that would work without any issues!</p> <p>This definitely needs to be properly unit-tested when used in your project.</p> <p>Enjoy, and don&#39;t forget to check back for more adventures later!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Snapshot]]></title> <description><![CDATA[When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing `IClonable` or using `Serialization` (followed by `Deserialization`). ]]></description> <link>//steven.thuriot.be/snapshot</link> <guid isPermaLink="true">//steven.thuriot.be/snapshot</guid> <pubDate>2014-12-14T19:21:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/lens_camera_macro.jpg" medium="image"/> <content:encoded><![CDATA[<p>When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing <code>IClonable</code> or using <code>Serialization</code> (followed by <code>Deserialization</code>).</p> <p>This might be an issue, however, when that instance is one from a third-party library. I wrote a little library, called <a href="https://github.com/StevenThuriot/Snapshot">Snapshot</a>, that uses the DLR to come up with a solution to this problem.</p> <p>By default, it will map all public properties and fields to a dynamic object. This behaviour is configurable. You will end up with a dynamic object with the same <strong>public</strong> signature as the one you took a snapshot of.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Steven&quot;</span><span class="p">,</span> <span class="s">&quot;Thuriot&quot;</span><span class="p">);</span>
<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">27</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">snapshot</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">TakeSnapshot</span><span class="p">();</span>

<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">28</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Person age: {0}&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Snapshot age: {0}&quot;</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</code></pre></div> <hr> <p>Output:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Person age: 28
Snapshot age: 27
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Resolving types while stripping down nullables]]></title> <description><![CDATA[I&#39;m currently working on a WPF project that uses advanced validation for their screens. ]]></description> <link>//steven.thuriot.be/resolving-types-while-stripping-down-nullables</link> <guid isPermaLink="true">//steven.thuriot.be/resolving-types-while-stripping-down-nullables</guid> <pubDate>2013-11-27T12:10:00+00:00</pubDate> <content:encoded><![CDATA[<p>I&#39;m currently working on a WPF project that uses advanced validation for their screens.</p> <p>Each WPF control has a property that accepts a data type for the property you&#39;re binding it to. This datatype will be used during validation so illegal formats aren&#39;t filled in. (e.g. no strings when ints are expected, no ints when decimals are specified, etc...). We currently have a few metadata builders that simplify this process greatly by resolving types and setting them automatically.</p> <p>There is one catch, though. &lt;!--more--&gt;When binding to a nullable property, the base type is used rather than the nullable type.</p> <p>Coming up with a solution, was luckily not that hard. Rather than setting the datatype directly from the passed generic type, we added a little helper method. This method makes sure the correct type is always resolved.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="n">GetDataType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">T</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">Nullable</span><span class="p">.</span><span class="n">GetUnderlyingType</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">??</span> <span class="n">type</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Exceptions and the TPL]]></title> <description><![CDATA[When an exception occurs while using the TPL, it will always get wrapped with an [AggregateException](http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx) before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well. ]]></description> <link>//steven.thuriot.be/exceptions-and-the-tpl</link> <guid isPermaLink="true">//steven.thuriot.be/exceptions-and-the-tpl</guid> <pubDate>2013-11-27T10:50:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/Carnivorous-Rabbit.jpg" medium="image"/> <content:encoded><![CDATA[<p>When an exception occurs while using the TPL, it will always get wrapped with an <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well.</p> <p>This is, <em>of course</em>, something you do not want to happen as the callstack contains valuable information.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">try</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Run</span><span class="p">(...)</span>
    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="n">AggregateException</span> <span class="n">ex</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ExceptionDispatchInfo</span><span class="p">.</span><span class="n">Capture</span><span class="p">(</span><span class="n">ex</span><span class="p">.</span><span class="n">InnerException</span><span class="p">).</span><span class="n">Throw</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <p>Due to the new <a href="http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx">async/await</a> system Microsoft introduced in .NET 4.5, they simplified this greatly by introducing the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo.aspx">ExceptionDispatchInfo</a> helper.</p> <p>By using this class, you are able to rethrow a caught exception object without losing the callstack. This allows you to unwrap the <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> and rethrow the actual exception. This allows you or the users of your code to catch specific exceptions.</p> <p>The snippet above is, of course, not a very realistic way to use this helper class, but shows what it does perfectly.</p> ]]></content:encoded> </item> <item> <title><![CDATA[WF in WPF: Handing over control to the user]]></title> <description><![CDATA[...because delivering an application set in stone doesn&#39;t always cut it. ]]></description> <link>//steven.thuriot.be/wf-in-wpf-handing-over-control-to-the-user</link> <guid isPermaLink="true">//steven.thuriot.be/wf-in-wpf-handing-over-control-to-the-user</guid> <pubDate>2013-07-01T09:30:00+00:00</pubDate> <content:encoded><![CDATA[<p>...because delivering an application set in stone doesn&#39;t always cut it.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Stone.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Stone.jpg" alt="Set in Stone"></a></p> <h1>What is which and which is what??</h1> <p>Before we begin, it is important that we understand all of the concepts used. So we will go over them first.</p> <h2>WF: Windows Workflow Foundation</h2> <p>Workflow foundation is a Microsoft technology that provides the developer with an easy way to host an in-process workflow engine.</p> <p>A workflow is a series of distinct programming steps or phases. A step in workflow is also referred to as an “Activity”. The .NET framework already provides a huge list of these activities, e.g. “Writeline”. While most things can already be achieved using these predefined activities, it is also possible for the developer to create their very own activities.</p> <p>These activities can be used as building blocks to visually assemble a workflow.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Chart.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Chart.jpg" alt=".NET Framework Chart"></a></p> <h2>WPF: Windows Presentation Foundation</h2> <p>The Presentation Foundation is a graphical subsystem for rendering user interfaces in Windows-based applications. WPF runs on top of DirectX.</p> <p>WPF views are built using XAML. This is an XML-based language to define and link various UI elements.</p> <h1>Handing over control?</h1> <h2>Why?</h2> <p>A lot of the applications we build on a daily basis have a pretty solid foundation. The general guidelines are written down. These are then turned into code and a single purpose application is built.</p> <p>But what happens when the requirements can change on a daily basis? Or when they can differ greatly on the context they’re used in?</p> <p>This can be solved by handing over the control to the end user. By handing over simple building blocks, rather than lines of code written in stone, we can enable the user to customize the application to their needs at that particular time in an easy and playful manner.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Lego.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Lego.jpg" alt="Lego Building Blocks"></a></p> <p>By teaching the end user how to play with these blocks (or rather, Workflow Activities), (s)he can constantly keep shaping the application to their needs.</p> <h2>How?</h2> <p>Wait a minute... All of this sounds rather hard! The end user won’t be happy with a giant software bill after developing all of this...</p> <p>While it could be a lot of work, it is very easy to achieve this goal by combining WF with WPF!</p> <p>The .NET framework comes with a Workflow designer specifically for WPF. With only a few lines of code, we can offer the end user a visual designer that is easy to use. By dragging and dropping activity blocks, a workflow that suits the user’s needs can be set up in a matter of minutes.</p> <p>Not only is it easy to set up, it’s also very easy to execute, save and load workflows into the application! This way, the end user can set up several workflows they often require and load them up when needed.</p> <h3>Snippet</h3> <p>This sample shows how to do it in only a few lines of <em>(granted, quick and dirty)</em> code:</p> <h4>Window.xaml</h4> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;window</span> <span class="na">x:Class=</span><span class="s">&quot;MainWindow&quot;</span>
        <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span>
        <span class="na">xmlns:x=</span><span class="s">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>
        <span class="na">Title=</span><span class="s">&quot;MainWindow&quot;</span> <span class="na">Height=</span><span class="s">&quot;350&quot;</span> <span class="na">Width=</span><span class="s">&quot;525&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;grid</span> <span class="na">x:Name=</span><span class="s">&quot;_Grid&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/grid&gt;&lt;grid</span> <span class="err">.ColumnDefinitions</span><span class="nt">&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;Auto&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;*&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;Auto&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
        <span class="nt">&lt;/grid&gt;</span>

        <span class="nt">&lt;contentpresenter</span> <span class="na">Grid.Column=</span><span class="s">&quot;1&quot;</span> <span class="na">Content=</span><span class="s">&quot;{Binding View}&quot;</span><span class="nt">&gt;&lt;/contentpresenter&gt;</span>

<span class="nt">&lt;/window&gt;</span>
</code></pre></div> <h4>Window.xaml.cs</h4> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="nf">CreateDesigner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">dm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DesignerMetadata</span><span class="p">();</span>
    <span class="n">dm</span><span class="p">.</span><span class="n">Register</span><span class="p">();</span>

    <span class="n">_designer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkflowDesigner</span><span class="p">();</span>
    <span class="n">_designer</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="k">new</span> <span class="n">Sequence</span><span class="p">());</span>

    <span class="kt">var</span> <span class="n">designerView</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">Context</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">GetService</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DesignerView</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>

    <span class="n">designerView</span><span class="p">.</span><span class="n">WorkflowShellBarItemVisibility</span> <span class="p">=</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Imports</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">MiniMap</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Variables</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Arguments</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Zoom</span><span class="p">;</span>

    <span class="n">ToolboxControl</span> <span class="n">tc</span> <span class="p">=</span> <span class="n">GetToolboxControl</span><span class="p">();</span>
    <span class="n">Grid</span><span class="p">.</span><span class="n">SetColumn</span><span class="p">(</span><span class="n">tc</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>

    <span class="n">_Grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tc</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">propertyInspectorView</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">PropertyInspectorView</span><span class="p">;</span>

    <span class="n">Grid</span><span class="p">.</span><span class="n">SetColumn</span><span class="p">(</span><span class="n">propertyInspectorView</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
    <span class="n">_Grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">propertyInspectorView</span><span class="p">);</span>

    <span class="n">DataContext</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">static</span> <span class="n">ToolboxControl</span> <span class="nf">GetToolboxControl</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Create the ToolBoxControl.</span>
    <span class="kt">var</span> <span class="n">ctrl</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxControl</span><span class="p">();</span>

    <span class="c1">// Create a category.</span>
    <span class="kt">var</span> <span class="n">category</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxCategory</span><span class="p">(</span><span class="s">&quot;category1&quot;</span><span class="p">);</span>

    <span class="c1">// Create Toolbox items.</span>
    <span class="kt">var</span> <span class="n">tool1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Assign</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">tool2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Sequence</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">tool3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">WriteLine</span><span class="p">));</span>

    <span class="c1">// Add the Toolbox items to the category.</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool1</span><span class="p">);</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool2</span><span class="p">);</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool3</span><span class="p">);</span>

    <span class="c1">// Add the category to the ToolBox control.</span>
    <span class="n">ctrl</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">category</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">ctrl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> <h3>Executing a workflow:</h3> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">_designer</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
<span class="kt">string</span> <span class="n">workflow</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">encoding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ASCIIEncoding</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">encoding</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">workflow</span><span class="p">);</span>

<span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">(</span><span class="n">bytes</span><span class="p">))</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">activity</span> <span class="p">=</span> <span class="n">ActivityXamlServices</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">invoker</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkflowInvoker</span><span class="p">(</span><span class="n">activity</span><span class="p">);</span>
    <span class="n">invoker</span><span class="p">.</span><span class="n">Invoke</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <h3>Result:</h3> <p><a href="//cdn.thuriot.be/images/WFinWPF/Result.png"><img src="//cdn.thuriot.be/images/WFinWPF/Result.png" alt="WPF View Result"></a></p> ]]></content:encoded> </item> <item> <title><![CDATA[NuGet Guidance]]></title> <description><![CDATA[Sometimes a NuGet package can contain complex install logic. When this is the case, it can be a real hassle for a C# programmer to write all the code in powershell. ]]></description> <link>//steven.thuriot.be/nuget-guidance</link> <guid isPermaLink="true">//steven.thuriot.be/nuget-guidance</guid> <pubDate>2012-04-07T17:22:00+00:00</pubDate> <content:encoded><![CDATA[<p>Sometimes a NuGet package can contain complex install logic. When this is the case, it can be a real hassle for a C# programmer to write all the code in powershell. </p> <p>This project is a hoster for any &quot;recipe&quot; you include in your nuget package. Using MEF, the recipes will run inside this hoster project.</p> <p>For your convenience, all you have to do is inherit BaseRecipe when creating new recipes.</p> <p>Sample usage:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">NuGetGuidance.Domain</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Recipe</span> <span class="p">:</span> <span class="n">BaseRecipe</span> 
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Execute</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">Prompt</span><span class="p">(</span><span class="s">&quot;Server URI&quot;</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>
        <span class="n">Log</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&quot;Received input: {0}&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">project</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadAllText</span><span class="p">(</span><span class="n">Project</span><span class="p">.</span><span class="n">FullName</span><span class="p">);</span>

        <span class="c1">//Do stuff  </span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Nuget Build And Deploy]]></title> <description><![CDATA[After attending [Scott Hanselman](http://www.hanselman.com)&#39;s [session at Techdays](http://channel9.msdn.com/Events/TechDays/TechDays-2011-Belgium/KEY01), I was really excited about [NuGet](http://nuget.org/). It&#39;s so easy to use and so versatile. Only one thing bothered me, and that is actually building your own NuGet package. First you need to let it generate a nuspec file, fill in everything by hand and only then you can let it generate your NuGet package. Then you need to update said NuSpec file everything something of relevance changes.  It&#39;s not a hard thing to do, it&#39;s just a bit bothersome and we&#39;d be off better if this was automated to some point. ]]></description> <link>//steven.thuriot.be/nuget-build-and-deploy</link> <guid isPermaLink="true">//steven.thuriot.be/nuget-build-and-deploy</guid> <pubDate>2012-03-05T18:41:00+00:00</pubDate> <content:encoded><![CDATA[<p>After attending <a href="http://www.hanselman.com">Scott Hanselman</a>&#39;s <a href="http://channel9.msdn.com/Events/TechDays/TechDays-2011-Belgium/KEY01">session at Techdays</a>, I was really excited about <a href="http://nuget.org/">NuGet</a>. It&#39;s so easy to use and so versatile. Only one thing bothered me, and that is actually building your own NuGet package. First you need to let it generate a nuspec file, fill in everything by hand and only then you can let it generate your NuGet package. Then you need to update said NuSpec file everything something of relevance changes.  It&#39;s not a hard thing to do, it&#39;s just a bit bothersome and we&#39;d be off better if this was automated to some point.</p> <p>So I started working on a little tool to help me build my NuSpec on the fly and create a NuGet package right away and potentially use this as a Visual Studio&#39;s build event.</p> <p>The post build event can be implemented like this:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">if &quot;$(ConfigurationName)&quot; == &quot;Release&quot; (  
  del /Q /F *.tmp
  &quot;R:\PathToTheExecutable\NuGet.BuildAndDeploy.exe&quot; /dll &quot;lib\$(TargetFileName)&quot; /outputdir &quot;$(TargetDir)\..&quot; /projectUrl http://thuriot.be/ /tags Small helper framework /dependencies &quot;Ninject 2.2&quot;
)
</code></pre></div> <p>The build output then looks like this:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">------ Rebuild All started: Project: Aikido, Configuration: Release Any CPU ------
  Aikido -<span class="ni">&amp;gt;</span> E:\Projects\Aikido\Release\lib\Aikido.dll
  Generating the NuSpec file for Aikido Framework version 1.0.0.0.

  Finished generating the NuSpec file succesfully.
  Writing NuSpec file... NuSpec file saved succesfully.

  Starting to build the NuGet pack...

  Attempting to build package from &#39;Aikido_Framework.nuspec&#39;.
  Successfully created package &#39;E:\Projects\- NuGet Packages\NuGet Packages\Aikido_Framework.1.0.0.0.nupkg&#39;.

------ Skipped Rebuild All: Project: Aikido.Test, Configuration: Release Any CPU ------
Project not selected to build for this solution configuration 
========== Rebuild All: 1 succeeded, 0 failed, 1 skipped ==========
</code></pre></div> <p>The generated NuSpec file looks like this:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;metadata&gt;</span>
    <span class="nt">&lt;id&gt;</span>Aikido<span class="nt">&lt;/id&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0.0.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;authors&gt;</span>Steven Thuriot<span class="nt">&lt;/authors&gt;</span>
    <span class="nt">&lt;owners&gt;</span>Steven Thuriot<span class="nt">&lt;/owners&gt;</span>
    <span class="nt">&lt;projectUrl&gt;</span>http://thuriot.be/<span class="nt">&lt;/projectUrl&gt;</span>
    <span class="nt">&lt;requireLicenseAcceptance&gt;</span>false<span class="nt">&lt;/requireLicenseAcceptance&gt;</span>
    <span class="nt">&lt;description&gt;</span>Small helper framework<span class="nt">&lt;/description&gt;</span>
    <span class="nt">&lt;tags&gt;</span>Small helper framework<span class="nt">&lt;/tags&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
      <span class="nt">&lt;dependency</span> <span class="na">id=</span><span class="s">&quot;Ninject&quot;</span> <span class="na">version=</span><span class="s">&quot;2.2&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
  <span class="nt">&lt;/metadata&gt;</span>
<span class="nt">&lt;/package&gt;</span>
</code></pre></div> <p>I realise it&#39;s a quick and dirty solution, but for a tool this small and simple it really doesn&#39;t matter, nor is it worth spending a lot more time on it. It took a minimal amount of work to make, it does what it is supposed to do and that is more than enough for its purpose.</p> <p><img src="//cdn.thuriot.be/images/GithubIcon.png" alt="GitHub"> You can take a look at the source code or download a built assembly on <a href="https://github.com/StevenThuriot/NuGet-Build-And-Deploy">GitHub</a>.</p> <p>Enjoy!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Modal Message Box for WinForms in .NET 2.0+]]></title> <description><![CDATA[The other day at work I felt the need to show the user a message, but wanted to do it a bit more fancy than just use the regular, old, boring MessageBox. ]]></description> <link>//steven.thuriot.be/modal-message-box-for-winforms-in-net-2-0</link> <guid isPermaLink="true">//steven.thuriot.be/modal-message-box-for-winforms-in-net-2-0</guid> <pubDate>2012-01-12T19:40:00+00:00</pubDate> <content:encoded><![CDATA[<p>The other day at work I felt the need to show the user a message, but wanted to do it a bit more fancy than just use the regular, old, boring MessageBox. </p> <p>I personally really enjoy the &quot;LightBox effect&quot; where the background darkens and the LightBox popped up. Because of the way WinForms work, this wasn&#39;t as simple as I was hoping it would be. I worked out a little solution and decided to share.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ModalMessageBox</span> <span class="p">:</span> <span class="n">Form</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nf">ModalMessageBox</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;parent&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">message</span><span class="p">))</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">font</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;font&quot;</span><span class="p">);</span>

        <span class="n">InitializeComponent</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeOKButton</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">okButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">OK</span><span class="p">,</span>
                            <span class="p">};</span>

        <span class="n">okButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">okButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">11</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">okButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>


        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">okButton</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeYesNoButtons</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">noButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;No&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">No</span>
                            <span class="p">};</span>

        <span class="n">noButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">11</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">noButton</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">yesButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Yes&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">Yes</span>
                            <span class="p">};</span>

        <span class="n">yesButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">yesButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">16</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">yesButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">yesButton</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeComponent</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">SuspendLayout</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">questionLabel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Label</span>
                                <span class="p">{</span>
                                    <span class="n">Anchor</span> <span class="p">=</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Top</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Left</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">,</span>
                                    <span class="n">BackColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
                                    <span class="n">BorderStyle</span> <span class="p">=</span> <span class="n">BorderStyle</span><span class="p">.</span><span class="n">FixedSingle</span><span class="p">,</span>
                                    <span class="n">Font</span> <span class="p">=</span> <span class="n">font</span><span class="p">,</span>
                                    <span class="n">ForeColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
                                    <span class="n">ImeMode</span> <span class="p">=</span> <span class="n">ImeMode</span><span class="p">.</span><span class="n">NoControl</span><span class="p">,</span>
                                    <span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">42</span><span class="p">),</span>
                                    <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span>
                                    <span class="n">Text</span> <span class="p">=</span> <span class="n">message</span><span class="p">,</span>
                                    <span class="n">TextAlign</span> <span class="p">=</span> <span class="n">ContentAlignment</span><span class="p">.</span><span class="n">MiddleCenter</span>
                                <span class="p">};</span>

        <span class="kt">var</span> <span class="n">height</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">78</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">height</span> <span class="p">&gt;</span> <span class="m">300</span><span class="p">)</span>
            <span class="n">height</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span>

        <span class="n">questionLabel</span><span class="p">.</span><span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">20</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>

        <span class="n">MaximizeBox</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">MinimizeBox</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">ShowInTaskbar</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">SizeGripStyle</span> <span class="p">=</span> <span class="n">SizeGripStyle</span><span class="p">.</span><span class="n">Hide</span><span class="p">;</span>
        <span class="n">FormBorderStyle</span> <span class="p">=</span> <span class="n">FormBorderStyle</span><span class="p">.</span><span class="n">None</span><span class="p">;</span>

        <span class="n">StartPosition</span> <span class="p">=</span> <span class="n">FormStartPosition</span><span class="p">.</span><span class="n">Manual</span><span class="p">;</span>
        <span class="n">ClientSize</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">+</span> <span class="m">2</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">+</span> <span class="m">2</span><span class="p">);</span>

        <span class="n">Rectangle</span> <span class="n">screenRectangle</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">RectangleToScreen</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientRectangle</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">titleHeight</span> <span class="p">=</span> <span class="n">screenRectangle</span><span class="p">.</span><span class="n">Top</span> <span class="p">-</span> <span class="n">parent</span><span class="p">.</span><span class="n">Top</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">borderWidth</span> <span class="p">=</span> <span class="n">screenRectangle</span><span class="p">.</span><span class="n">Left</span> <span class="p">-</span> <span class="n">parent</span><span class="p">.</span><span class="n">Left</span><span class="p">;</span>

        <span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">borderWidth</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">Y</span> <span class="p">+</span> <span class="n">titleHeight</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>

        <span class="n">TransparencyKey</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightSteelBlue</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">hatchBrush</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HatchBrush</span><span class="p">(</span><span class="n">HatchStyle</span><span class="p">.</span><span class="n">Percent50</span><span class="p">,</span> <span class="n">TransparencyKey</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">backgroundImage</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="m">50</span><span class="p">,</span> <span class="m">50</span><span class="p">);</span>

        <span class="n">Graphics</span> <span class="n">imageGraphics</span> <span class="p">=</span> <span class="n">Graphics</span><span class="p">.</span><span class="n">FromImage</span><span class="p">(</span><span class="n">backgroundImage</span><span class="p">);</span>
        <span class="n">imageGraphics</span><span class="p">.</span><span class="n">FillRectangle</span><span class="p">(</span><span class="n">hatchBrush</span><span class="p">,</span> <span class="n">DisplayRectangle</span><span class="p">);</span>

        <span class="n">AllowTransparency</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="n">backgroundImage</span><span class="p">.</span><span class="n">MakeTransparent</span><span class="p">(</span><span class="n">TransparencyKey</span><span class="p">);</span>

        <span class="n">BackColor</span> <span class="p">=</span> <span class="n">TransparencyKey</span><span class="p">;</span>
        <span class="n">BackgroundImage</span> <span class="p">=</span> <span class="n">backgroundImage</span><span class="p">;</span>
        <span class="n">BackgroundImageLayout</span> <span class="p">=</span> <span class="n">ImageLayout</span><span class="p">.</span><span class="n">Tile</span><span class="p">;</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">questionLabel</span><span class="p">);</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">buttons</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">OK</span><span class="p">:</span>
                <span class="n">InitializeOKButton</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">YesNo</span><span class="p">:</span>
                <span class="n">InitializeYesNoButtons</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(</span><span class="s">&quot;buttons&quot;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">ResumeLayout</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Show</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">OK</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Show</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">Font</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">delegate</span> <span class="n">DialogResult</span> <span class="nf">ShowDelegate</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">);</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">ShowDelegate</span> <span class="n">InternalShow</span> <span class="p">=</span> 
        <span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ModalMessageBox</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">).</span><span class="n">ShowDialog</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">InvokeRequired</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">InternalShow</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">DialogResult</span><span class="p">)</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nf">InternalShow</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The result looks like this:</p> <p>Before the pop-up <a href="//cdn.thuriot.be/images/ModalMessageBox/Input1.png"><img src="//cdn.thuriot.be/images/ModalMessageBox/Input1.png" alt="Input before the message pops up"></a></p> <p>After the pop-up <a href="//cdn.thuriot.be/images/ModalMessageBox/Input2.png"><img src="//cdn.thuriot.be/images/ModalMessageBox/Input2.png" alt="Input after the message pops up"></a></p> ]]></content:encoded> </item> <item> <title><![CDATA[Avoid Count() methods]]></title> <description><![CDATA[At work I&#39;m currently working with [dotTrace](http://www.jetbrains.com/profiler/) to check the performance of our application. A few of our issues were quickly traced back to the faulty usage of the Count() extension method. ]]></description> <link>//steven.thuriot.be/avoid-count-methods</link> <guid isPermaLink="true">//steven.thuriot.be/avoid-count-methods</guid> <pubDate>2011-08-22T18:50:00+00:00</pubDate> <content:encoded><![CDATA[<p>At work I&#39;m currently working with <a href="http://www.jetbrains.com/profiler/">dotTrace</a> to check the performance of our application. A few of our issues were quickly traced back to the faulty usage of the Count() extension method.</p> <p>Count() should be avoided as much as possible on IEnumerables. Count() is optimized to check for Count or Length properties, but if the used list doesn&#39;t have these implemented, Count() will iterate the entire list. We have a few fairly large lists in our application, so that quickly consumes quite a bit of time to run all the Count()&#39;s. Unless you&#39;re interested in the exact size of your list, I would say to avoid this method at all costs. However, even in this case there are a few better options.</p> <p>The most interesting option is to check with what kind of list you&#39;re working with. Lists like Collection, Array, List, ... either have a Length or Count property. This property is just a simple int that is already stored in the memory. It doesn&#39;t get much faster than this. The cost of calling these properties is neglectable. If the full size of your list is really important for your use case, it might pay off to switch to one of these types of lists.</p> <p>In case you&#39;re not interested in the full size of the list and don&#39;t want to or can&#39;t use a list that implements one of these properties, don&#39;t worry, there are a few other tips and tricks to handle these. I noticed that most of the time, Count() is used to check if there are any items in the list (<strong>Count() &gt; 0 , != 0 or == 0</strong> ). In this case it&#39;s much more interesting to use the LINQ Any() extension method. This method will check if there is one item in the list and return the result as a boolean. On a big list, you gain quite a bit of performance. Another common misusage of Count() is <strong>Where(...).Count() &gt; 0</strong>. In this case, it&#39;s far better to use <strong>Any(...)</strong>. In case 0 isn&#39;t the number you&#39;re checking against, it&#39;s still better to use <strong>Count(...)</strong>  instead and drop <strong>Where(...)</strong>. Since <strong>Where</strong> is lazy, it won&#39;t matter much for performance, but I find that the readability of what you are trying to do is increased greatly.</p> <p>For all the other cases, I wrote a few extension methods so it&#39;s possible to completely avoid using Count(). The idea behind these extension methods is that the list you&#39;re checking usually has a lot more items in it than the number you&#39;re checking against, for instance <strong>&gt; 2</strong> on a list of 300 items. On these kinds of checks, my extension methods truly shine. Rather than counting the whole list, they count x+1 items from the list, where x is the number you&#39;re checking against. You don&#39;t need to do any more counting than x+1 as you can check any of the conditions with this amount. This way, the actual counting is reduced greatly. When used correctly, the average cost will be a lot lower than using <strong>Count()</strong>. All of the extension methods also have an overload to allow you to specify a <strong>Where(...)</strong> clause so it can do everything in one go, rather than having to do a <strong>Where(...)</strong> first and a <strong>Count()</strong> after.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;comparePredicate&quot;&gt;The comparison function.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;The result of the passed predicate.&lt;/returns&gt;</span>
<span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">OptimizedCount</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">comparePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">enumerable</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">numberOfItems</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">return</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">wherePredicate</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">enumerable</span> <span class="p">=</span> <span class="n">enumerable</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">wherePredicate</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">numberOfItemsToCount</span> <span class="p">=</span> <span class="k">checked</span><span class="p">(</span><span class="n">numberOfItems</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">countedItems</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">enumerator</span> <span class="p">=</span> <span class="n">enumerable</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">enumerator</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">countedItems</span> <span class="p">&lt;</span> <span class="n">numberOfItemsToCount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">countedItems</span><span class="p">++;</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="n">returnValue</span> <span class="p">=</span> <span class="n">comparePredicate</span><span class="p">(</span><span class="n">countedItems</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">returnValue</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountEqualTo</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">==</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountLessThan</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountGreaterThan</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more items than defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterThan</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountLessOrEqualTo</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains less or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="na">[SuppressMessage(&quot;Microsoft.Naming&quot;, &quot;CA1702:CompoundWordsShouldBeCasedCorrectly&quot;, MessageId = &quot;CountLess&quot;)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountLessOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&lt;=</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CountGreaterOrEqualTo</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">///&lt;summary&gt;</span>
<span class="c1">/// Counts a list, keeping in mind the check you are planning to do on it.</span>
<span class="c1">/// This way you don&#39;t have to count every item when you don&#39;t need to, resulting in less overhead.</span>
<span class="c1">///&lt;/summary&gt;</span>
<span class="c1">///&lt;param name=&quot;enumerable&quot;&gt;The list with items getting counted.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;numberOfItems&quot;&gt;The number of items that you are going to check for. The same number should be used in the predicate.&lt;/param&gt;</span>
<span class="c1">///&lt;param name=&quot;wherePredicate&quot;&gt;The filter predicate to apply to the list.&lt;/param&gt;</span>
<span class="c1">///&lt;typeparam name=&quot;T&quot;&gt;The type of item getting counted. This is of no relevance, just to keep the method generic.&lt;/typeparam&gt;</span>
<span class="c1">///&lt;exception cref=&quot;OverflowException&quot;&gt;An overflow exception will be thrown when &#39;numberOfItems&#39; equals int.MaxValue&lt;/exception&gt;</span>
<span class="c1">///&lt;returns&gt;True if the list contains more or the same amount of items as defined in &#39;numberOfItems&#39;.&lt;/returns&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">CountGreaterOrEqualTo</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">enumerable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">wherePredicate</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">OptimizedCount</span><span class="p">(</span><span class="n">enumerable</span><span class="p">,</span> <span class="n">numberOfItems</span><span class="p">,</span> <span class="n">wherePredicate</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;=</span> <span class="n">numberOfItems</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <p>A few more tips and tricks regarding <strong>Count()</strong>&#39;s. Do not use them in the check condition of for-loops. It will be executed every loop, causing a severe performance issue.</p> <p>Another, in my opinion, interesting optimization is the following one:</p> <p>Original code where the sublist is a Collection:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SubList</span><span class="p">).</span><span class="n">Count</span><span class="p">();</span>
</code></pre></div> <p>Optimized code:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Sum</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SubList</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</code></pre></div> <p>This way it will only make the sum of a few integers, which is much faster than creating one big list in memory, then count all the items.</p> ]]></content:encoded> </item> <item> <title><![CDATA[Multilanguage using Resource files (resx) in C# .NET]]></title> <description><![CDATA[I&#39;m currently working on a little helper framework and started placing all my strings in a resource file to keep my code as tidy as possible. ]]></description> <link>//steven.thuriot.be/multilanguage-using-resource-files-resx-in-c-net</link> <guid isPermaLink="true">//steven.thuriot.be/multilanguage-using-resource-files-resx-in-c-net</guid> <pubDate>2011-05-15T13:09:00+00:00</pubDate> <content:encoded><![CDATA[<p>I&#39;m currently working on a little helper framework and started placing all my strings in a resource file to keep my code as tidy as possible.</p> <p>At this point I started wondering, what if people want to use my framework, but don&#39;t want these messages appearing in English? Or even just want to slightly change the formatting of the messages I&#39;m placing in my resource file?</p> <p>&quot;Okay&quot;, I thought, &quot;I&#39;ll just change the resource file from embedded to external, then people can change it all they want&quot;. Sadly, things are never as easy as they may appear. Resource files need to be compiled as they have a code behind, thus you can&#39;t just make them external. Writing an entire reader wasn&#39;t an option for me either, as I found that way too much overhead, both for the speed of the framework as the work for the programmer. I also wanted to keep the easy-to-use resource files in my solution.</p> <p>&quot;Time for a new plan&quot;, I said to myself. &quot;We could create a second project file and place our resources in there. We could then release this project as an open source project so people could easily compile it into a DLL that the framework would use&quot;. It&#39;s quite obvious that your first ideas are never the good ones. Overcomplicating everything can sometimes be far too easy. Time to step back, relax and really start thinking things through. At this point I decided to take a look at how the code behind these resource files actually worked. They&#39;re actually fairly easy put together. For everything you put in your resource file, one getter property is generated. This getter property will refer to a resource manager that will read in the resource file. Right there and then, I saw the light!</p> <p>&quot;I&#39;ll just give people access to the resource manager&#39;s setter. Then they can replace it with their own!&quot;. A step in the right direction, but not there just yet. The problem is that this property does not have a setter. It only has a getter with a private backing field that gets initialized during the first call to it. Adding a setter wasn&#39;t an option, as every time you change something in your resource file, it will regenerate your code behind. If you forget about this setter, change something in your resource file and release your newly compiled framework, you will break people&#39;s code because your setter will be missing! A second idea was to create a partial class that had a property with getter and setter, giving access to this private field. While this seemed great, the problem is that the code behind the resource file is not a partial class. So every time you&#39;d change something, it would be regenerated again and you&#39;d have to place in the &quot;partial&quot; keyword to make your code compile again. You&#39;d also have two properties that more or less have the same functionality. It would also mean that my resource file had to be public, right in plain sight for everyone to see. At least you wouldn&#39;t be breaking other&#39;s code any more though. But no, this was <em>not</em> good enough. I had to think of something that worked completely independent of my resource class.</p> <p>I figured I&#39;d make a static <em>Settings</em> class. In this class I&#39;d place a property that accepts a resource manager. It looks like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="c1">///&lt;summary&gt;</span>
 <span class="c1">/// In case the default resource implementation does not suffice (e.g. you desire a translation),</span>
 <span class="c1">/// it is possible to replace it by your own.</span>
 <span class="c1">/// If the new resource manager doesn&#39;t have all the needed resources, it will not be set.</span>
 <span class="c1">///&lt;/summary&gt;</span>
 <span class="k">public</span> <span class="k">static</span> <span class="n">ResourceManager</span> <span class="n">Resource</span>
 <span class="p">{</span>
     <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">MyFrameworkResourceFile</span><span class="p">.</span><span class="n">ResourceManager</span><span class="p">;</span> <span class="p">}</span>
     <span class="k">set</span> <span class="p">{</span> <span class="n">SetResource</span><span class="p">(</span><span class="k">value</span><span class="p">);</span> <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div> <p>My setter has a call to a method to check if the new resource manager is compatible. It will check if all the keys defined in my resource file are also present in the new file. Because a private field has to be set, it will use reflection to get to this goal. Checking if the keys are present will also be done using reflection. The method is implemented like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="c1">///&lt;summary&gt;</span>
 <span class="c1">/// Test if the new resource manager has all the needed resources.</span>
 <span class="c1">/// If it misses one or more values, it will keep the current resource manager.</span>
 <span class="c1">///&lt;/summary&gt;</span>
 <span class="c1">///&lt;param name=&quot;resourceManager&quot;&gt;The new resource manager.&lt;/param&gt;</span>
 <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetResource</span><span class="p">(</span><span class="n">ResourceManager</span> <span class="n">resourceManager</span><span class="p">)</span>
 <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">resourceManager</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">newKeys</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Collection</span><span class="p">();</span>

    <span class="kt">var</span> <span class="n">newResourceSet</span> <span class="p">=</span> <span class="n">resourceManager</span><span class="p">.</span><span class="n">GetResourceSet</span><span class="p">(</span><span class="n">Culture</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">true</span><span class="p">).</span><span class="n">GetEnumerator</span><span class="p">();</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">newResourceSet</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">())</span>
        <span class="n">newKeys</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">newResourceSet</span><span class="p">.</span><span class="n">Key</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>

    <span class="kt">var</span> <span class="n">resourceType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MyFrameworkResourceFile</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">properties</span> <span class="p">=</span> <span class="n">resourceType</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span> <span class="p">|</span> <span class="p">(</span><span class="n">resourceType</span><span class="p">.</span><span class="n">IsPublic</span>
                                         <span class="p">?</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span>
                                         <span class="p">:</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">));</span>

    <span class="kt">var</span> <span class="n">foundAllKeys</span> <span class="p">=</span> <span class="n">properties</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
                                 <span class="p">.</span><span class="n">Intersect</span><span class="p">(</span><span class="n">newKeys</span><span class="p">)</span>
                                 <span class="p">.</span><span class="n">Count</span><span class="p">()</span> <span class="p">==</span> <span class="p">(</span><span class="n">properties</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="m">2</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(!</span><span class="n">foundAllKeys</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">resourceManagerField</span> <span class="p">=</span> <span class="n">resourceType</span><span class="p">.</span><span class="n">GetField</span><span class="p">(</span><span class="s">&quot;resourceMan&quot;</span><span class="p">,</span>
                                    <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">resourceManagerField</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="n">resourceManagerField</span><span class="p">.</span><span class="n">SetValue</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">resourceManager</span><span class="p">);</span>
 <span class="p">}</span>
</code></pre></div> <p>I can already hear what you are thinking... &quot;But reflection is slow and you shouldn&#39;t use it&quot;. I couldn&#39;t agree more that it is slow. Well, slower. Completely not using it is something I don&#39;t fully agree on, however. There are cases where reflection works out quite well. As long as you don&#39;t start running it on huge lists or in for loops that run 100.000 times, reflection will always be an option for me.</p> <p>I did some tests on the time it takes, just to give you an idea and to show you it&#39;s really not that bad. For this I created a resource file with <strong>200</strong> lines of resources (thus a code behind with 202 properties, as it also has a property for its resource manager and its culture).</p> <p>Running it once successfully took an average of <strong>0.016</strong> seconds. Not that bad, huh? Running it 25.000 times still took less than <strong>5</strong> seconds. So, depending on how big your framework&#39;s resource file will be, this method will add at most 5 milliseconds to the start up time, which is quite acceptable. Especially since it makes both your as the user&#39;s life a lot easier.</p> <p>As for the user, all (s)he would have to do is create their own resource file and insert all of the keys that are in the original resource file as well. It doesn&#39;t matter if there are other keys as well that you want to use in your own application. The runtime of the method will not be affected by this as it will only check for the needed properties, thus skipping all of the other ones. All you have to do is make sure that the resource file has a code behind as well, though it doesn&#39;t matter if it is set to internal or public. Both work the same. Actually setting your custom resource file would work like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Settings</span><span class="p">.</span><span class="n">Resource</span> <span class="p">=</span> <span class="n">MyCustomResourceFile</span><span class="p">.</span><span class="n">ResourceManager</span><span class="p">;</span>
</code></pre></div> <p>It&#39;s as simple as that!</p> <hr> <p><strong>[IMPORTANT] Edit:</strong></p> <p>Since this post has been receiving quite a few questions that can be solved in much easier ways, I will try to clarify my intentions a bit.</p> <p>The code supplied in my post gives the user of your framework more freedom to tinker with the actual resources when using your dll without having to do anything too fancy, e.g. change existing main resources or change things during runtime without changing the current culture. </p> <p>All in all, if all you want to do is supply a new non-supported language for your dll or any third party dll that you have the resx file for, supplying a completely new resource dll is the <strong>best</strong> way to go. Your users can then just create their own resx file and compile it into a satellite resource assembly using <a href="http://msdn.microsoft.com/en-us/library/ccec7sz1.aspx">Resource File Generator</a> to compile the <em>resx</em> to a <em>.resources</em> file and then compile that file to a <em>resources.dll</em> using <a href="http://msdn.microsoft.com/en-us/library/c405shex.aspx">Assembly Linker</a>.</p> <p>If we&#39;d want to compile a resource file for the en-US culture, commands would be as following:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">resgen.exe /compile xxx.en-US.resx
al.exe /out:TheApplication.xxx.en-US.resources.dll /embedresource: xxx.en-US.resources
</code></pre></div>]]></content:encoded> </item> </channel> </rss>