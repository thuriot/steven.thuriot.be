<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; Steven Thuriot]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/author/steven/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[Playing with Generic References: Hidden features of C#]]></title> <description><![CDATA[When writing generic classes, it&#39;s highly likely you&#39;ve gotten (at least once) to the point where you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action. ]]></description> <link>//steven.thuriot.be/generic-references</link> <guid isPermaLink="true">//steven.thuriot.be/generic-references</guid> <pubDate>2015-08-19T19:17:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/reference.jpg" medium="image"/> <content:encoded><![CDATA[<p>When writing generic classes, it&#39;s highly likely you&#39;ve gotten (at least once) to the point where you&#39;ve done a type-check in one of your methods. Depending on the type of your generic parameter, you&#39;ve then set a certain course of action.</p> <p>Code smells aside, you&#39;ve probably bumped into a casting issue at this point.</p> <p>Imagine a generic class that holds some data.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">//Shit hits the fan if we want to stay in safe code...</span>
    <span class="c1">//and we&#39;ll do something like this:</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">_value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Of course, this example won&#39;t even compile. The compiler won&#39;t let you cast the generic type, even though you&#39;ve verified it to be correct. A cast which isn&#39;t really a cast in the first place.</p> <p>Usually, we solve this by boxing the generic value first, tricking the compiler.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuff</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="c1">//Tricking the compiler!</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="kt">object</span><span class="p">)</span><span class="n">_value</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>Bam! Code compiles, code works. Job done. Or is it? Doing this will box the generic value, moving it from the stack to the heap. This process is slow and should be avoided.</p> <p>It&#39;s a problem, given you want to keep your code this way, that is actually easily solved. We can circumvent this by using a few of C#&#39;s undocumented keywords: <code>__makeref</code> and <code>__refvalue</code>.</p> <p><code>__makeref</code> will create a <code>TypeReference</code>, while <code>__refvalue</code> will cast the reference to the type you pass it. No boxing and unboxing involved!</p> <p>Implemented it would look like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ClassWithData</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>

  <span class="c1">// other stuffs</span>

  <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">GetBytes</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="kt">var</span> <span class="n">tr</span> <span class="p">=</span> <span class="n">__makeref</span><span class="p">(</span><span class="n">_value</span><span class="p">);</span>
      <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="n">__refvalue</span><span class="p">(</span><span class="n">tr</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="c1">//no typeof here..!</span>
      <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">double</span><span class="p">))</span>
      <span class="c1">//and so on ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>I have noticed that it&#39;s rather picky with its casts, so be careful! For instance, if the type of <code>_value</code> is a <code>string</code>, and you&#39;re calling <code>__refvalue</code> with <code>object</code> as a type, it will throw an exception. Even though in normal code, that would work without any issues!</p> <p>This definitely needs to be properly unit-tested when used in your project.</p> <p>Enjoy!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Automating your wake up alarm using Tasker]]></title> <description><![CDATA[Setting your wake up alarm, you have two choices. Either you let it automatically wake you at a set time and let that alarm repeat, or you can do it manually which is a tedious and repetitive job. ]]></description> <link>//steven.thuriot.be/automating-your-wake-up-alarm-using-tasker</link> <guid isPermaLink="true">//steven.thuriot.be/automating-your-wake-up-alarm-using-tasker</guid> <pubDate>2015-07-12T09:22:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/Old-clock.jpg" medium="image"/> <content:encoded><![CDATA[<p>Setting your wake up alarm, you have two choices. Either you let it automatically wake you at a set time and let that alarm repeat, or you can do it manually which is a tedious and repetitive job. </p> <p>The choice seems obvious, just pick the first option! However, this can quickly turn out very annoying when you have a day off and forget shutting off the alarm. Having it wake you up at 6AM can easily turn your mood on what should be a fun day.</p> <p>Since this has happened to me a few times, I decided to tinker something together using <a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm&amp;hl=en">Tasker</a>. This is an amazing Android app that allows you to automate anything, from Settings to SMS.</p> <p>I created a <code>Task</code> that sets the alarm on weekdays and let the task trigger at 5 minutes after midnight. Inside the task, I used a variable for hours and minutes. This way I can easily adjust them, if needed, in Taskers <code>var</code> window. They are named <code>%AlarmHour</code> and <code>%AlarmMinute</code>. You could also create tasks to set these variables for you, depending on other conditions.</p> <p>At this point, we&#39;ve built an alarm that mimics the behaviour of option #1, the automatic alarm. So what about our vacation days? To solve this issue, I added an extra condition to the task to check my calendar. I have the tendency to add an all day event in my calendar named <code>Vacation</code> when I have a day off. So having it check if there is a <code>Vacation</code> task in my calendar is exactly what I needed. </p> <p>Now the task will only run on weekdays I don&#39;t have a day off. Perfect!</p> <p>For your convenience, I exported the task. The generated xml, for those that want to import it, is as follows:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;TaskerData</span> <span class="na">sr=</span><span class="s">&quot;&quot;</span> <span class="na">dvi=</span><span class="s">&quot;1&quot;</span> <span class="na">tv=</span><span class="s">&quot;4.7u1m&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Profile</span> <span class="na">sr=</span><span class="s">&quot;prof7&quot;</span> <span class="na">ve=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;cdate&gt;</span>1430336947272<span class="nt">&lt;/cdate&gt;</span>
        <span class="nt">&lt;edate&gt;</span>1433861797349<span class="nt">&lt;/edate&gt;</span>
        <span class="nt">&lt;id&gt;</span>7<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;mid0&gt;</span>6<span class="nt">&lt;/mid0&gt;</span>
        <span class="nt">&lt;nme&gt;</span>Set Alarm On Weekdays<span class="nt">&lt;/nme&gt;</span>
        <span class="nt">&lt;Time</span> <span class="na">sr=</span><span class="s">&quot;con0&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;fh&gt;</span>0<span class="nt">&lt;/fh&gt;</span>
            <span class="nt">&lt;fm&gt;</span>5<span class="nt">&lt;/fm&gt;</span>
            <span class="nt">&lt;th&gt;</span>0<span class="nt">&lt;/th&gt;</span>
            <span class="nt">&lt;tm&gt;</span>5<span class="nt">&lt;/tm&gt;</span>
        <span class="nt">&lt;/Time&gt;</span>
        <span class="nt">&lt;State</span> <span class="na">sr=</span><span class="s">&quot;con1&quot;</span> <span class="na">ve=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;code&gt;</span>5<span class="nt">&lt;/code&gt;</span>
            <span class="nt">&lt;pin&gt;</span>true<span class="nt">&lt;/pin&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg0&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>Vacation<span class="nt">&lt;/Str&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg1&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg2&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg3&quot;</span> <span class="na">val=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg4&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/State&gt;</span>
        <span class="nt">&lt;Day</span> <span class="na">sr=</span><span class="s">&quot;con2&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;wday0&gt;</span>4<span class="nt">&lt;/wday0&gt;</span>
            <span class="nt">&lt;wday1&gt;</span>6<span class="nt">&lt;/wday1&gt;</span>
            <span class="nt">&lt;wday2&gt;</span>5<span class="nt">&lt;/wday2&gt;</span>
            <span class="nt">&lt;wday3&gt;</span>3<span class="nt">&lt;/wday3&gt;</span>
            <span class="nt">&lt;wday4&gt;</span>2<span class="nt">&lt;/wday4&gt;</span>
        <span class="nt">&lt;/Day&gt;</span>
    <span class="nt">&lt;/Profile&gt;</span>
    <span class="nt">&lt;Task</span> <span class="na">sr=</span><span class="s">&quot;task6&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;cdate&gt;</span>1430336877555<span class="nt">&lt;/cdate&gt;</span>
        <span class="nt">&lt;edate&gt;</span>1433861797349<span class="nt">&lt;/edate&gt;</span>
        <span class="nt">&lt;id&gt;</span>6<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;nme&gt;</span>Set Alarm<span class="nt">&lt;/nme&gt;</span>
        <span class="nt">&lt;pri&gt;</span>10<span class="nt">&lt;/pri&gt;</span>
        <span class="nt">&lt;Action</span> <span class="na">sr=</span><span class="s">&quot;act0&quot;</span> <span class="na">ve=</span><span class="s">&quot;7&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;code&gt;</span>566<span class="nt">&lt;/code&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg0&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;var&gt;</span>%AlarmHour<span class="nt">&lt;/var&gt;</span>
            <span class="nt">&lt;/Int&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg1&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;var&gt;</span>%AlarmMinute<span class="nt">&lt;/var&gt;</span>
            <span class="nt">&lt;/Int&gt;</span>
            <span class="nt">&lt;Str</span> <span class="na">sr=</span><span class="s">&quot;arg2&quot;</span> <span class="na">ve=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>Time for work!<span class="nt">&lt;/Str&gt;</span>
            <span class="nt">&lt;Int</span> <span class="na">sr=</span><span class="s">&quot;arg3&quot;</span> <span class="na">val=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/Action&gt;</span>
    <span class="nt">&lt;/Task&gt;</span>
<span class="nt">&lt;/TaskerData&gt;</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[HTPC: Getting rid of your RDP Woes]]></title> <description><![CDATA[Last year, I finally decided to get a HTPC hooked up to my TV set (running Windows 8.1). While it has been a major improvement on my TV experience, it has caused some extra woes as well. ]]></description> <link>//steven.thuriot.be/htpc-getting-rid-of-your-rdp-woes</link> <guid isPermaLink="true">//steven.thuriot.be/htpc-getting-rid-of-your-rdp-woes</guid> <pubDate>2014-12-30T15:02:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/NESRemote.png" medium="image"/> <content:encoded><![CDATA[<p>Last year, I finally decided to get a HTPC hooked up to my TV set (running Windows 8.1). While it has been a major improvement on my TV experience, it has caused some extra woes as well.</p> <p>Due to the machine&#39;s nature, I refuse to hook up a keyboard and mouse. Even a wireless one! The only thing I&#39;ve hooked up, is an IR receiver and I want to keep it this way. Now and then, the machine requires a little bit of maintenance. I like RDP&#39;ing into the machine and manage it remotely. I prefer RDP since it is built in. I don&#39;t want to install yet another VNC service on a machine I want to keep as clean and lightweight as possible. </p> <p><em>I do realize that installing a Linux distro would make it even more lightweight, but I&#39;m currently running a few Windows-only services on it. (I am a .NET developer, after all!)</em></p> <p>RDP, all in all, works great. It does what it&#39;s supposed to do and I hardly have to configure anything to make it work. There is only one downside and sadly, it&#39;s a rather big one. When RDP&#39;ing into the machine, it auto locks. This is something I can live with, as that also means no one is watching my actions through my TV while I&#39;m working on the machine. However, after closing the connection, the machine remains locked. This is a major pain in the ass as it means I&#39;ll have to either reboot the machine (auto-login) or type in my password.... Only there is no keyboard attached.</p> <p>After reading up a bit and tinkering a lot, I&#39;ve come up with a rather decent solution.</p> <h1>Disconnecting through a Task</h1> <p>First, we&#39;ll start by creating a new task. We&#39;ll be creating the task to simplify running an elevated command. Open the <code>Task Scheduler</code> by pressing the <code>Win+R</code> buttons and executing the following command.</p> <div class="highlight"><pre><code class="language-text" data-lang="text">Taskschd.msc
</code></pre></div> <p>After the window opens, right-click the <code>Task Scheduler Library</code>, create a new task and name it <code>Disconnect</code>.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/1.New.jpg" alt="Create New Task - General Tab"></p> <p>Don&#39;t forget to tick <code>Run with highest privileges</code>. This will allow the task to run with administrative rights without triggering <a href="https://en.wikipedia.org/wiki/User_Account_Control">UAC</a>. I like having UAC on, but it gets annoying fast for tasks like these. Without administrative rights, it will not work. </p> <p>After doing so, go to the actions tab.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/2.Actions.jpg" alt="Actions Tab"></p> <p>Click <code>New</code> and create a new action. The following window opens.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/3.Action.jpg" alt="Add Action"></p> <p>The command we will be executing is the following:</p> <div class="highlight"><pre><code class="language-text" data-lang="text">powershell -Command &quot;tscon (qwinsta | ForEach-Object { $_.Trim() -replace &#39;\s+&#39;,&#39;,&#39; } | ConvertFrom-Csv | Where-Object { $_.SESSIONNAME -match &#39;^&gt;&#39; } | Select-Object -First 1 -expand ID) /dest:console&quot;
</code></pre></div> <p>Enter it into the window as shown in the screenshot.</p> <p>Lastly, go to the settings tab. Make sure <code>Allow task to be run on demand</code> is ticked.</p> <p><img src="//cdn.thuriot.be/images/HTPC-RDP/4.Settings.jpg" alt="Settings Tab"></p> <h1>A word of explanation: What exactly is happening?</h1> <p>We&#39;re basically running the <code>qwinsta</code> command. This will give us a list of all sessions running on the machine. The current sessions that we are in, will be marked with a <code>&gt;</code>, so we&#39;re filtering that line out. After selecting that line, we want to retrieve the <code>ID</code> column. This is the ID of the current session.</p> <p>After getting the ID, we run the <code>tscon</code> command and pass the id and tell it to connect to <code>console</code>. This will make it drop the RDP connection and connect to its physical console. </p> <p>We have now disconnected the RDP connection and left the machine running unlocked. No keyboard required to watch some TV!</p> <h1>Rounding up</h1> <h2>Starting the task</h2> <p>This task can easily be run with the following command: <em>Note that <code>Disconnect</code> is the name of the task we just created.</em></p> <div class="highlight"><pre><code class="language-text" data-lang="text">schtasks /run /tn &quot;Disconnect&quot;
</code></pre></div> <h2>Simplify, beautify</h2> <p>We can use <a href="http://forum.xda-developers.com/showthread.php?t=1899865">OblyTile</a> to create a Windows 8 tile that will run this command. Then all we have to do is click the tile and we&#39;re disconnect, ready to watch some TV without further interaction.</p> <p>That&#39;s it, enjoy your HTPC!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Snapshot]]></title> <description><![CDATA[When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing `IClonable` or using `Serialization` (followed by `Deserialization`). ]]></description> <link>//steven.thuriot.be/snapshot</link> <guid isPermaLink="true">//steven.thuriot.be/snapshot</guid> <pubDate>2014-12-14T19:21:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/lens_camera_macro.jpg" medium="image"/> <content:encoded><![CDATA[<p>When working with a mutable instance, it&#39;s often useful to keep a certain state of that object. This issue is usually solved by implementing <code>IClonable</code> or using <code>Serialization</code> (followed by <code>Deserialization</code>).</p> <p>This might be an issue, however, when that instance is one from a third-party library. I wrote a little library, called <a href="https://github.com/StevenThuriot/Snapshot">Snapshot</a>, that uses the DLR to come up with a solution to this problem.</p> <p>By default, it will map all public properties and fields to a dynamic object. This behaviour is configurable. You will end up with a dynamic object with the same <strong>public</strong> signature as the one you took a snapshot of.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Steven&quot;</span><span class="p">,</span> <span class="s">&quot;Thuriot&quot;</span><span class="p">);</span>
<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">27</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">snapshot</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">TakeSnapshot</span><span class="p">();</span>

<span class="n">person</span><span class="p">.</span><span class="n">Age</span> <span class="p">=</span> <span class="m">28</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Person age: {0}&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Snapshot age: {0}&quot;</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">.</span><span class="n">Age</span><span class="p">);</span>
</code></pre></div> <hr> <p>Output:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Person age: 28
Snapshot age: 27
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[WPF: A Model First Approach]]></title> <description><![CDATA[The usual approach, when building a WPF application, even when using a `ViewModel`, fact remains that the views are rather tightly coupled by the model you&#39;re using. ]]></description> <link>//steven.thuriot.be/wpf-a-model-first-approach</link> <guid isPermaLink="true">//steven.thuriot.be/wpf-a-model-first-approach</guid> <pubDate>2014-12-03T19:05:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/wpf.jpg" medium="image"/> <content:encoded><![CDATA[<p>The usual approach, when building a WPF application, even when using a <code>ViewModel</code>, fact remains that the views are rather tightly coupled by the model you&#39;re using. </p> <p>Don&#39;t get me wrong though, a well built application will still be easy to adjust when the model changes. But here&#39;s the catch, it won&#39;t be an unusual scenario having to slightly adjust your view when reworking your model.</p> <h2>Imagine the following scenario</h2> <p>You have a property on your model indicating wether you&#39;re in a relationship. This seems pretty straightforward and you&#39;ve always modeled this by using a boolean value on your model. On the view, you&#39;ve placed a checkbox. Simple <code>yes/no</code> question, right?</p> <p>However, Facebook and others have already shown us that a lot of people don&#39;t have a <code>yes/no</code> answer to this question. If we want to follow in Facebook&#39;s steps, we will have to use a <code>ComboBox</code> instead with values like <code>Yes</code>, <code>No</code> and <code>It&#39;s Complicated</code>.</p> <p>After having adjusted our model, the boolean has disappeared and probably been replaced with an <code>enum</code> or even a <code>string</code> value. The CheckBox no longer suffices, so after this change we&#39;ll have to adjust our view as well by changing the type from CheckBox to ComboBox.</p> <p>This is a hassle and can quickly pull you out of the zone while programming and refactoring.</p> <h1>Approaching from a different angle</h1> <h2>What if...</h2> <p>...instead of adjusting the view to your model, the view is automatically build depending on the model attached to it?</p> <p>That would mean that in our previous sample, a bit of mark up would have to be changed and the view would automatically adjust. This would also mean that a view can be used again with a different model and adjust to it enough to make it seem like it was built just for that model.</p> <p>Taking it a step further, this metadata could even be retrieved from a database at program startup. That would make it possible to change your view completely by adjusting a few fields in your online database, e.g. changing from a simple TextBox to a ComboBox with preset values.</p> <p>Having loved the idea behind this for ages now, I&#39;ve worked on a little WPF framework that does just the thing!</p> <p>Here&#39;s a small preview of a view completely built up from the model. <img src="https://cloud.githubusercontent.com/assets/544444/5234817/8cb922ac-77dd-11e4-801d-bcf6bad9e994.png" alt="Nova Bindings"></p> <h2>So how do we use it?</h2> <h3>Including and referencing</h3> <p>First step, get a dll from my GitHub repo: <a href="https://github.com/StevenThuriot/Nova.Bindings">Nova.Bindings</a>.</p> <p>Second, merge Nova.Bindings&#39; <code>ResourceDictionary</code> into your app&#39;s dictionary.</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ResourceDictionary.MergedDictionaries&gt;</span>
        <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&quot;pack://application:,,,/Nova.Bindings;component/ValueEditor.xaml&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ResourceDictionary.MergedDictionaries&gt;</span>
</code></pre></div> <h3>Views</h3> <p>After doing this, views become as simple as using TextBlock/Labels and ValueEditors, combined with a special Binding. It will be the only editor you&#39;ll ever use again!</p> <p>A change in the model? No problem! The Bindings will take care of it for you!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;TextBlock</span>   <span class="na">Grid.Column=</span><span class="s">&quot;0&quot;</span> <span class="na">Text=</span><span class="s">&quot;{LabelFor Model.Property}&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;ValueEditor</span> <span class="na">Grid.Column=</span><span class="s">&quot;1&quot;</span> <span class="na">Value=</span><span class="s">&quot;{ValueBinding Model.Property}&quot;</span> <span class="nt">/&gt;</span>
</code></pre></div> <p>The <code>LabelFor</code> binding has a property <code>AppendColon</code>, default <code>true</code>, which will append a colon to the label.</p> <p>The <code>ValueBinding</code> binding has two properties that can be set:</p> <ul> <li>Mode ( == BindingMode, default value is BindingMode.Default )</li> <li>Converter ( Default null )</li> </ul> <h4>Implementation</h4> <p>Implement IHaveSettingsManager on your ViewModel. The bindings will try to resolve this Manager (from the control up) to try and find the control&#39;s settings.</p> <h4>ViewModel</h4> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ViewModel</span> <span class="p">:</span> <span class="n">IHaveSettingsManager</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">ISettingsManager</span> <span class="n">SettingsManager</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">ViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">SettingsManager</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NovaSettingsManager</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <h4>Settings Manager</h4> <p>Next, create a settings manager.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">NovaSettingsManager</span> <span class="p">:</span> <span class="n">ISettingsManager</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">IDefinition</span><span class="p">&gt;</span> <span class="n">_definitions</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">DefinitionFactory</span> <span class="n">_factory</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">NovaSettingsManager</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_definitions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">IDefinition</span><span class="p">&gt;();</span>

        <span class="c1">//TODO;</span>
        <span class="n">_factory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ComboBoxFactory</span><span class="p">();</span> <span class="c1">//Good starter since it&#39;s a special case.</span>
        <span class="n">_factory</span><span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">RadioButtonFactory</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">CheckBoxFactory</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">DatePickerFactory</span><span class="p">&gt;()</span>
                <span class="c1">//.......... </span>
                <span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">TextBoxFactory</span><span class="p">&gt;();</span> <span class="c1">//Decent Fallback in case nothing matches.</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">IDefinition</span> <span class="nf">GetDefinition</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">IDefinition</span> <span class="n">definition</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_definitions</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="k">out</span> <span class="n">definition</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">definition</span> <span class="p">=</span> <span class="n">_factory</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="n">_definitions</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">definition</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">//Sample [Chain Of Responsilibity](https://www.dofactory.com/net/chain-of-responsibility-design-pattern)</span>
<span class="k">abstract</span> <span class="k">class</span> <span class="nc">DefinitionFactory</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="n">DefinitionFactory</span> <span class="n">_successor</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">DefinitionFactory</span> <span class="nf">SetSuccessor</span><span class="p">(</span><span class="n">DefinitionFactory</span> <span class="n">successor</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_successor</span> <span class="p">=</span> <span class="n">successor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">DefinitionFactory</span> <span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
        <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">DefinitionFactory</span><span class="p">,</span> <span class="k">new</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_successor</span> <span class="p">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">IDefinition</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">definition</span> <span class="p">=</span> <span class="n">CreateDefinition</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">definition</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_successor</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">definition</span> <span class="p">=</span> <span class="n">_successor</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">definition</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotSupportedException</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">abstract</span> <span class="n">IDefinition</span> <span class="nf">CreateDefinition</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <h4>Meta Data</h4> <p>The id the <code>GetDefinition</code> method receives is determined by the metadata you have to place on the model. (Hence <strong>model first</strong>) This is done by adding attributes.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Settings(&quot;PersonName&quot;)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</code></pre></div> <p>In this specific case, the id will be <em>PersonName</em>. Sometimes, fields can have multiple definitions, depending on the situations. Imagine a class where a second property determins if the decorated property is shown as a combobox or a normal text field. This can&#39;t be decorated by a simple attribute.</p> <p>In this case, we can use a second provided attribute.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[DynamicSettings(&quot;SomeDynamicProperty&quot;)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="n">Property</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</code></pre></div> <p>When using <code>Dynamic Settings</code>, the class that has said property <em>must</em> implement <code>IHaveDynamicPropertySettings</code>.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Model</span> <span class="p">:</span> <span class="n">IHaveDynamicPropertySettings</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nf">ProvideDynamicSettings</span><span class="p">(</span><span class="kt">string</span> <span class="n">field</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">field</span> <span class="p">==</span> <span class="s">&quot;SomeDynamicProperty&quot;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">SecondProperty</span> <span class="p">==</span> <span class="s">&quot;Something&quot;</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">&quot;PersonName&quot;</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">&quot;PersonList&quot;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">field</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The string returned will be the id used in the settings manager to find the correct <code>IDefinition</code>.</p> <h4>Definitions</h4> <h5>Default</h5> <p>A definition has the following properties:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IDefinition</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">string</span> <span class="n">Label</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">string</span> <span class="n">Editor</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <ul> <li><code>Id</code> is the id from the <code>GetDefinition</code> method.</li> <li><code>Label</code> is the text used for the <code>LabelFor</code> extension.</li> <li><code>Editor</code> is the type of editor that needs to be used.</li> </ul> <p>This will do for most settings. Two control types require a specific interface to be implemented;</p> <h5>ComboBox</h5> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IComboBoxDefinition</span> <span class="p">:</span> <span class="n">IDefinition</span>
<span class="p">{</span>
    <span class="n">IEnumerable</span> <span class="n">ItemsSource</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <h5>RadioButton</h5> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IRadioButtonDefinition</span> <span class="p">:</span> <span class="n">IDefinition</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">GroupName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>To make life easier, constants are available! The <code>Editor</code> is defined as a string rather than an enum to make it easier to add your own implementations!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Nova.Bindings.ValueEditor.Definitions.ValueTextEditor
Nova.Bindings.ValueEditor.Definitions.ValueCheckBoxEditor
Nova.Bindings.ValueEditor.Definitions.ValueRadioButtonEditor
Nova.Bindings.ValueEditor.Definitions.ValueComboBoxEditor
</code></pre></div> <h4>Templates</h4> <p>A template can easily be added by adding a similar template into the App&#39;s Resource Dictionary. Samples can be found <a href="https://github.com/StevenThuriot/Nova.Bindings/blob/master/Nova.Bindings/ValueEditor.xaml">here</a>.</p> <p>Note that the Template keys are the same as the Editor constants that IDefinition supplies!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ControlTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;ValueTextEditor&quot;</span> <span class="na">TargetType=</span><span class="s">&quot;n:ValueEditor&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;TextBox</span> <span class="na">x:Name=</span><span class="s">&quot;PART_ValueEditor&quot;</span>
             <span class="na">Text=</span><span class="s">&quot;{Binding Value, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ControlTemplate&gt;</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[HyperQube]]></title> <description><![CDATA[[HyperQube](https://github.com/StevenThuriot/HyperQube) is(/started as) an IFTTT variant, built on top of PushBullet, created for the desktop. ]]></description> <link>//steven.thuriot.be/hyperqube</link> <guid isPermaLink="true">//steven.thuriot.be/hyperqube</guid> <pubDate>2014-09-23T17:22:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/cube.jpg" medium="image"/> <content:encoded><![CDATA[<p><a href="https://github.com/StevenThuriot/HyperQube">HyperQube</a> is(/started as) an IFTTT variant, built on top of PushBullet, created for the desktop.</p> <p>It connects to PushBullet&#39;s websocket using the API key provided in your account settings. It filters out the messages the plugins are interested in using <a href="https://github.com/Reactive-Extensions">Reactive Extensions</a>.</p> <p>Deep down, everything is built completely modular so each part is easy to replace by another component (loaded by MEF). (e.g. input can easily be replaced by another UI, in WPF, WinForms, ...) By default, everything is built with an eye on maximum compatibility. ( .NET / Mono )</p> <h1>Building plugins</h1> <p>A sample project has been set up <a href="https://github.com/steventhuriot/hyperqube-plugins">here</a>.</p> <p>First, create a new project. All you need to start is a reference to <code>HyperQube.Library</code>. To make life easy, a nuget package is available!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Install-Package HyperQube.Library
</code></pre></div> <p>Building a plugin is as simple as implementing an interface. </p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IQube</span>
<span class="p">{</span>
  <span class="kt">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//Textual reference used throughout the project.</span>

  <span class="n">Interests</span> <span class="n">Interests</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//Things you are interested in. This is a flags enum.</span>

  <span class="k">void</span> <span class="nf">Receive</span><span class="p">(</span><span class="kt">dynamic</span> <span class="n">json</span><span class="p">);</span> <span class="c1">//Triggers each time a push message is received.</span>
<span class="p">}</span>
</code></pre></div> <p>Create a new class for your plugin and simply implement the interface.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">class</span> <span class="nc">Qube</span> <span class="p">:</span> <span class="n">IQube</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">Title</span>
  <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&quot;My First Plugin&quot;</span> <span class="p">};</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="n">Interests</span> <span class="n">Interests</span> 
  <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Interests</span><span class="p">.</span><span class="n">Note</span> <span class="p">|</span> <span class="n">Interests</span><span class="p">.</span><span class="n">Mirror</span><span class="p">;</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Receive</span><span class="p">(</span><span class="kt">dynamic</span> <span class="n">json</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">//json contains the full push message in json format, as pushed by PushBullet. </span>
    <span class="c1">//http://docs.pushbullet.com/v2/pushes/</span>

    <span class="c1">//This can be used just like you would do in javascript, using dynamics.</span>

    <span class="c1">//To get the actual message, a helper is available.</span>
    <span class="c1">//This, in return, is a json object.</span>
    <span class="kt">var</span> <span class="n">jsonMessage</span> <span class="p">=</span> <span class="n">Push</span><span class="p">.</span><span class="n">GetBody</span><span class="p">((</span><span class="kt">object</span><span class="p">)</span><span class="n">json</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">jsonMessage</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="kt">string</span> <span class="n">message</span> <span class="p">=</span> <span class="n">jsonMessage</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
      <span class="c1">//Do something with your newly acquired message!</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>This will do for basic cases, but in most cases you&#39;ll need to get some I/O going. Since HyperQube uses <code>MEF</code> to build up its infrastructure, you can simply define a constructor with the parameters you need.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[ImportingConstructor]</span>
<span class="k">public</span> <span class="nf">Qube</span><span class="p">(</span><span class="n">IInputProvider</span> <span class="n">inputProvider</span><span class="p">,</span> <span class="n">IOutputProvider</span> <span class="n">outputProvider</span><span class="p">)</span>
<span class="p">{</span>

<span class="p">}</span>
</code></pre></div> <p>The output provider can trace messages (e.g. logging) or visually show messages. In it&#39;s default state, using the <code>Write</code> method of the output provider will show a tooltip coming from the system tray.</p> <p>The input provider can be used to ask the user about some variables in your plugin. In the sample project, this is used to ask the user about their XBMC set up and what exactly they want the plugin to do.</p> <p>The user can be asked about these things by using Questions. A question is a class implementing <code>IQuestion</code>. A few default <a href="https://github.com/StevenThuriot/HyperQube/tree/master/HyperQube.Library/Questions">scenario&#39;s</a> have been implemented already.</p> <ul> <li>CheckBox / Toggle (<a href="https://github.com/StevenThuriot/HyperQube/blob/master/HyperQube.Library/Questions/BooleanQuestion.cs">BooleanQuestion</a>)</li> <li>ComboBox (<a href="https://github.com/StevenThuriot/HyperQube/blob/master/HyperQube.Library/Questions/SelectableQuestion.cs">SelectableQuestion</a>)</li> <li>TextBox / PasswordBox (<a href="https://github.com/StevenThuriot/HyperQube/blob/master/HyperQube.Library/Questions/TextQuestion.cs">TextQuestion</a>)</li> </ul> <p>A question can have two types of validation.</p> <ul> <li>Required field (semi-automatic by setting a simple boolean)</li> <li>Aditional validation by implementing <code>IValidatableQuestion</code> <ul> <li>This interface has a property that supplies a list of <code>IValidation</code> instances.</li> <li>A base class has been supplied to easily implement a validation: <code>Validation</code></li> <li>A validation contains a predicate that returns true if the value in the box is valid.</li> <li>It also contains a message to show when the value is not valid. <ul> <li>Two parameters can be used in these messages that will be replaced at runtime:</li> <li>{title} : The title of the plugin</li> <li>{value} : The value of the box.</li> </ul></li> <li>The sample project contains a few extra implementations that it needs, e.g. <a href="https://github.com/StevenThuriot/HyperQube-Plugins/blob/master/Qube.XBMC/Questions/UriQuestion.cs">a question that asks about a uri</a>.</li> <li>The <code>ValidationMessages</code> class contains a few default messages.</li> </ul></li> </ul> <p>In most cases, you&#39;ll want to trigger the input through the tray icon. You can add menu&#39;s to the tray icon for your plugin by implementing <code>IQubeMenuItem</code>.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IQubeMenuItem</span>
<span class="p">{</span>
  <span class="kt">string</span> <span class="n">MenuTitle</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//The title shown in the tray.</span>
  <span class="k">void</span> <span class="nf">OpenMenu</span><span class="p">();</span> <span class="c1">//The method that gets called when the menu item is clicked.</span>
<span class="p">}</span>
</code></pre></div> <p>If you only have one menu item, the title will actually be the name of your plugin. The <code>MenuTitle</code> is a fallback when your plugin has submenu&#39;s. You can give your plugin submenus by implementing <code>IQubeMenuItemWithSubMenus</code>, which inherits from <code>IQubeMenuItem</code>.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IQubeMenuItemWithSubMenus</span> <span class="p">:</span> <span class="n">IQubeMenuItem</span>
<span class="p">{</span>
  <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IQubeMenuItem</span><span class="p">&gt;</span> <span class="n">SubMenuItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>This way, you can have as many menu&#39;s and submenu&#39;s that you need.</p> <p>After doing all this, simply build your plugin and drop it anywhere in the root or any subfolder of the <code>HyperQube</code> executable. <code>MEF</code> will automatically pick up your new plugin!</p> ]]></content:encoded> </item> <item> <title><![CDATA[NuGet as a plugin deployment platform]]></title> <description><![CDATA[[NuGet](http://www.nuget.org/) has become quite popular among .NET developers. As described in one of my earlier posts, it is an amazing tool to manage external dependencies. ]]></description> <link>//steven.thuriot.be/nuget-as-a-plugin-deployment-platform</link> <guid isPermaLink="true">//steven.thuriot.be/nuget-as-a-plugin-deployment-platform</guid> <pubDate>2013-12-18T20:39:00+00:00</pubDate> <content:encoded><![CDATA[<p><a href="http://www.nuget.org/">NuGet</a> has become quite popular among .NET developers. As described in one of my earlier posts, it is an amazing tool to manage external dependencies.</p> <p>It&#39;s not just a mere dependency manager, though. No, it is so much more! The <a href="http://www.nuget.org/packages/Nuget.Core/">NuGet core framework</a> is available as NuGet package itself. This Core Framework allows you to use NuGet&#39;s packaging abilities together with it&#39;s deployment strategy to basically do whatever you want.</p> <p>One of the possibilities is plugin deployment. In this post, I will explain how to do this. But first, I will explain how I got to investigating this technology.</p> <h1>Background info</h1> <p>I&#39;m currently working on a project that quickly allows you to build modules. These modules are then loaded by a hoster shell through MEF and automagically turned into a navigational tree.</p> <p>Spreading the modules with the hoster can quickly become quite the hassle. Most commonly, this would be done through a clickonce solution. The problem with this, however, is that the clickonce package can quickly become quite large and may contain other modules that do not interest our user.</p> <p>By (ab)using NuGet, we can let the user browse through a gallery and let them pick out the modules they want to use. When a new version of a certain module is released, the user can simply update that one single module, instead of having to download the entire clickonce package again.</p> <h1>The code</h1> <p>And now, finally, comes the interesting part. The code!</p> <p>First, we select a location to save our plugins. The easiest way to do this, is by using a common folder in the location of our entry assembly (the hoster executable).</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="kt">var</span> <span class="n">entryAssembly</span> <span class="p">=</span> <span class="n">Assembly</span><span class="p">.</span><span class="n">GetEntryAssembly</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">location</span> <span class="p">=</span> <span class="n">entryAssembly</span><span class="p">.</span><span class="n">Location</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">pluginDirectory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileInfo</span><span class="p">(</span><span class="n">location</span><span class="p">).</span><span class="n">Directory</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">pluginFolder</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span><span class="n">pluginDirectory</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="s">&quot;Modules&quot;</span><span class="p">);</span>
</code></pre></div> <p>Now that we know where we&#39;re going to save our packages, we can intialize our repository. This can be done in a single line of code.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="kt">var</span> <span class="n">repository</span> <span class="p">=</span> <span class="n">PackageRepositoryFactory</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">CreateRepository</span><span class="p">(</span><span class="s">@&quot;http://novamodules.apphb.com/nuget&quot;</span><span class="p">);</span>
</code></pre></div> <p>We will now query the repository to retrieve the packages. Usually, we are only interested in the latest packages.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="kt">var</span> <span class="n">plugins</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">GetPackages</span><span class="p">().</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">IsLatestVersion</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</code></pre></div> <p>This list of plugins can then be shown to our user, who can then select which plugins to install or update. Installing the plugins themselves, can also be done in only a few lines of code.</p> <p>First we create a package manager. Using this manager, we can then install, update or uninstall the packages of our choice.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="kt">var</span> <span class="n">manager</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PackageManager</span><span class="p">(</span><span class="n">repository</span><span class="p">,</span> <span class="n">pluginFolder</span><span class="p">);</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">plugin</span> <span class="k">in</span> <span class="n">plugins</span><span class="p">)</span>
        <span class="n">manager</span><span class="p">.</span><span class="n">InstallPackage</span><span class="p">(</span><span class="n">plugin</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</code></pre></div> <p>Uninstalling the packages can be tricky, however, since .NET will most likely be using them. A way around this, is by loading them into a different appdomain with ShadowCopy enabled. This can, however, quickly become quite difficult. An easier solution would be to simply move the package into another folder and simply clean up that folder every time your application starts.</p> <p>The packages can now easily be loaded up as plugins using MEF&#39;s <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.hosting.directorycatalog.aspx">DirectoryCatalog</a>. Because of the way NuGet installs packages, the easiest way to retrieve the plugins is by retrieving all the &quot;lib&quot; folders in our Modules directory and creating an aggregate of DirectoryCatalogs.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="kt">var</span> <span class="n">catalogs</span> <span class="p">=</span> <span class="n">pluginDirectory</span><span class="p">.</span><span class="n">GetDirectories</span><span class="p">(</span><span class="s">&quot;lib&quot;</span><span class="p">,</span> <span class="n">SearchOption</span><span class="p">.</span><span class="n">AllDirectories</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">DirectoryCatalog</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">FullName</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">directoryAggregate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AggregateCatalog</span><span class="p">(</span><span class="n">catalogs</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">container</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CompositionContainer</span><span class="p">(</span><span class="n">directoryAggregate</span><span class="p">);</span>
</code></pre></div> <p>From now on, deploying your modules will be easier than ever!</p> ]]></content:encoded> </item> <item> <title><![CDATA[Resolving types while stripping down nullables]]></title> <description><![CDATA[I&#39;m currently working on a WPF project that uses advanced validation for their screens. ]]></description> <link>//steven.thuriot.be/resolving-types-while-stripping-down-nullables</link> <guid isPermaLink="true">//steven.thuriot.be/resolving-types-while-stripping-down-nullables</guid> <pubDate>2013-11-27T12:10:00+00:00</pubDate> <content:encoded><![CDATA[<p>I&#39;m currently working on a WPF project that uses advanced validation for their screens.</p> <p>Each WPF control has a property that accepts a data type for the property you&#39;re binding it to. This datatype will be used during validation so illegal formats aren&#39;t filled in. (e.g. no strings when ints are expected, no ints when decimals are specified, etc...). We currently have a few metadata builders that simplify this process greatly by resolving types and setting them automatically.</p> <p>There is one catch, though. &lt;!--more--&gt;When binding to a nullable property, the base type is used rather than the nullable type.</p> <p>Coming up with a solution, was luckily not that hard. Rather than setting the datatype directly from the passed generic type, we added a little helper method. This method makes sure the correct type is always resolved.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="n">GetDataType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">T</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">Nullable</span><span class="p">.</span><span class="n">GetUnderlyingType</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">??</span> <span class="n">type</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Exceptions and the TPL]]></title> <description><![CDATA[When an exception occurs while using the TPL, it will always get wrapped with an [AggregateException](http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx) before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well. ]]></description> <link>//steven.thuriot.be/exceptions-and-the-tpl</link> <guid isPermaLink="true">//steven.thuriot.be/exceptions-and-the-tpl</guid> <pubDate>2013-11-27T10:50:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/Carnivorous-Rabbit.jpg" medium="image"/> <content:encoded><![CDATA[<p>When an exception occurs while using the TPL, it will always get wrapped with an <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well.</p> <p>This is, <em>of course</em>, something you do not want to happen as the callstack contains valuable information.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">try</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Run</span><span class="p">(...)</span>
    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="n">AggregateException</span> <span class="n">ex</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ExceptionDispatchInfo</span><span class="p">.</span><span class="n">Capture</span><span class="p">(</span><span class="n">ex</span><span class="p">.</span><span class="n">InnerException</span><span class="p">).</span><span class="n">Throw</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <p>Due to the new <a href="http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx">async/await</a> system Microsoft introduced in .NET 4.5, they simplified this greatly by introducing the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo.aspx">ExceptionDispatchInfo</a> helper.</p> <p>By using this class, you are able to rethrow a caught exception object without losing the callstack. This allows you to unwrap the <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> and rethrow the actual exception. This allows you or the users of your code to catch specific exceptions.</p> <p>The snippet above is, of course, not a very realistic way to use this helper class, but shows what it does perfectly.</p> ]]></content:encoded> </item> <item> <title><![CDATA[NuGet and Hoster Packages in a CI environment]]></title> <description><![CDATA[[NuGet](http://www.nuget.org/) is the package manager for the Microsoft development platform including .NET. The NuGet client tools provide the ability to produce and consume packages. ]]></description> <link>//steven.thuriot.be/nuget-and-hoster-packages-in-a-ci-environment</link> <guid isPermaLink="true">//steven.thuriot.be/nuget-and-hoster-packages-in-a-ci-environment</guid> <pubDate>2013-10-16T18:32:00+00:00</pubDate> <content:encoded><![CDATA[<p><a href="http://www.nuget.org/">NuGet</a> is the package manager for the Microsoft development platform including .NET. The NuGet client tools provide the ability to produce and consume packages. </p> <p>The NuGet Gallery is the central package repository used by all package authors and consumers.</p> <h1>Restoring Packages on Build</h1> <p>NuGet has come a long way since it was first introduced and has gained a lot of popularity in our community. More and more parties are starting to ship their assemblies as NuGet packages and they&#39;re so easy to use that there really isn&#39;t any reason not to.</p> <p>Building the packages themselves used to be a small pain to set up, but even that is implemented into NuGet that it&#39;s just a parameter away. By enabling the NuGet package restore feature, a few files are added to the solution.</p> <p><a href="//cdn.thuriot.be/images/NuGetCI/packagerestore.png"><img src="//cdn.thuriot.be/images/NuGetCI/packagerestore.png" alt="Package Restore"></a></p> <p>One of these files is an msbuild targets file. It generally contains data that (as most of you know) allows the user to restore packages as a pre-build action. This way, the actual packages don&#39;t have to be checked into version control.</p> <p><a href="//cdn.thuriot.be/images/NuGetCI/targets.png"><img src="//cdn.thuriot.be/images/NuGetCI/targets.png" alt="Targets"></a></p> <p><em>As of <a href="https://docs.nuget.org/docs/reference/package-restore#MSBuild-Integrated_Package_Restore">version 2.7+</a> of NuGet, this approach is no longer needed if you just want to restore the packages. The option is still available, though, in case you require more specific settings. For more information about the automatic package restore in v2.7+ and how to possibly migrate your solution, you can visit the nuget docs <a href="http://docs.nuget.org/docs/workflows/migrating-to-automatic-package-restore">here</a>.</em></p> <h1>Building Packages</h1> <p>Another neat feature implemented in this file, however, is something that can be triggered using the &quot;BuildPackage&quot; parameter, which can be passed to msbuild. When setting this parameter to &quot;true&quot;, NuGet packages will be automatically build as a post-build event. NuGet will automatically retrieve all metadata from the project and generate a fitting nuspec file, rending <a href="http://steven.thuriot.be/projects/nuget-build-and-deploy/" title="NuGet build and deploy" target="_blank">one of my previous projects</a> completely useless. In case this generated nuspec isn&#39;t sufficient, you can create a custom nuspec in the root folder of the project. If this file has the same name as your csproj, NuGet will automatically merge the metadata it retrieves from the project with the nuspec file you placed there. Magic!</p> <p>Long story short, setting up automatic NuGet package creation in a CI environment is peanuts. </p> <p>At this point, you might be thinking <em>&quot;Alright, Steven, what exactly are we trying to do here? We&#39;re just scratching some basic nuget stuff here...&quot;</em>. </p> <p>Hold your horses, here comes the tricky part. What if you’re going a step further than that? One of my current projects contains a hoster application. The idea was to allow the user of my framework to easily create a module with all their specific logic, without having to worry to much about that specific window, WPF and framework logic that gets rewritten every time you work on a similar project. This module can be seen as a simple MEF plugin that the hoster will pick up. The hoster itself will take care of all the visuals, navigation through these modules and much more. </p> <h1>Hoster as a package</h1> <p>Because all of the separate parts can easily be managed as NuGet dependencies, it would be very useful if the actual hoster executable was distributed as a NuGet as well. Starting NuGet v2.3, the packages support including custom targets and props files. Writing one to copy the hoster to the output folder would then be peanuts.</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="err">&lt;</span> ?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
<span class="nt">&lt;project</span> <span class="na">ToolsVersion=</span><span class="s">&quot;4.0&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;propertygroup&gt;</span>
        <span class="nt">&lt;startaction&gt;</span>Program<span class="nt">&lt;/startaction&gt;</span>
        <span class="nt">&lt;startprogram&gt;</span>$(TargetDir)Nova.Shell.exe<span class="nt">&lt;/startprogram&gt;</span>

        <span class="nt">&lt;builddependson&gt;</span>
            $(BuildDependsOn);
            CopyNovaShell;
        <span class="nt">&lt;/builddependson&gt;</span>
    <span class="nt">&lt;/propertygroup&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">Name=</span><span class="s">&quot;CopyNovaShell&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;copy</span> <span class="na">SourceFiles=</span><span class="s">&quot;$(MSBuildThisFileDirectory)\..\..\tools\net45\Nova.Shell.exe&quot;</span> <span class="na">DestinationFolder=</span><span class="s">&quot;$(TargetDir)&quot;</span><span class="nt">&gt;&lt;/copy&gt;</span>
    <span class="nt">&lt;/target&gt;</span>

<span class="nt">&lt;/project&gt;</span>
</code></pre></div> <p>The above targets file will automatically copy my hoster executable, included in the NuGet package, to the output folder as a post-build event. With this set up, I set up my CI builds and turned on the &quot;BuildPackage&quot; feature. Everything was working out well, except for the hoster package. NuGet was automatically adding the hoster exe to the lib folder in the NuGet package. Because of this, referencing the NuGet would reference the hoster in my module project, and that was exactly something I did not want!</p> <p>As a fix for this issue, I wrote my own custom targets file that picks up in the NuGet build chain and imported it in my hoster project.</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="err">&lt;</span> ?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
<span class="nt">&lt;project</span> <span class="na">ToolsVersion=</span><span class="s">&quot;4.0&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;propertygroup</span> <span class="na">Condition=</span><span class="s">&quot;$(BuildPackage) == &#39;true&#39;&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;previousbuildcommand&gt;</span>$(BuildCommand)<span class="nt">&lt;/previousbuildcommand&gt;</span>
                <span class="nt">&lt;buildcommand&gt;</span>echo Starting custom nuget pack<span class="nt">&lt;/buildcommand&gt;</span>

        <span class="nt">&lt;builddependson&gt;</span>
            $(BuildDependsOn);
            PackageNuGet;
        <span class="nt">&lt;/builddependson&gt;</span>
    <span class="nt">&lt;/propertygroup&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">Name=</span><span class="s">&quot;PackageNuGet&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;getproductversion</span> <span class="na">AssemblyFileName=</span><span class="s">&quot;$(TargetDir)Nova.Shell.exe&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;output</span> <span class="na">PropertyName=</span><span class="s">&quot;AssemblyInfoVersion&quot;</span> <span class="na">TaskParameter=</span><span class="s">&quot;ProductVersion&quot;</span><span class="nt">&gt;&lt;/output&gt;</span>
                <span class="nt">&lt;/getproductversion&gt;</span>

        <span class="nt">&lt;exec</span> <span class="na">Command=</span><span class="s">&quot;$(NuGetCommand) pack &amp;quot;$(ProjectDir)NuGet\Nova.Shell.nuspec&amp;quot; -p OutputPath=&amp;quot;$(TargetDir);version=$(AssemblyInfoVersion)&amp;quot; -o &amp;quot;$(PackageOutputDir)&amp;quot; -symbols &quot;</span><span class="nt">&gt;&lt;/exec&gt;</span>

                <span class="nt">&lt;createproperty</span> <span class="na">Value=</span><span class="s">&quot;$(PreviousBuildCommand)&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;output</span> <span class="na">PropertyName=</span><span class="s">&quot;BuildCommand&quot;</span> <span class="na">TaskParameter=</span><span class="s">&quot;Value&quot;</span><span class="nt">&gt;&lt;/output&gt;</span>
                <span class="nt">&lt;/createproperty&gt;</span>
    <span class="nt">&lt;/target&gt;</span>

        <span class="nt">&lt;usingtask</span> <span class="na">TaskName=</span><span class="s">&quot;GetProductVersion&quot;</span> <span class="na">TaskFactory=</span><span class="s">&quot;CodeTaskFactory&quot;</span> <span class="na">AssemblyFile=</span><span class="s">&quot;$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;parametergroup&gt;</span>
            <span class="nt">&lt;assemblyfilename</span> <span class="na">ParameterType=</span><span class="s">&quot;System.String&quot;</span> <span class="na">Required=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;&lt;/assemblyfilename&gt;</span>
            <span class="nt">&lt;productversion</span> <span class="na">ParameterType=</span><span class="s">&quot;System.String&quot;</span> <span class="na">Output=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;&lt;/productversion&gt;</span>
        <span class="nt">&lt;/parametergroup&gt;</span>

        <span class="nt">&lt;task&gt;</span>
            <span class="nt">&lt;reference</span> <span class="na">Include=</span><span class="s">&quot;System.Core&quot;</span><span class="nt">&gt;&lt;/reference&gt;</span>
            <span class="nt">&lt;using</span> <span class="na">Namespace=</span><span class="s">&quot;System&quot;</span><span class="nt">&gt;&lt;/using&gt;</span>
            <span class="nt">&lt;using</span> <span class="na">Namespace=</span><span class="s">&quot;System.Diagnostics&quot;</span><span class="nt">&gt;&lt;/using&gt;</span>
            <span class="nt">&lt;using</span> <span class="na">Namespace=</span><span class="s">&quot;System.IO&quot;</span><span class="nt">&gt;&lt;/using&gt;</span>
            <span class="nt">&lt;using</span> <span class="na">Namespace=</span><span class="s">&quot;System.Net&quot;</span><span class="nt">&gt;&lt;/using&gt;</span>
            <span class="nt">&lt;using</span> <span class="na">Namespace=</span><span class="s">&quot;Microsoft.Build.Framework&quot;</span><span class="nt">&gt;&lt;/using&gt;</span>
            <span class="nt">&lt;using</span> <span class="na">Namespace=</span><span class="s">&quot;Microsoft.Build.Utilities&quot;</span><span class="nt">&gt;&lt;/using&gt;</span>
            <span class="nt">&lt;code</span> <span class="na">Type=</span><span class="s">&quot;Fragment&quot;</span> <span class="na">Language=</span><span class="s">&quot;cs&quot;</span><span class="nt">&gt;</span>
                <span class="err">&lt;</span> ![CDATA[
                                this.ProductVersion = FileVersionInfo.GetVersionInfo(this.AssemblyFileName).ProductVersion;
            ]]&gt;
            <span class="nt">&lt;/code&gt;</span>
        <span class="nt">&lt;/task&gt;</span>
    <span class="nt">&lt;/usingtask&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div> <p>The above script will temporarily overwrite the NuGet build command and replace it with a custom one. The custom build command will read out the Assembly Informational version attribute of the package you&#39;re trying to build and use it to build and version the Nuget package we desire. The actual nuspec I used as a template looks like this:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="err">&lt;</span> ?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
<span class="nt">&lt;package</span> <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/packaging/2013/01/nuspec.xsd&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;metadata</span> <span class="na">minClientVersion=</span><span class="s">&quot;2.3&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;id&gt;</span>Nova.Shell<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;version&gt;</span>$version$<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;title&gt;</span>Nova Shell<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;authors&gt;</span>Steven Thuriot<span class="nt">&lt;/authors&gt;</span>
        <span class="nt">&lt;owners&gt;</span>Steven Thuriot<span class="nt">&lt;/owners&gt;</span>
        <span class="nt">&lt;licenseurl&gt;</span>https://github.com/StevenThuriot/Nova/blob/master/LICENSE.md<span class="nt">&lt;/licenseurl&gt;</span>
        <span class="nt">&lt;projecturl&gt;</span>http://github.com/StevenThuriot/Nova<span class="nt">&lt;/projecturl&gt;</span>
        <span class="nt">&lt;requirelicenseacceptance&gt;</span>true<span class="nt">&lt;/requirelicenseacceptance&gt;</span>
        <span class="nt">&lt;description&gt;</span>Small graphical framework to quickly start developing your apps without having to worry too much about controls and looks.<span class="nt">&lt;/description&gt;</span>
    <span class="nt">&lt;/metadata&gt;</span>
    <span class="nt">&lt;files&gt;</span>
        <span class="nt">&lt;file</span> <span class="na">src=</span><span class="s">&quot;Nova.Shell.targets&quot;</span> <span class="na">target=</span><span class="s">&quot;build\net45\Nova.Shell.targets&quot;</span><span class="nt">&gt;&lt;/file&gt;</span>
        <span class="nt">&lt;file</span> <span class="na">src=</span><span class="s">&quot;$OutputPath$Nova.Shell.exe&quot;</span> <span class="na">target=</span><span class="s">&quot;tools\net45\&quot;</span><span class="nt">&gt;&lt;/file&gt;</span>
    <span class="nt">&lt;/files&gt;</span>
<span class="nt">&lt;/package&gt;</span>
</code></pre></div> <p>The result of all of this work, is a NuGet package without a lib folder, that contains our hoster executable in its tools folder. Combined with an internal targets file, the hoster gets copied to the output directory and used as the start-up parameter when starting the csproj with Visual Studio.</p> <p>Combine all of this with the automated builds and we have set up an easy and automatic way to create and push our NuGet hoster package.</p> ]]></content:encoded> </item> </channel> </rss>