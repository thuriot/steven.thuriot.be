<?xml version="1.0" encoding="UTF-8"?> <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"> <channel> <title><![CDATA[Steven Thuriot.be &mdash; .NET]]></title> <description><![CDATA[Thoughts, stories and ideas.]]></description> <link>http://steven.thuriot.be</link> <link href="//steven.thuriot.be/tag/net/rss/" rel="self" type="application/rss+xml"/> <ttl>60</ttl> <item> <title><![CDATA[WPF: A Model First Approach]]></title> <description><![CDATA[The usual approach, when building a WPF application, even when using a `ViewModel`, fact remains that the views are rather tightly coupled by the model you&#39;re using. Don&#39;t get me wrong though, a well built application will still be easy to adjust when the model changes. But here&#39;s the catch, it won&#39;t be an unusual scenario having to slightly adjust your view when reworking your model. ##Imagine the following scenario You have a property on your model indicating wether you&#39;re in a relationship. This seems pretty straightforward and you&#39;ve always modeled this by using a boolean value on your model. On the view, you&#39;ve placed a checkbox. Simple `yes/no` question, right? However, Facebook and others have already shown us that a lot of people don&#39;t have a `yes/no` answer to this question. If we want to follow in Facebook&#39;s steps, we will have to use a `ComboBox` instead with values like `Yes`, `No` and `It&#39;s Complicated`. After having adjusted our model, the boolean has disappeared and probably been replaced with an `enum` or even a `string` value. The CheckBox no longer suffices, so after this change we&#39;ll have to adjust our view as well by changing the type from CheckBox to ComboBox. This is a hassle and can quickly pull you out of the zone while programming and refactoring. #Approaching from a different angle ##What if... ...instead of adjusting the view to your model, the view is automatically build depending on the model attached to it? That would mean that in our previous sample, a bit of mark up would have to be changed and the view would automatically adjust. This would also mean that a view can be used again with a different model and adjust to it enough to make it seem like it was built just for that model. Taking it a step further, this metadata could even be retrieved from a database at program startup. That would make it possible to change your view completely by adjusting a few fields in your online database, e.g. changing from a simple TextBox to a ComboBox with preset values. Having loved the idea behind this for ages now, I&#39;ve worked on a little WPF framework that does just the thing! Here&#39;s a small preview of a view completely built up from the model. ![Nova Bindings](https://cloud.githubusercontent.com/assets/544444/5234817/8cb922ac-77dd-11e4-801d-bcf6bad9e994.png) ##So how do we use it? ###Including and referencing First step, get a dll from my GitHub repo: [Nova.Bindings](https://github.com/StevenThuriot/Nova.Bindings). Second, merge Nova.Bindings&#39; `ResourceDictionary` into your app&#39;s dictionary. ```xml &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source=&quot;pack://application:,,,/Nova.Bindings;component/ValueEditor.xaml&quot; /&gt; &lt;/ResourceDictionary.MergedDictionaries&gt; ``` ###Views After doing this, views become as simple as using TextBlock/Labels and ValueEditors, combined with a special Binding. It will be the only editor you&#39;ll ever use again! A change in the model? No problem! The Bindings will take care of it for you! ```xml &lt;TextBlock Grid.Column=&quot;0&quot; Text=&quot;{LabelFor Model.Property}&quot; /&gt; &lt;ValueEditor Grid.Column=&quot;1&quot; Value=&quot;{ValueBinding Model.Property}&quot; /&gt; ``` The `LabelFor` binding has a property `AppendColon`, default `true`, which will append a colon to the label. The `ValueBinding` binding has two properties that can be set: * Mode ( == BindingMode, default value is BindingMode.Default ) * Converter ( Default null ) ####Implementation Implement IHaveSettingsManager on your ViewModel. The bindings will try to resolve this Manager (from the control up) to try and find the control&#39;s settings. ####ViewModel ```csharp public class ViewModel : IHaveSettingsManager { public ISettingsManager SettingsManager { get; private set; } public ViewModel() { SettingsManager=new NovaSettingsManager(); } } ``` ####Settings Manager Next, create a settings manager. ```csharp public class NovaSettingsManager : ISettingsManager { private readonly Dictionary&lt;string, IDefinition&gt; _definitions; private readonly DefinitionFactory _factory; public NovaSettingsManager() { _definitions=new Dictionary&lt;string, IDefinition&gt;(); //TODO; _factory=new ComboBoxFactory(); //Good starter since it&#39;s a special case. _factory.SetSuccessor&lt;RadioButtonFactory&gt;() .SetSuccessor&lt;CheckBoxFactory&gt;() .SetSuccessor&lt;DatePickerFactory&gt;() //.......... .SetSuccessor&lt;TextBoxFactory&gt;(); //Decent Fallback in case nothing matches. } public IDefinition GetDefinition(string id) { IDefinition definition; if (_definitions.TryGetValue(id, out definition)) { return definition; } definition=_factory.Create(id); _definitions.Add(id, definition); return definition; } } //Sample [Chain Of Responsilibity](https://www.dofactory.com/net/chain-of-responsibility-design-pattern) abstract class DefinitionFactory { protected DefinitionFactory _successor; public DefinitionFactory SetSuccessor(DefinitionFactory successor) { return _successor=successor; } public DefinitionFactory SetSuccessor&lt;T&gt;() where T : DefinitionFactory, new() { return _successor=new T(); } public IDefinition Create(string id) { var definition=CreateDefinition(id); if (definition != null) return definition; if (_successor != null) { definition=_successor.Create(id); if (definition != null) return definition; } throw new NotSupportedException(id); } protected abstract IDefinition CreateDefinition(string id); } ``` ####Meta Data The id the `GetDefinition` method receives is determined by the metadata you have to place on the model. (Hence **model first**) This is done by adding attributes. ```csharp [Settings(&quot;PersonName&quot;)] public string Name { get; set;} ``` In this specific case, the id will be *PersonName*. Sometimes, fields can have multiple definitions, depending on the situations. Imagine a class where a second property determins if the decorated property is shown as a combobox or a normal text field. This can&#39;t be decorated by a simple attribute. In this case, we can use a second provided attribute. ```csharp [DynamicSettings(&quot;SomeDynamicProperty&quot;)] public string Property { get; set;} ``` When using `Dynamic Settings`, the class that has said property _must_ implement `IHaveDynamicPropertySettings`. ```csharp public class Model : IHaveDynamicPropertySettings { public string ProvideDynamicSettings(string field) { if (field == &quot;SomeDynamicProperty&quot;) { if (SecondProperty == &quot;Something&quot;) { return &quot;PersonName&quot;; } else { return &quot;PersonList&quot;; } } return field; } } ``` The string returned will be the id used in the settings manager to find the correct `IDefinition`. ####Definitions #####Default A definition has the following properties: ```csharp public interface IDefinition { string Id { get; } string Label { get; } string Editor { get; } } ``` * `Id` is the id from the `GetDefinition` method. * `Label` is the text used for the `LabelFor` extension. * `Editor` is the type of editor that needs to be used. This will do for most settings. Two control types require a specific interface to be implemented; #####ComboBox ```csharp public interface IComboBoxDefinition : IDefinition { IEnumerable ItemsSource { get; } } ``` #####RadioButton ```csharp public interface IRadioButtonDefinition : IDefinition { string GroupName { get; } } ``` To make life easier, constants are available! The `Editor` is defined as a string rather than an enum to make it easier to add your own implementations! ```xml Nova.Bindings.ValueEditor.Definitions.ValueTextEditor Nova.Bindings.ValueEditor.Definitions.ValueCheckBoxEditor Nova.Bindings.ValueEditor.Definitions.ValueRadioButtonEditor Nova.Bindings.ValueEditor.Definitions.ValueComboBoxEditor ``` ####Templates A template can easily be added by adding a similar template into the App&#39;s Resource Dictionary. Samples can be found [here](https://github.com/StevenThuriot/Nova.Bindings/blob/master/Nova.Bindings/ValueEditor.xaml). Note that the Template keys are the same as the Editor constants that IDefinition supplies! ```xml &lt;ControlTemplate x:Key=&quot;ValueTextEditor&quot; TargetType=&quot;n:ValueEditor&quot;&gt; &lt;TextBox x:Name=&quot;PART_ValueEditor&quot; Text=&quot;{Binding Value, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}&quot; /&gt; &lt;/ControlTemplate&gt; ``` ]]></description> <link>//steven.thuriot.be/wpf-a-model-first-approach</link> <guid isPermaLink="true">//steven.thuriot.be/wpf-a-model-first-approach</guid> <pubDate>2014-12-03T19:05:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/wpf.jpg" medium="image"/> <content:encoded><![CDATA[<p>The usual approach, when building a WPF application, even when using a <code>ViewModel</code>, fact remains that the views are rather tightly coupled by the model you&#39;re using. </p> <p>Don&#39;t get me wrong though, a well built application will still be easy to adjust when the model changes. But here&#39;s the catch, it won&#39;t be an unusual scenario having to slightly adjust your view when reworking your model.</p> <h2>Imagine the following scenario</h2> <p>You have a property on your model indicating wether you&#39;re in a relationship. This seems pretty straightforward and you&#39;ve always modeled this by using a boolean value on your model. On the view, you&#39;ve placed a checkbox. Simple <code>yes/no</code> question, right?</p> <p>However, Facebook and others have already shown us that a lot of people don&#39;t have a <code>yes/no</code> answer to this question. If we want to follow in Facebook&#39;s steps, we will have to use a <code>ComboBox</code> instead with values like <code>Yes</code>, <code>No</code> and <code>It&#39;s Complicated</code>.</p> <p>After having adjusted our model, the boolean has disappeared and probably been replaced with an <code>enum</code> or even a <code>string</code> value. The CheckBox no longer suffices, so after this change we&#39;ll have to adjust our view as well by changing the type from CheckBox to ComboBox.</p> <p>This is a hassle and can quickly pull you out of the zone while programming and refactoring.</p> <h1>Approaching from a different angle</h1> <h2>What if...</h2> <p>...instead of adjusting the view to your model, the view is automatically build depending on the model attached to it?</p> <p>That would mean that in our previous sample, a bit of mark up would have to be changed and the view would automatically adjust. This would also mean that a view can be used again with a different model and adjust to it enough to make it seem like it was built just for that model.</p> <p>Taking it a step further, this metadata could even be retrieved from a database at program startup. That would make it possible to change your view completely by adjusting a few fields in your online database, e.g. changing from a simple TextBox to a ComboBox with preset values.</p> <p>Having loved the idea behind this for ages now, I&#39;ve worked on a little WPF framework that does just the thing!</p> <p>Here&#39;s a small preview of a view completely built up from the model. <img src="https://cloud.githubusercontent.com/assets/544444/5234817/8cb922ac-77dd-11e4-801d-bcf6bad9e994.png" alt="Nova Bindings"></p> <h2>So how do we use it?</h2> <h3>Including and referencing</h3> <p>First step, get a dll from my GitHub repo: <a href="https://github.com/StevenThuriot/Nova.Bindings">Nova.Bindings</a>.</p> <p>Second, merge Nova.Bindings&#39; <code>ResourceDictionary</code> into your app&#39;s dictionary.</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ResourceDictionary.MergedDictionaries&gt;</span>
        <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&quot;pack://application:,,,/Nova.Bindings;component/ValueEditor.xaml&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ResourceDictionary.MergedDictionaries&gt;</span>
</code></pre></div> <h3>Views</h3> <p>After doing this, views become as simple as using TextBlock/Labels and ValueEditors, combined with a special Binding. It will be the only editor you&#39;ll ever use again!</p> <p>A change in the model? No problem! The Bindings will take care of it for you!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;TextBlock</span>   <span class="na">Grid.Column=</span><span class="s">&quot;0&quot;</span> <span class="na">Text=</span><span class="s">&quot;{LabelFor Model.Property}&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;ValueEditor</span> <span class="na">Grid.Column=</span><span class="s">&quot;1&quot;</span> <span class="na">Value=</span><span class="s">&quot;{ValueBinding Model.Property}&quot;</span> <span class="nt">/&gt;</span>
</code></pre></div> <p>The <code>LabelFor</code> binding has a property <code>AppendColon</code>, default <code>true</code>, which will append a colon to the label.</p> <p>The <code>ValueBinding</code> binding has two properties that can be set:</p> <ul> <li>Mode ( == BindingMode, default value is BindingMode.Default )</li> <li>Converter ( Default null )</li> </ul> <h4>Implementation</h4> <p>Implement IHaveSettingsManager on your ViewModel. The bindings will try to resolve this Manager (from the control up) to try and find the control&#39;s settings.</p> <h4>ViewModel</h4> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ViewModel</span> <span class="p">:</span> <span class="n">IHaveSettingsManager</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">ISettingsManager</span> <span class="n">SettingsManager</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">ViewModel</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">SettingsManager</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NovaSettingsManager</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <h4>Settings Manager</h4> <p>Next, create a settings manager.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">NovaSettingsManager</span> <span class="p">:</span> <span class="n">ISettingsManager</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">IDefinition</span><span class="p">&gt;</span> <span class="n">_definitions</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">DefinitionFactory</span> <span class="n">_factory</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">NovaSettingsManager</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_definitions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">IDefinition</span><span class="p">&gt;();</span>

        <span class="c1">//TODO;</span>
        <span class="n">_factory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ComboBoxFactory</span><span class="p">();</span> <span class="c1">//Good starter since it&#39;s a special case.</span>
        <span class="n">_factory</span><span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">RadioButtonFactory</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">CheckBoxFactory</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">DatePickerFactory</span><span class="p">&gt;()</span>
                <span class="c1">//.......... </span>
                <span class="p">.</span><span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">TextBoxFactory</span><span class="p">&gt;();</span> <span class="c1">//Decent Fallback in case nothing matches.</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">IDefinition</span> <span class="nf">GetDefinition</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">IDefinition</span> <span class="n">definition</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_definitions</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="k">out</span> <span class="n">definition</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">definition</span> <span class="p">=</span> <span class="n">_factory</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="n">_definitions</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">definition</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">//Sample [Chain Of Responsilibity](https://www.dofactory.com/net/chain-of-responsibility-design-pattern)</span>
<span class="k">abstract</span> <span class="k">class</span> <span class="nc">DefinitionFactory</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="n">DefinitionFactory</span> <span class="n">_successor</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">DefinitionFactory</span> <span class="nf">SetSuccessor</span><span class="p">(</span><span class="n">DefinitionFactory</span> <span class="n">successor</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_successor</span> <span class="p">=</span> <span class="n">successor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">DefinitionFactory</span> <span class="n">SetSuccessor</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
        <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">DefinitionFactory</span><span class="p">,</span> <span class="k">new</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_successor</span> <span class="p">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">IDefinition</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">definition</span> <span class="p">=</span> <span class="n">CreateDefinition</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">definition</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">_successor</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">definition</span> <span class="p">=</span> <span class="n">_successor</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">definition</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">definition</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotSupportedException</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">abstract</span> <span class="n">IDefinition</span> <span class="nf">CreateDefinition</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div> <h4>Meta Data</h4> <p>The id the <code>GetDefinition</code> method receives is determined by the metadata you have to place on the model. (Hence <strong>model first</strong>) This is done by adding attributes.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Settings(&quot;PersonName&quot;)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</code></pre></div> <p>In this specific case, the id will be <em>PersonName</em>. Sometimes, fields can have multiple definitions, depending on the situations. Imagine a class where a second property determins if the decorated property is shown as a combobox or a normal text field. This can&#39;t be decorated by a simple attribute.</p> <p>In this case, we can use a second provided attribute.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[DynamicSettings(&quot;SomeDynamicProperty&quot;)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="n">Property</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</code></pre></div> <p>When using <code>Dynamic Settings</code>, the class that has said property <em>must</em> implement <code>IHaveDynamicPropertySettings</code>.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Model</span> <span class="p">:</span> <span class="n">IHaveDynamicPropertySettings</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nf">ProvideDynamicSettings</span><span class="p">(</span><span class="kt">string</span> <span class="n">field</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">field</span> <span class="p">==</span> <span class="s">&quot;SomeDynamicProperty&quot;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">SecondProperty</span> <span class="p">==</span> <span class="s">&quot;Something&quot;</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">&quot;PersonName&quot;</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">&quot;PersonList&quot;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">field</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The string returned will be the id used in the settings manager to find the correct <code>IDefinition</code>.</p> <h4>Definitions</h4> <h5>Default</h5> <p>A definition has the following properties:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IDefinition</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">string</span> <span class="n">Label</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">string</span> <span class="n">Editor</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <ul> <li><code>Id</code> is the id from the <code>GetDefinition</code> method.</li> <li><code>Label</code> is the text used for the <code>LabelFor</code> extension.</li> <li><code>Editor</code> is the type of editor that needs to be used.</li> </ul> <p>This will do for most settings. Two control types require a specific interface to be implemented;</p> <h5>ComboBox</h5> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IComboBoxDefinition</span> <span class="p">:</span> <span class="n">IDefinition</span>
<span class="p">{</span>
    <span class="n">IEnumerable</span> <span class="n">ItemsSource</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <h5>RadioButton</h5> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IRadioButtonDefinition</span> <span class="p">:</span> <span class="n">IDefinition</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">GroupName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>To make life easier, constants are available! The <code>Editor</code> is defined as a string rather than an enum to make it easier to add your own implementations!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">Nova.Bindings.ValueEditor.Definitions.ValueTextEditor
Nova.Bindings.ValueEditor.Definitions.ValueCheckBoxEditor
Nova.Bindings.ValueEditor.Definitions.ValueRadioButtonEditor
Nova.Bindings.ValueEditor.Definitions.ValueComboBoxEditor
</code></pre></div> <h4>Templates</h4> <p>A template can easily be added by adding a similar template into the App&#39;s Resource Dictionary. Samples can be found <a href="https://github.com/StevenThuriot/Nova.Bindings/blob/master/Nova.Bindings/ValueEditor.xaml">here</a>.</p> <p>Note that the Template keys are the same as the Editor constants that IDefinition supplies!</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ControlTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;ValueTextEditor&quot;</span> <span class="na">TargetType=</span><span class="s">&quot;n:ValueEditor&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;TextBox</span> <span class="na">x:Name=</span><span class="s">&quot;PART_ValueEditor&quot;</span>
             <span class="na">Text=</span><span class="s">&quot;{Binding Value, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/ControlTemplate&gt;</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Resolving types while stripping down nullables]]></title> <description><![CDATA[I&#39;m currently working on a WPF project that uses advanced validation for their screens. Each WPF control has a property that accepts a data type for the property you&#39;re binding it to. This datatype will be used during validation so illegal formats aren&#39;t filled in. (e.g. no strings when ints are expected, no ints when decimals are specified, etc...). We currently have a few metadata builders that simplify this process greatly by resolving types and setting them automatically. There is one catch, though. &lt;!--more--&gt;When binding to a nullable property, the base type is used rather than the nullable type. Coming up with a solution, was luckily not that hard. Rather than setting the datatype directly from the passed generic type, we added a little helper method. This method makes sure the correct type is always resolved. ```csharp public static Type GetDataType&lt;T&gt;() { return GetDataType(typeof (T)); } public static Type GetDataType(Type type) { return Nullable.GetUnderlyingType(type) ?? type; } ``` ]]></description> <link>//steven.thuriot.be/resolving-types-while-stripping-down-nullables</link> <guid isPermaLink="true">//steven.thuriot.be/resolving-types-while-stripping-down-nullables</guid> <pubDate>2013-11-27T12:10:00+00:00</pubDate> <content:encoded><![CDATA[<p>I&#39;m currently working on a WPF project that uses advanced validation for their screens.</p> <p>Each WPF control has a property that accepts a data type for the property you&#39;re binding it to. This datatype will be used during validation so illegal formats aren&#39;t filled in. (e.g. no strings when ints are expected, no ints when decimals are specified, etc...). We currently have a few metadata builders that simplify this process greatly by resolving types and setting them automatically.</p> <p>There is one catch, though. &lt;!--more--&gt;When binding to a nullable property, the base type is used rather than the nullable type.</p> <p>Coming up with a solution, was luckily not that hard. Rather than setting the datatype directly from the passed generic type, we added a little helper method. This method makes sure the correct type is always resolved.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="n">GetDataType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">T</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="n">Type</span> <span class="nf">GetDataType</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">Nullable</span><span class="p">.</span><span class="n">GetUnderlyingType</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">??</span> <span class="n">type</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content:encoded> </item> <item> <title><![CDATA[Exceptions and the TPL]]></title> <description><![CDATA[When an exception occurs while using the TPL, it will always get wrapped with an [AggregateException](http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx) before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well. This is, *of course*, something you do not want to happen as the callstack contains valuable information. ```csharp try { var task=Task.Run(...) task.Wait(); } catch(AggregateException ex) { ExceptionDispatchInfo.Capture(ex.InnerException).Throw(); } ``` Due to the new [async/await](http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx) system Microsoft introduced in .NET 4.5, they simplified this greatly by introducing the [ExceptionDispatchInfo](http://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo.aspx) helper. By using this class, you are able to rethrow a caught exception object without losing the callstack. This allows you to unwrap the [AggregateException](http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx) and rethrow the actual exception. This allows you or the users of your code to catch specific exceptions. The snippet above is, of course, not a very realistic way to use this helper class, but shows what it does perfectly. ]]></description> <link>//steven.thuriot.be/exceptions-and-the-tpl</link> <guid isPermaLink="true">//steven.thuriot.be/exceptions-and-the-tpl</guid> <pubDate>2013-11-27T10:50:00+00:00</pubDate> <media:content url="//cdn.thuriot.be/images/Covers/Carnivorous-Rabbit.jpg" medium="image"/> <content:encoded><![CDATA[<p>When an exception occurs while using the TPL, it will always get wrapped with an <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> before you can catch and handle it. This makes catching specific exceptions quite bothersome as you&#39;re basically writing a catch-all block. Bad practices set aside, unwrapping the exception usually meant losing the callstack as well.</p> <p>This is, <em>of course</em>, something you do not want to happen as the callstack contains valuable information.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">try</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Run</span><span class="p">(...)</span>
    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="n">AggregateException</span> <span class="n">ex</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ExceptionDispatchInfo</span><span class="p">.</span><span class="n">Capture</span><span class="p">(</span><span class="n">ex</span><span class="p">.</span><span class="n">InnerException</span><span class="p">).</span><span class="n">Throw</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <p>Due to the new <a href="http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx">async/await</a> system Microsoft introduced in .NET 4.5, they simplified this greatly by introducing the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo.aspx">ExceptionDispatchInfo</a> helper.</p> <p>By using this class, you are able to rethrow a caught exception object without losing the callstack. This allows you to unwrap the <a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx">AggregateException</a> and rethrow the actual exception. This allows you or the users of your code to catch specific exceptions.</p> <p>The snippet above is, of course, not a very realistic way to use this helper class, but shows what it does perfectly.</p> ]]></content:encoded> </item> <item> <title><![CDATA[WF in WPF: Handing over control to the user]]></title> <description><![CDATA[...because delivering an application set in stone doesn&#39;t always cut it. [![Set in Stone](//cdn.thuriot.be/images/WFinWPF/Stone.jpg)](//cdn.thuriot.be/images/WFinWPF/Stone.jpg) #What is which and which is what?? Before we begin, it is important that we understand all of the concepts used. So we will go over them first. ##WF: Windows Workflow Foundation Workflow foundation is a Microsoft technology that provides the developer with an easy way to host an in-process workflow engine. A workflow is a series of distinct programming steps or phases. A step in workflow is also referred to as an “Activity”. The .NET framework already provides a huge list of these activities, e.g. “Writeline”. While most things can already be achieved using these predefined activities, it is also possible for the developer to create their very own activities. These activities can be used as building blocks to visually assemble a workflow. [![.NET Framework Chart](//cdn.thuriot.be/images/WFinWPF/Chart.jpg)](//cdn.thuriot.be/images/WFinWPF/Chart.jpg) ##WPF: Windows Presentation Foundation The Presentation Foundation is a graphical subsystem for rendering user interfaces in Windows-based applications. WPF runs on top of DirectX. WPF views are built using XAML. This is an XML-based language to define and link various UI elements. #Handing over control? ##Why? A lot of the applications we build on a daily basis have a pretty solid foundation. The general guidelines are written down. These are then turned into code and a single purpose application is built. But what happens when the requirements can change on a daily basis? Or when they can differ greatly on the context they’re used in? This can be solved by handing over the control to the end user. By handing over simple building blocks, rather than lines of code written in stone, we can enable the user to customize the application to their needs at that particular time in an easy and playful manner. [![Lego Building Blocks](//cdn.thuriot.be/images/WFinWPF/Lego.jpg)](//cdn.thuriot.be/images/WFinWPF/Lego.jpg) By teaching the end user how to play with these blocks (or rather, Workflow Activities), (s)he can constantly keep shaping the application to their needs. ##How? Wait a minute... All of this sounds rather hard! The end user won’t be happy with a giant software bill after developing all of this... While it could be a lot of work, it is very easy to achieve this goal by combining WF with WPF! The .NET framework comes with a Workflow designer specifically for WPF. With only a few lines of code, we can offer the end user a visual designer that is easy to use. By dragging and dropping activity blocks, a workflow that suits the user’s needs can be set up in a matter of minutes. Not only is it easy to set up, it’s also very easy to execute, save and load workflows into the application! This way, the end user can set up several workflows they often require and load them up when needed. ###Snippet This sample shows how to do it in only a few lines of *(granted, quick and dirty)* code: ####Window.xaml ```xml &lt;window x:Class=&quot;MainWindow&quot; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; Title=&quot;MainWindow&quot; Height=&quot;350&quot; Width=&quot;525&quot;&gt; &lt;grid x:Name=&quot;_Grid&quot;&gt; &lt;/grid&gt;&lt;grid .ColumnDefinitions&gt; &lt;columndefinition Width=&quot;Auto&quot;&gt;&lt;/columndefinition&gt; &lt;columndefinition Width=&quot;*&quot;&gt;&lt;/columndefinition&gt; &lt;columndefinition Width=&quot;Auto&quot;&gt;&lt;/columndefinition&gt; &lt;/grid&gt; &lt;contentpresenter Grid.Column=&quot;1&quot; Content=&quot;{Binding View}&quot;&gt;&lt;/contentpresenter&gt; &lt;/window&gt; ``` ####Window.xaml.cs ```csharp private void CreateDesigner() { var dm=new DesignerMetadata(); dm.Register(); _designer=new WorkflowDesigner(); _designer.Load(new Sequence()); var designerView=_designer.Context.Services.GetService&amp;lt;DesignerView&amp;gt;(); designerView.WorkflowShellBarItemVisibility = ShellBarItemVisibility.Imports | ShellBarItemVisibility.MiniMap | ShellBarItemVisibility.Variables | ShellBarItemVisibility.Arguments | ShellBarItemVisibility.Zoom; ToolboxControl tc=GetToolboxControl(); Grid.SetColumn(tc, 0); _Grid.Children.Add(tc); var propertyInspectorView=_designer.PropertyInspectorView; Grid.SetColumn(propertyInspectorView, 2); _Grid.Children.Add(propertyInspectorView); DataContext=_designer; } private static ToolboxControl GetToolboxControl() { // Create the ToolBoxControl. var ctrl=new ToolboxControl(); // Create a category. var category=new ToolboxCategory(&quot;category1&quot;); // Create Toolbox items. var tool1=new ToolboxItemWrapper(typeof(Assign)); var tool2=new ToolboxItemWrapper(typeof(Sequence)); var tool3=new ToolboxItemWrapper(typeof(WriteLine)); // Add the Toolbox items to the category. category.Add(tool1); category.Add(tool2); category.Add(tool3); // Add the category to the ToolBox control. ctrl.Categories.Add(category); return ctrl; } ``` ###Executing a workflow: ```csharp _designer.Flush(); string workflow=_designer.Text; var encoding=new ASCIIEncoding(); var bytes=encoding.GetBytes(workflow); using (var stream=new MemoryStream(bytes)) { var activity=ActivityXamlServices.Load(stream); var invoker=new WorkflowInvoker(activity); invoker.Invoke(); } ``` ###Result: [![WPF View Result](//cdn.thuriot.be/images/WFinWPF/Result.png)](//cdn.thuriot.be/images/WFinWPF/Result.png) ]]></description> <link>//steven.thuriot.be/wf-in-wpf-handing-over-control-to-the-user</link> <guid isPermaLink="true">//steven.thuriot.be/wf-in-wpf-handing-over-control-to-the-user</guid> <pubDate>2013-07-01T09:30:00+00:00</pubDate> <content:encoded><![CDATA[<p>...because delivering an application set in stone doesn&#39;t always cut it.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Stone.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Stone.jpg" alt="Set in Stone"></a></p> <h1>What is which and which is what??</h1> <p>Before we begin, it is important that we understand all of the concepts used. So we will go over them first.</p> <h2>WF: Windows Workflow Foundation</h2> <p>Workflow foundation is a Microsoft technology that provides the developer with an easy way to host an in-process workflow engine.</p> <p>A workflow is a series of distinct programming steps or phases. A step in workflow is also referred to as an “Activity”. The .NET framework already provides a huge list of these activities, e.g. “Writeline”. While most things can already be achieved using these predefined activities, it is also possible for the developer to create their very own activities.</p> <p>These activities can be used as building blocks to visually assemble a workflow.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Chart.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Chart.jpg" alt=".NET Framework Chart"></a></p> <h2>WPF: Windows Presentation Foundation</h2> <p>The Presentation Foundation is a graphical subsystem for rendering user interfaces in Windows-based applications. WPF runs on top of DirectX.</p> <p>WPF views are built using XAML. This is an XML-based language to define and link various UI elements.</p> <h1>Handing over control?</h1> <h2>Why?</h2> <p>A lot of the applications we build on a daily basis have a pretty solid foundation. The general guidelines are written down. These are then turned into code and a single purpose application is built.</p> <p>But what happens when the requirements can change on a daily basis? Or when they can differ greatly on the context they’re used in?</p> <p>This can be solved by handing over the control to the end user. By handing over simple building blocks, rather than lines of code written in stone, we can enable the user to customize the application to their needs at that particular time in an easy and playful manner.</p> <p><a href="//cdn.thuriot.be/images/WFinWPF/Lego.jpg"><img src="//cdn.thuriot.be/images/WFinWPF/Lego.jpg" alt="Lego Building Blocks"></a></p> <p>By teaching the end user how to play with these blocks (or rather, Workflow Activities), (s)he can constantly keep shaping the application to their needs.</p> <h2>How?</h2> <p>Wait a minute... All of this sounds rather hard! The end user won’t be happy with a giant software bill after developing all of this...</p> <p>While it could be a lot of work, it is very easy to achieve this goal by combining WF with WPF!</p> <p>The .NET framework comes with a Workflow designer specifically for WPF. With only a few lines of code, we can offer the end user a visual designer that is easy to use. By dragging and dropping activity blocks, a workflow that suits the user’s needs can be set up in a matter of minutes.</p> <p>Not only is it easy to set up, it’s also very easy to execute, save and load workflows into the application! This way, the end user can set up several workflows they often require and load them up when needed.</p> <h3>Snippet</h3> <p>This sample shows how to do it in only a few lines of <em>(granted, quick and dirty)</em> code:</p> <h4>Window.xaml</h4> <div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;window</span> <span class="na">x:Class=</span><span class="s">&quot;MainWindow&quot;</span>
        <span class="na">xmlns=</span><span class="s">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span>
        <span class="na">xmlns:x=</span><span class="s">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>
        <span class="na">Title=</span><span class="s">&quot;MainWindow&quot;</span> <span class="na">Height=</span><span class="s">&quot;350&quot;</span> <span class="na">Width=</span><span class="s">&quot;525&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;grid</span> <span class="na">x:Name=</span><span class="s">&quot;_Grid&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/grid&gt;&lt;grid</span> <span class="err">.ColumnDefinitions</span><span class="nt">&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;Auto&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;*&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
            <span class="nt">&lt;columndefinition</span> <span class="na">Width=</span><span class="s">&quot;Auto&quot;</span><span class="nt">&gt;&lt;/columndefinition&gt;</span>
        <span class="nt">&lt;/grid&gt;</span>

        <span class="nt">&lt;contentpresenter</span> <span class="na">Grid.Column=</span><span class="s">&quot;1&quot;</span> <span class="na">Content=</span><span class="s">&quot;{Binding View}&quot;</span><span class="nt">&gt;&lt;/contentpresenter&gt;</span>

<span class="nt">&lt;/window&gt;</span>
</code></pre></div> <h4>Window.xaml.cs</h4> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="nf">CreateDesigner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">dm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DesignerMetadata</span><span class="p">();</span>
    <span class="n">dm</span><span class="p">.</span><span class="n">Register</span><span class="p">();</span>

    <span class="n">_designer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkflowDesigner</span><span class="p">();</span>
    <span class="n">_designer</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="k">new</span> <span class="n">Sequence</span><span class="p">());</span>

    <span class="kt">var</span> <span class="n">designerView</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">Context</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">GetService</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DesignerView</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>

    <span class="n">designerView</span><span class="p">.</span><span class="n">WorkflowShellBarItemVisibility</span> <span class="p">=</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Imports</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">MiniMap</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Variables</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Arguments</span> <span class="p">|</span>
        <span class="n">ShellBarItemVisibility</span><span class="p">.</span><span class="n">Zoom</span><span class="p">;</span>

    <span class="n">ToolboxControl</span> <span class="n">tc</span> <span class="p">=</span> <span class="n">GetToolboxControl</span><span class="p">();</span>
    <span class="n">Grid</span><span class="p">.</span><span class="n">SetColumn</span><span class="p">(</span><span class="n">tc</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>

    <span class="n">_Grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tc</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">propertyInspectorView</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">PropertyInspectorView</span><span class="p">;</span>

    <span class="n">Grid</span><span class="p">.</span><span class="n">SetColumn</span><span class="p">(</span><span class="n">propertyInspectorView</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
    <span class="n">_Grid</span><span class="p">.</span><span class="n">Children</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">propertyInspectorView</span><span class="p">);</span>

    <span class="n">DataContext</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">static</span> <span class="n">ToolboxControl</span> <span class="nf">GetToolboxControl</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Create the ToolBoxControl.</span>
    <span class="kt">var</span> <span class="n">ctrl</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxControl</span><span class="p">();</span>

    <span class="c1">// Create a category.</span>
    <span class="kt">var</span> <span class="n">category</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxCategory</span><span class="p">(</span><span class="s">&quot;category1&quot;</span><span class="p">);</span>

    <span class="c1">// Create Toolbox items.</span>
    <span class="kt">var</span> <span class="n">tool1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Assign</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">tool2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Sequence</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">tool3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ToolboxItemWrapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">WriteLine</span><span class="p">));</span>

    <span class="c1">// Add the Toolbox items to the category.</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool1</span><span class="p">);</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool2</span><span class="p">);</span>
    <span class="n">category</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">tool3</span><span class="p">);</span>

    <span class="c1">// Add the category to the ToolBox control.</span>
    <span class="n">ctrl</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">category</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">ctrl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> <h3>Executing a workflow:</h3> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">_designer</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
<span class="kt">string</span> <span class="n">workflow</span> <span class="p">=</span> <span class="n">_designer</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">encoding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ASCIIEncoding</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">encoding</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">workflow</span><span class="p">);</span>

<span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">(</span><span class="n">bytes</span><span class="p">))</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">activity</span> <span class="p">=</span> <span class="n">ActivityXamlServices</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">invoker</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WorkflowInvoker</span><span class="p">(</span><span class="n">activity</span><span class="p">);</span>
    <span class="n">invoker</span><span class="p">.</span><span class="n">Invoke</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div> <h3>Result:</h3> <p><a href="//cdn.thuriot.be/images/WFinWPF/Result.png"><img src="//cdn.thuriot.be/images/WFinWPF/Result.png" alt="WPF View Result"></a></p> ]]></content:encoded> </item> <item> <title><![CDATA[Modal Message Box for WinForms in .NET 2.0+]]></title> <description><![CDATA[The other day at work I felt the need to show the user a message, but wanted to do it a bit more fancy than just use the regular, old, boring MessageBox. I personally really enjoy the &quot;LightBox effect&quot; where the background darkens and the LightBox popped up. Because of the way WinForms work, this wasn&#39;t as simple as I was hoping it would be. I worked out a little solution and decided to share. ```csharp public class ModalMessageBox : Form { private ModalMessageBox(Form parent, string message, MessageBoxButtons buttons, Font font) { if (parent == null) throw new ArgumentNullException(&quot;parent&quot;); if (string.IsNullOrEmpty(message)) throw new ArgumentNullException(&quot;message&quot;); if (font == null) throw new ArgumentNullException(&quot;font&quot;); InitializeComponent(parent, message, buttons, font); } private void InitializeOKButton(Form parent) { var okButton=new Button { Anchor=(((AnchorStyles.Bottom | AnchorStyles.Right))), Size=new Size(99, 23), TabIndex=1, Text=&quot;OK&quot;, UseVisualStyleBackColor=true, DialogResult=DialogResult.OK, }; okButton.Location = new Point(parent.ClientSize.Width - okButton.Size.Width - 11, parent.ClientSize.Height - okButton.Size.Height - 11); Controls.Add(okButton); } private void InitializeYesNoButtons(Form parent) { var noButton=new Button { Anchor=(((AnchorStyles.Bottom | AnchorStyles.Right))), Size=new Size(99, 23), TabIndex=2, Text=&quot;No&quot;, UseVisualStyleBackColor=true, DialogResult=DialogResult.No }; noButton.Location = new Point(parent.ClientSize.Width - noButton.Size.Width - 11, parent.ClientSize.Height - noButton.Size.Height - 11); Controls.Add(noButton); var yesButton=new Button { Anchor=(((AnchorStyles.Bottom | AnchorStyles.Right))), Size=new Size(99, 23), TabIndex=1, Text=&quot;Yes&quot;, UseVisualStyleBackColor=true, DialogResult=DialogResult.Yes }; yesButton.Location = new Point(parent.ClientSize.Width - yesButton.Size.Width - noButton.Width - 16, parent.ClientSize.Height - yesButton.Size.Height - 11); Controls.Add(yesButton); } private void InitializeComponent(Form parent, string message, MessageBoxButtons buttons, Font font) { SuspendLayout(); var questionLabel=new Label { Anchor=AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right, BackColor=Color.White, BorderStyle=BorderStyle.FixedSingle, Font=font, ForeColor=Color.Black, ImeMode=ImeMode.NoControl, Location=new Point(10, 42), TabIndex=3, Text=message, TextAlign=ContentAlignment.MiddleCenter }; var height=parent.ClientSize.Height - 78; if (height &gt; 300) height=300; questionLabel.Size = new Size(parent.ClientSize.Width - 20, height); MaximizeBox=false; MinimizeBox=false; ShowInTaskbar=false; SizeGripStyle=SizeGripStyle.Hide; FormBorderStyle=FormBorderStyle.None; StartPosition=FormStartPosition.Manual; ClientSize=new Size(parent.ClientSize.Width + 2, parent.ClientSize.Height + 2); Rectangle screenRectangle=parent.RectangleToScreen(parent.ClientRectangle); int titleHeight=screenRectangle.Top - parent.Top; int borderWidth=screenRectangle.Left - parent.Left; Location=new Point(parent.Location.X + borderWidth - 1, parent.Location.Y + titleHeight - 1); TransparencyKey=Color.LightSteelBlue; var hatchBrush=new HatchBrush(HatchStyle.Percent50, TransparencyKey); var backgroundImage=new Bitmap(50, 50); Graphics imageGraphics=Graphics.FromImage(backgroundImage); imageGraphics.FillRectangle(hatchBrush, DisplayRectangle); AllowTransparency=true; backgroundImage.MakeTransparent(TransparencyKey); BackColor=TransparencyKey; BackgroundImage=backgroundImage; BackgroundImageLayout=ImageLayout.Tile; Controls.Add(questionLabel); switch (buttons) { case MessageBoxButtons.OK: InitializeOKButton(parent); break; case MessageBoxButtons.YesNo: InitializeYesNoButtons(parent); break; default: throw new ArgumentOutOfRangeException(&quot;buttons&quot;); } ResumeLayout(false); } public static DialogResult Show(Form parent, string message) { return Show(parent, message, MessageBoxButtons.OK); } public static DialogResult Show(Form parent, string message, MessageBoxButtons buttons) { return Show(parent, message, buttons, parent.Font); } private delegate DialogResult ShowDelegate(Form parent, string message, MessageBoxButtons buttons, Font font); private static readonly ShowDelegate InternalShow=(parent, message, buttons, font) =&gt; new ModalMessageBox(parent, message, buttons, font).ShowDialog(parent); public static DialogResult Show(Form parent, string message, MessageBoxButtons buttons, Font font) { if (parent.InvokeRequired) { var result=parent.Invoke(InternalShow, parent, message, buttons, font); return (DialogResult) result; } return InternalShow(parent, message, buttons, font); } } ``` The result looks like this: Before the pop-up [![Input before the message pops up](//cdn.thuriot.be/images/ModalMessageBox/Input1.png)](//cdn.thuriot.be/images/ModalMessageBox/Input1.png) After the pop-up [![Input after the message pops up](//cdn.thuriot.be/images/ModalMessageBox/Input2.png)](//cdn.thuriot.be/images/ModalMessageBox/Input2.png) ]]></description> <link>//steven.thuriot.be/modal-message-box-for-winforms-in-net-2-0</link> <guid isPermaLink="true">//steven.thuriot.be/modal-message-box-for-winforms-in-net-2-0</guid> <pubDate>2012-01-12T19:40:00+00:00</pubDate> <content:encoded><![CDATA[<p>The other day at work I felt the need to show the user a message, but wanted to do it a bit more fancy than just use the regular, old, boring MessageBox. </p> <p>I personally really enjoy the &quot;LightBox effect&quot; where the background darkens and the LightBox popped up. Because of the way WinForms work, this wasn&#39;t as simple as I was hoping it would be. I worked out a little solution and decided to share.</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ModalMessageBox</span> <span class="p">:</span> <span class="n">Form</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nf">ModalMessageBox</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;parent&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">message</span><span class="p">))</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">font</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;font&quot;</span><span class="p">);</span>

        <span class="n">InitializeComponent</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeOKButton</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">okButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">OK</span><span class="p">,</span>
                            <span class="p">};</span>

        <span class="n">okButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">okButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">11</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">okButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>


        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">okButton</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeYesNoButtons</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">noButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;No&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">No</span>
                            <span class="p">};</span>

        <span class="n">noButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">11</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">noButton</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">yesButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span>
                            <span class="p">{</span>
                                <span class="n">Anchor</span> <span class="p">=</span> <span class="p">(((</span><span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">))),</span>
                                <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="m">99</span><span class="p">,</span> <span class="m">23</span><span class="p">),</span>
                                <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                                <span class="n">Text</span> <span class="p">=</span> <span class="s">&quot;Yes&quot;</span><span class="p">,</span>
                                <span class="n">UseVisualStyleBackColor</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                                <span class="n">DialogResult</span> <span class="p">=</span> <span class="n">DialogResult</span><span class="p">.</span><span class="n">Yes</span>
                            <span class="p">};</span>

        <span class="n">yesButton</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">yesButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="n">noButton</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">16</span><span class="p">,</span>
                                        <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="n">yesButton</span><span class="p">.</span><span class="n">Size</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">11</span><span class="p">);</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">yesButton</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeComponent</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">SuspendLayout</span><span class="p">();</span>

        <span class="kt">var</span> <span class="n">questionLabel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Label</span>
                                <span class="p">{</span>
                                    <span class="n">Anchor</span> <span class="p">=</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Top</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Bottom</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Left</span> <span class="p">|</span> <span class="n">AnchorStyles</span><span class="p">.</span><span class="n">Right</span><span class="p">,</span>
                                    <span class="n">BackColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
                                    <span class="n">BorderStyle</span> <span class="p">=</span> <span class="n">BorderStyle</span><span class="p">.</span><span class="n">FixedSingle</span><span class="p">,</span>
                                    <span class="n">Font</span> <span class="p">=</span> <span class="n">font</span><span class="p">,</span>
                                    <span class="n">ForeColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
                                    <span class="n">ImeMode</span> <span class="p">=</span> <span class="n">ImeMode</span><span class="p">.</span><span class="n">NoControl</span><span class="p">,</span>
                                    <span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">42</span><span class="p">),</span>
                                    <span class="n">TabIndex</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span>
                                    <span class="n">Text</span> <span class="p">=</span> <span class="n">message</span><span class="p">,</span>
                                    <span class="n">TextAlign</span> <span class="p">=</span> <span class="n">ContentAlignment</span><span class="p">.</span><span class="n">MiddleCenter</span>
                                <span class="p">};</span>

        <span class="kt">var</span> <span class="n">height</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">-</span> <span class="m">78</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">height</span> <span class="p">&gt;</span> <span class="m">300</span><span class="p">)</span>
            <span class="n">height</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span>

        <span class="n">questionLabel</span><span class="p">.</span><span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">-</span> <span class="m">20</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>

        <span class="n">MaximizeBox</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">MinimizeBox</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">ShowInTaskbar</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">SizeGripStyle</span> <span class="p">=</span> <span class="n">SizeGripStyle</span><span class="p">.</span><span class="n">Hide</span><span class="p">;</span>
        <span class="n">FormBorderStyle</span> <span class="p">=</span> <span class="n">FormBorderStyle</span><span class="p">.</span><span class="n">None</span><span class="p">;</span>

        <span class="n">StartPosition</span> <span class="p">=</span> <span class="n">FormStartPosition</span><span class="p">.</span><span class="n">Manual</span><span class="p">;</span>
        <span class="n">ClientSize</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Width</span> <span class="p">+</span> <span class="m">2</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">ClientSize</span><span class="p">.</span><span class="n">Height</span> <span class="p">+</span> <span class="m">2</span><span class="p">);</span>

        <span class="n">Rectangle</span> <span class="n">screenRectangle</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">RectangleToScreen</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">ClientRectangle</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">titleHeight</span> <span class="p">=</span> <span class="n">screenRectangle</span><span class="p">.</span><span class="n">Top</span> <span class="p">-</span> <span class="n">parent</span><span class="p">.</span><span class="n">Top</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">borderWidth</span> <span class="p">=</span> <span class="n">screenRectangle</span><span class="p">.</span><span class="n">Left</span> <span class="p">-</span> <span class="n">parent</span><span class="p">.</span><span class="n">Left</span><span class="p">;</span>

        <span class="n">Location</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">borderWidth</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">Location</span><span class="p">.</span><span class="n">Y</span> <span class="p">+</span> <span class="n">titleHeight</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>

        <span class="n">TransparencyKey</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightSteelBlue</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">hatchBrush</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HatchBrush</span><span class="p">(</span><span class="n">HatchStyle</span><span class="p">.</span><span class="n">Percent50</span><span class="p">,</span> <span class="n">TransparencyKey</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">backgroundImage</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="m">50</span><span class="p">,</span> <span class="m">50</span><span class="p">);</span>

        <span class="n">Graphics</span> <span class="n">imageGraphics</span> <span class="p">=</span> <span class="n">Graphics</span><span class="p">.</span><span class="n">FromImage</span><span class="p">(</span><span class="n">backgroundImage</span><span class="p">);</span>
        <span class="n">imageGraphics</span><span class="p">.</span><span class="n">FillRectangle</span><span class="p">(</span><span class="n">hatchBrush</span><span class="p">,</span> <span class="n">DisplayRectangle</span><span class="p">);</span>

        <span class="n">AllowTransparency</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="n">backgroundImage</span><span class="p">.</span><span class="n">MakeTransparent</span><span class="p">(</span><span class="n">TransparencyKey</span><span class="p">);</span>

        <span class="n">BackColor</span> <span class="p">=</span> <span class="n">TransparencyKey</span><span class="p">;</span>
        <span class="n">BackgroundImage</span> <span class="p">=</span> <span class="n">backgroundImage</span><span class="p">;</span>
        <span class="n">BackgroundImageLayout</span> <span class="p">=</span> <span class="n">ImageLayout</span><span class="p">.</span><span class="n">Tile</span><span class="p">;</span>

        <span class="n">Controls</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">questionLabel</span><span class="p">);</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">buttons</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">OK</span><span class="p">:</span>
                <span class="n">InitializeOKButton</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">YesNo</span><span class="p">:</span>
                <span class="n">InitializeYesNoButtons</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(</span><span class="s">&quot;buttons&quot;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">ResumeLayout</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Show</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span><span class="p">.</span><span class="n">OK</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">Show</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">parent</span><span class="p">.</span><span class="n">Font</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">delegate</span> <span class="n">DialogResult</span> <span class="nf">ShowDelegate</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">);</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">ShowDelegate</span> <span class="n">InternalShow</span> <span class="p">=</span> 
        <span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ModalMessageBox</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">).</span><span class="n">ShowDialog</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span> <span class="nf">Show</span><span class="p">(</span><span class="n">Form</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">MessageBoxButtons</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">Font</span> <span class="n">font</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">InvokeRequired</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="n">InternalShow</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">DialogResult</span><span class="p">)</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nf">InternalShow</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">buttons</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> <p>The result looks like this:</p> <p>Before the pop-up <a href="//cdn.thuriot.be/images/ModalMessageBox/Input1.png"><img src="//cdn.thuriot.be/images/ModalMessageBox/Input1.png" alt="Input before the message pops up"></a></p> <p>After the pop-up <a href="//cdn.thuriot.be/images/ModalMessageBox/Input2.png"><img src="//cdn.thuriot.be/images/ModalMessageBox/Input2.png" alt="Input after the message pops up"></a></p> ]]></content:encoded> </item> <item> <title><![CDATA[Multilanguage using Resource files (resx) in C# .NET]]></title> <description><![CDATA[I&#39;m currently working on a little helper framework and started placing all my strings in a resource file to keep my code as tidy as possible. At this point I started wondering, what if people want to use my framework, but don&#39;t want these messages appearing in English? Or even just want to slightly change the formatting of the messages I&#39;m placing in my resource file? &quot;Okay&quot;, I thought, &quot;I&#39;ll just change the resource file from embedded to external, then people can change it all they want&quot;. Sadly, things are never as easy as they may appear. Resource files need to be compiled as they have a code behind, thus you can&#39;t just make them external. Writing an entire reader wasn&#39;t an option for me either, as I found that way too much overhead, both for the speed of the framework as the work for the programmer. I also wanted to keep the easy-to-use resource files in my solution. &quot;Time for a new plan&quot;, I said to myself. &quot;We could create a second project file and place our resources in there. We could then release this project as an open source project so people could easily compile it into a DLL that the framework would use&quot;. It&#39;s quite obvious that your first ideas are never the good ones. Overcomplicating everything can sometimes be far too easy. Time to step back, relax and really start thinking things through. At this point I decided to take a look at how the code behind these resource files actually worked. They&#39;re actually fairly easy put together. For everything you put in your resource file, one getter property is generated. This getter property will refer to a resource manager that will read in the resource file. Right there and then, I saw the light! &quot;I&#39;ll just give people access to the resource manager&#39;s setter. Then they can replace it with their own!&quot;. A step in the right direction, but not there just yet. The problem is that this property does not have a setter. It only has a getter with a private backing field that gets initialized during the first call to it. Adding a setter wasn&#39;t an option, as every time you change something in your resource file, it will regenerate your code behind. If you forget about this setter, change something in your resource file and release your newly compiled framework, you will break people&#39;s code because your setter will be missing! A second idea was to create a partial class that had a property with getter and setter, giving access to this private field. While this seemed great, the problem is that the code behind the resource file is not a partial class. So every time you&#39;d change something, it would be regenerated again and you&#39;d have to place in the &quot;partial&quot; keyword to make your code compile again. You&#39;d also have two properties that more or less have the same functionality. It would also mean that my resource file had to be public, right in plain sight for everyone to see. At least you wouldn&#39;t be breaking other&#39;s code any more though. But no, this was &lt;em&gt;not&lt;/em&gt; good enough. I had to think of something that worked completely independent of my resource class. I figured I&#39;d make a static *Settings* class. In this class I&#39;d place a property that accepts a resource manager. It looks like this: ```csharp ///&lt;summary&gt; /// In case the default resource implementation does not suffice (e.g. you desire a translation), /// it is possible to replace it by your own. /// If the new resource manager doesn&#39;t have all the needed resources, it will not be set. ///&lt;/summary&gt; public static ResourceManager Resource { get { return MyFrameworkResourceFile.ResourceManager; } set { SetResource(value); } } ``` My setter has a call to a method to check if the new resource manager is compatible. It will check if all the keys defined in my resource file are also present in the new file. Because a private field has to be set, it will use reflection to get to this goal. Checking if the keys are present will also be done using reflection. The method is implemented like this: ```csharp ///&lt;summary&gt; /// Test if the new resource manager has all the needed resources. /// If it misses one or more values, it will keep the current resource manager. ///&lt;/summary&gt; ///&lt;param name=&quot;resourceManager&quot;&gt;The new resource manager.&lt;/param&gt; private static void SetResource(ResourceManager resourceManager) { if (resourceManager == null) return; var newKeys=new Collection(); var newResourceSet=resourceManager.GetResourceSet(Culture, true, true).GetEnumerator(); while (newResourceSet.MoveNext()) newKeys.Add(newResourceSet.Key.ToString()); var resourceType=typeof(MyFrameworkResourceFile); var properties=resourceType.GetProperties(BindingFlags.Static | (resourceType.IsPublic ? BindingFlags.Public : BindingFlags.NonPublic)); var foundAllKeys=properties.Select(x =&gt; x.Name) .Intersect(newKeys) .Count() == (properties.Length - 2); if (!foundAllKeys) return; var resourceManagerField=resourceType.GetField(&quot;resourceMan&quot;, BindingFlags.Static | BindingFlags.NonPublic); if (resourceManagerField == null) return; resourceManagerField.SetValue(null, resourceManager); } ``` I can already hear what you are thinking... &quot;But reflection is slow and you shouldn&#39;t use it&quot;. I couldn&#39;t agree more that it is slow. Well, slower. Completely not using it is something I don&#39;t fully agree on, however. There are cases where reflection works out quite well. As long as you don&#39;t start running it on huge lists or in for loops that run 100.000 times, reflection will always be an option for me. I did some tests on the time it takes, just to give you an idea and to show you it&#39;s really not that bad. For this I created a resource file with **200** lines of resources (thus a code behind with 202 properties, as it also has a property for its resource manager and its culture). Running it once successfully took an average of **0.016** seconds. Not that bad, huh? Running it 25.000 times still took less than **5** seconds. So, depending on how big your framework&#39;s resource file will be, this method will add at most 5 milliseconds to the start up time, which is quite acceptable. Especially since it makes both your as the user&#39;s life a lot easier. As for the user, all (s)he would have to do is create their own resource file and insert all of the keys that are in the original resource file as well. It doesn&#39;t matter if there are other keys as well that you want to use in your own application. The runtime of the method will not be affected by this as it will only check for the needed properties, thus skipping all of the other ones. All you have to do is make sure that the resource file has a code behind as well, though it doesn&#39;t matter if it is set to internal or public. Both work the same. Actually setting your custom resource file would work like this: ```csharp Settings.Resource = MyCustomResourceFile.ResourceManager; ``` It&#39;s as simple as that! ---- **[IMPORTANT] Edit:** Since this post has been receiving quite a few questions that can be solved in much easier ways, I will try to clarify my intentions a bit. The code supplied in my post gives the user of your framework more freedom to tinker with the actual resources when using your dll without having to do anything too fancy, e.g. change existing main resources or change things during runtime without changing the current culture. All in all, if all you want to do is supply a new non-supported language for your dll or any third party dll that you have the resx file for, supplying a completely new resource dll is the **best** way to go. Your users can then just create their own resx file and compile it into a satellite resource assembly using [Resource File Generator](http://msdn.microsoft.com/en-us/library/ccec7sz1.aspx) to compile the *resx* to a *.resources* file and then compile that file to a *resources.dll* using [Assembly Linker](http://msdn.microsoft.com/en-us/library/c405shex.aspx). If we&#39;d want to compile a resource file for the en-US culture, commands would be as following: ```xml resgen.exe /compile xxx.en-US.resx al.exe /out:TheApplication.xxx.en-US.resources.dll /embedresource: xxx.en-US.resources ``` ]]></description> <link>//steven.thuriot.be/multilanguage-using-resource-files-resx-in-c-net</link> <guid isPermaLink="true">//steven.thuriot.be/multilanguage-using-resource-files-resx-in-c-net</guid> <pubDate>2011-05-15T13:09:00+00:00</pubDate> <content:encoded><![CDATA[<p>I&#39;m currently working on a little helper framework and started placing all my strings in a resource file to keep my code as tidy as possible.</p> <p>At this point I started wondering, what if people want to use my framework, but don&#39;t want these messages appearing in English? Or even just want to slightly change the formatting of the messages I&#39;m placing in my resource file?</p> <p>&quot;Okay&quot;, I thought, &quot;I&#39;ll just change the resource file from embedded to external, then people can change it all they want&quot;. Sadly, things are never as easy as they may appear. Resource files need to be compiled as they have a code behind, thus you can&#39;t just make them external. Writing an entire reader wasn&#39;t an option for me either, as I found that way too much overhead, both for the speed of the framework as the work for the programmer. I also wanted to keep the easy-to-use resource files in my solution.</p> <p>&quot;Time for a new plan&quot;, I said to myself. &quot;We could create a second project file and place our resources in there. We could then release this project as an open source project so people could easily compile it into a DLL that the framework would use&quot;. It&#39;s quite obvious that your first ideas are never the good ones. Overcomplicating everything can sometimes be far too easy. Time to step back, relax and really start thinking things through. At this point I decided to take a look at how the code behind these resource files actually worked. They&#39;re actually fairly easy put together. For everything you put in your resource file, one getter property is generated. This getter property will refer to a resource manager that will read in the resource file. Right there and then, I saw the light!</p> <p>&quot;I&#39;ll just give people access to the resource manager&#39;s setter. Then they can replace it with their own!&quot;. A step in the right direction, but not there just yet. The problem is that this property does not have a setter. It only has a getter with a private backing field that gets initialized during the first call to it. Adding a setter wasn&#39;t an option, as every time you change something in your resource file, it will regenerate your code behind. If you forget about this setter, change something in your resource file and release your newly compiled framework, you will break people&#39;s code because your setter will be missing! A second idea was to create a partial class that had a property with getter and setter, giving access to this private field. While this seemed great, the problem is that the code behind the resource file is not a partial class. So every time you&#39;d change something, it would be regenerated again and you&#39;d have to place in the &quot;partial&quot; keyword to make your code compile again. You&#39;d also have two properties that more or less have the same functionality. It would also mean that my resource file had to be public, right in plain sight for everyone to see. At least you wouldn&#39;t be breaking other&#39;s code any more though. But no, this was <em>not</em> good enough. I had to think of something that worked completely independent of my resource class.</p> <p>I figured I&#39;d make a static <em>Settings</em> class. In this class I&#39;d place a property that accepts a resource manager. It looks like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="c1">///&lt;summary&gt;</span>
 <span class="c1">/// In case the default resource implementation does not suffice (e.g. you desire a translation),</span>
 <span class="c1">/// it is possible to replace it by your own.</span>
 <span class="c1">/// If the new resource manager doesn&#39;t have all the needed resources, it will not be set.</span>
 <span class="c1">///&lt;/summary&gt;</span>
 <span class="k">public</span> <span class="k">static</span> <span class="n">ResourceManager</span> <span class="n">Resource</span>
 <span class="p">{</span>
     <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">MyFrameworkResourceFile</span><span class="p">.</span><span class="n">ResourceManager</span><span class="p">;</span> <span class="p">}</span>
     <span class="k">set</span> <span class="p">{</span> <span class="n">SetResource</span><span class="p">(</span><span class="k">value</span><span class="p">);</span> <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div> <p>My setter has a call to a method to check if the new resource manager is compatible. It will check if all the keys defined in my resource file are also present in the new file. Because a private field has to be set, it will use reflection to get to this goal. Checking if the keys are present will also be done using reflection. The method is implemented like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="c1">///&lt;summary&gt;</span>
 <span class="c1">/// Test if the new resource manager has all the needed resources.</span>
 <span class="c1">/// If it misses one or more values, it will keep the current resource manager.</span>
 <span class="c1">///&lt;/summary&gt;</span>
 <span class="c1">///&lt;param name=&quot;resourceManager&quot;&gt;The new resource manager.&lt;/param&gt;</span>
 <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetResource</span><span class="p">(</span><span class="n">ResourceManager</span> <span class="n">resourceManager</span><span class="p">)</span>
 <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">resourceManager</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">newKeys</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Collection</span><span class="p">();</span>

    <span class="kt">var</span> <span class="n">newResourceSet</span> <span class="p">=</span> <span class="n">resourceManager</span><span class="p">.</span><span class="n">GetResourceSet</span><span class="p">(</span><span class="n">Culture</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">true</span><span class="p">).</span><span class="n">GetEnumerator</span><span class="p">();</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">newResourceSet</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">())</span>
        <span class="n">newKeys</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">newResourceSet</span><span class="p">.</span><span class="n">Key</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>

    <span class="kt">var</span> <span class="n">resourceType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MyFrameworkResourceFile</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">properties</span> <span class="p">=</span> <span class="n">resourceType</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span> <span class="p">|</span> <span class="p">(</span><span class="n">resourceType</span><span class="p">.</span><span class="n">IsPublic</span>
                                         <span class="p">?</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span>
                                         <span class="p">:</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">));</span>

    <span class="kt">var</span> <span class="n">foundAllKeys</span> <span class="p">=</span> <span class="n">properties</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
                                 <span class="p">.</span><span class="n">Intersect</span><span class="p">(</span><span class="n">newKeys</span><span class="p">)</span>
                                 <span class="p">.</span><span class="n">Count</span><span class="p">()</span> <span class="p">==</span> <span class="p">(</span><span class="n">properties</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="m">2</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(!</span><span class="n">foundAllKeys</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">resourceManagerField</span> <span class="p">=</span> <span class="n">resourceType</span><span class="p">.</span><span class="n">GetField</span><span class="p">(</span><span class="s">&quot;resourceMan&quot;</span><span class="p">,</span>
                                    <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">resourceManagerField</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="n">resourceManagerField</span><span class="p">.</span><span class="n">SetValue</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">resourceManager</span><span class="p">);</span>
 <span class="p">}</span>
</code></pre></div> <p>I can already hear what you are thinking... &quot;But reflection is slow and you shouldn&#39;t use it&quot;. I couldn&#39;t agree more that it is slow. Well, slower. Completely not using it is something I don&#39;t fully agree on, however. There are cases where reflection works out quite well. As long as you don&#39;t start running it on huge lists or in for loops that run 100.000 times, reflection will always be an option for me.</p> <p>I did some tests on the time it takes, just to give you an idea and to show you it&#39;s really not that bad. For this I created a resource file with <strong>200</strong> lines of resources (thus a code behind with 202 properties, as it also has a property for its resource manager and its culture).</p> <p>Running it once successfully took an average of <strong>0.016</strong> seconds. Not that bad, huh? Running it 25.000 times still took less than <strong>5</strong> seconds. So, depending on how big your framework&#39;s resource file will be, this method will add at most 5 milliseconds to the start up time, which is quite acceptable. Especially since it makes both your as the user&#39;s life a lot easier.</p> <p>As for the user, all (s)he would have to do is create their own resource file and insert all of the keys that are in the original resource file as well. It doesn&#39;t matter if there are other keys as well that you want to use in your own application. The runtime of the method will not be affected by this as it will only check for the needed properties, thus skipping all of the other ones. All you have to do is make sure that the resource file has a code behind as well, though it doesn&#39;t matter if it is set to internal or public. Both work the same. Actually setting your custom resource file would work like this:</p> <div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Settings</span><span class="p">.</span><span class="n">Resource</span> <span class="p">=</span> <span class="n">MyCustomResourceFile</span><span class="p">.</span><span class="n">ResourceManager</span><span class="p">;</span>
</code></pre></div> <p>It&#39;s as simple as that!</p> <hr> <p><strong>[IMPORTANT] Edit:</strong></p> <p>Since this post has been receiving quite a few questions that can be solved in much easier ways, I will try to clarify my intentions a bit.</p> <p>The code supplied in my post gives the user of your framework more freedom to tinker with the actual resources when using your dll without having to do anything too fancy, e.g. change existing main resources or change things during runtime without changing the current culture. </p> <p>All in all, if all you want to do is supply a new non-supported language for your dll or any third party dll that you have the resx file for, supplying a completely new resource dll is the <strong>best</strong> way to go. Your users can then just create their own resx file and compile it into a satellite resource assembly using <a href="http://msdn.microsoft.com/en-us/library/ccec7sz1.aspx">Resource File Generator</a> to compile the <em>resx</em> to a <em>.resources</em> file and then compile that file to a <em>resources.dll</em> using <a href="http://msdn.microsoft.com/en-us/library/c405shex.aspx">Assembly Linker</a>.</p> <p>If we&#39;d want to compile a resource file for the en-US culture, commands would be as following:</p> <div class="highlight"><pre><code class="language-xml" data-lang="xml">resgen.exe /compile xxx.en-US.resx
al.exe /out:TheApplication.xxx.en-US.resources.dll /embedresource: xxx.en-US.resources
</code></pre></div>]]></content:encoded> </item> </channel> </rss>